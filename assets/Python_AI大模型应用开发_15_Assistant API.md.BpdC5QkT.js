import{_ as a,c as i,o as n,ah as l}from"./chunks/framework.D5cOWG0Y.js";const g=JSON.parse('{"title":"Assistant API","description":"","frontmatter":{"title":"Assistant API","tags":["Python"],"categories":["Python"]},"headers":[],"relativePath":"Python/AI大模型应用开发/15_Assistant API.md","filePath":"Python/AI大模型应用开发/15_Assistant API.md","lastUpdated":1756658813000}'),p={name:"Python/AI大模型应用开发/15_Assistant API.md"};function e(h,s,t,k,r,d){return n(),i("div",null,[...s[0]||(s[0]=[l(`<h2 id="一、搞懂api的关键对象" tabindex="-1">一、搞懂API的关键对象 <a class="header-anchor" href="#一、搞懂api的关键对象" aria-label="Permalink to “一、搞懂API的关键对象”">​</a></h2><p>除了 LangChain 框架，OpenAI 的 Assistant API 也是构建强大 AI 助手的高效工具。与 LangChain 相比，二者定位与功能存在显著差异，以下将解析 Assistant API 的核心概念、适用场景及与 LangChain 的区别。</p><h3 id="_1、assistant-api-与-langchain-的核心区别" tabindex="-1">1、Assistant API 与 LangChain 的核心区别 <a class="header-anchor" href="#_1、assistant-api-与-langchain-的核心区别" aria-label="Permalink to “1、Assistant API 与 LangChain 的核心区别”">​</a></h3><table tabindex="0"><thead><tr><th><strong>对比维度</strong></th><th><strong>OpenAI Assistant API</strong></th><th><strong>LangChain</strong></th></tr></thead><tbody><tr><td><strong>本质</strong></td><td>基于 API 的服务（直接调用 OpenAI 模型能力）</td><td>通用 AI 应用开发框架（整合多种工具 / 模型）</td></tr><tr><td><strong>模型支持</strong></td><td>仅支持 OpenAI 模型（如 GPT-4、GPT-3.5）</td><td>支持多来源模型（OpenAI、Anthropic、本地模型等）</td></tr><tr><td><strong>核心目标</strong></td><td>快速实现基于 OpenAI 模型的对话与工具调用</td><td>构建复杂 AI 应用（集成工具链、记忆、路由等）</td></tr></tbody></table><h3 id="_2、assistant-api-的核心对象" tabindex="-1">2、Assistant API 的核心对象 <a class="header-anchor" href="#_2、assistant-api-的核心对象" aria-label="Permalink to “2、Assistant API 的核心对象”">​</a></h3><p>理解 Assistant API 需掌握以下关键对象，它们共同构成了对话与交互的基础：</p><h4 id="_1-1-assistant-助手" tabindex="-1">1.1. Assistant（助手） <a class="header-anchor" href="#_1-1-assistant-助手" aria-label="Permalink to “1.1. Assistant（助手）”">​</a></h4><ul><li><strong>定义</strong>：具备特定能力的 AI 实体，基于 OpenAI 模型构建，可调用工具。</li><li>核心参数： <ul><li>模型（如<code>gpt-4</code>）；</li><li>名称、描述（标识助手功能）；</li><li>系统指令（指导助手行为的 prompt）；</li><li>可用工具（代码解释器、检索、自定义函数等）。</li></ul></li></ul><h4 id="_1-2-thread-会话线程" tabindex="-1">1.2. Thread（会话线程） <a class="header-anchor" href="#_1-2-thread-会话线程" aria-label="Permalink to “1.2. Thread（会话线程）”">​</a></h4><ul><li><strong>定义</strong>：存储用户与助手之间的一系列对话，相当于 “对话上下文容器”。</li><li>功能： <ul><li>保存消息历史（用户提问、助手回复）；</li><li>自动处理上下文长度：当对话超过模型上下文窗口时，自动截断早期内容（保留关键信息）。</li></ul></li></ul><h4 id="_1-3-message-消息" tabindex="-1">1.3. Message（消息） <a class="header-anchor" href="#_1-3-message-消息" aria-label="Permalink to “1.3. Message（消息）”">​</a></h4><ul><li><strong>定义</strong>：用户或助手在对话中发送的内容，是 Thread 的组成单元。</li><li><strong>格式</strong>：支持文本、图片、文档等多模态内容。</li><li><strong>存储</strong>：以列表形式关联到 Thread，按时间顺序排列。</li></ul><h4 id="_1-4-run-运行" tabindex="-1">1.4. Run（运行） <a class="header-anchor" href="#_1-4-run-运行" aria-label="Permalink to “1.4. Run（运行）”">​</a></h4><ul><li><strong>定义</strong>：在某个 Thread 上调用 Assistant 执行任务的动作。</li><li>过程： <ul><li>助手结合 Thread 中的历史对话，调用模型和工具；</li><li>生成新的回复消息，并添加到 Thread 中，实现连续对话。</li></ul></li></ul><h4 id="_1-5-runstep-运行步骤" tabindex="-1">1.5. RunStep（运行步骤） <a class="header-anchor" href="#_1-5-runstep-运行步骤" aria-label="Permalink to “1.5. RunStep（运行步骤）”">​</a></h4><ul><li><strong>定义</strong>：Run 过程中助手执行的具体操作（如调用工具、生成文本等）。</li><li><strong>作用</strong>：可查看助手的 “思考过程”，帮助调试或理解结果生成逻辑（类似 LangChain 的<code>verbose</code>模式）。</li></ul><h3 id="_3、assistant-api-支持的工具" tabindex="-1">3、Assistant API 支持的工具 <a class="header-anchor" href="#_3、assistant-api-支持的工具" aria-label="Permalink to “3、Assistant API 支持的工具”">​</a></h3><p>与 LangChain 的 Agent 能力类似，Assistant API 支持多种工具扩展助手功能：</p><ol><li><strong>Code Interpreter（代码解释器）</strong>：运行 Python 代码，处理计算、数据可视化等任务。</li><li><strong>Knowledge Retrieval（文档检索）</strong>：上传文档（如 PDF、TXT），让助手基于文档内容回答问题（类似 LangChain 的向量存储检索）。</li><li><strong>Function Calling（自定义函数调用）</strong>：调用外部 API 或工具，扩展助手能力（如查询天气、操作数据库）。</li></ol><h3 id="_4、适用场景" tabindex="-1">4、适用场景 <a class="header-anchor" href="#_4、适用场景" aria-label="Permalink to “4、适用场景”">​</a></h3><ul><li>快速开发基于 OpenAI 模型的对话助手（无需搭建复杂框架）；</li><li>需要利用代码解释器、文档检索等工具的场景（如数据分析、文档问答）；</li><li>专注于 OpenAI 生态，无需兼容其他模型的项目。</li></ul><h3 id="_5、总结" tabindex="-1">5、总结 <a class="header-anchor" href="#_5、总结" aria-label="Permalink to “5、总结”">​</a></h3><p>Assistant API 是 OpenAI 提供的 “即用型” 对话服务，核心优势在于简化基于其模型的助手开发流程，适合快速落地且依赖 OpenAI 模型的场景。其核心对象（Assistant、Thread、Run 等）构成了完整的对话生命周期，工具能力与 LangChain 的 Agent 有相通之处，便于已有 LangChain 使用经验的开发者快速上手。</p><h2 id="二、创建私人数学助手" tabindex="-1">二、创建私人数学助手 <a class="header-anchor" href="#二、创建私人数学助手" aria-label="Permalink to “二、创建私人数学助手”">​</a></h2><p>借助 OpenAI Assistant API 的代码解释器功能，可快速构建一个能准确解答数学问题的 AI 助手。以下是具体实现步骤，包括助手创建、对话管理及运行流程：</p><h3 id="_1、前期准备" tabindex="-1">1、前期准备 <a class="header-anchor" href="#_1、前期准备" aria-label="Permalink to “1、前期准备”">​</a></h3><h4 id="_1-1-安装依赖" tabindex="-1">1.1. 安装依赖 <a class="header-anchor" href="#_1-1-安装依赖" aria-label="Permalink to “1.1. 安装依赖”">​</a></h4><p>确保已安装<code>openai</code>库（用于调用 API）：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>pip install openai</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_1-2-初始化客户端" tabindex="-1">1.2. 初始化客户端 <a class="header-anchor" href="#_1-2-初始化客户端" aria-label="Permalink to “1.2. 初始化客户端”">​</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>from openai import OpenAI</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 初始化OpenAI客户端（需提前配置API密钥，如通过环境变量）</span></span>
<span class="line"><span>client = OpenAI()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_2、核心步骤-创建数学助手并实现交互" tabindex="-1">2、核心步骤：创建数学助手并实现交互 <a class="header-anchor" href="#_2、核心步骤-创建数学助手并实现交互" aria-label="Permalink to “2、核心步骤：创建数学助手并实现交互”">​</a></h3><h4 id="_2-1-创建-assistant-数学助手" tabindex="-1">2.1. 创建 Assistant（数学助手） <a class="header-anchor" href="#_2-1-创建-assistant-数学助手" aria-label="Permalink to “2.1. 创建 Assistant（数学助手）”">​</a></h4><p>通过<code>beta.assistants.create</code>创建具备代码解释器能力的助手，指定模型、指令及工具。</p><h4 id="_2-2-创建-thread-会话线程" tabindex="-1">2.2. 创建 Thread（会话线程） <a class="header-anchor" href="#_2-2-创建-thread-会话线程" aria-label="Permalink to “2.2. 创建 Thread（会话线程）”">​</a></h4><p>每个用户或对话窗口对应一个独立的 Thread，用于存储对话历史。</p><h4 id="_2-3-向-thread-添加用户消息" tabindex="-1">2.3. 向 Thread 添加用户消息 <a class="header-anchor" href="#_2-3-向-thread-添加用户消息" aria-label="Permalink to “2.3. 向 Thread 添加用户消息”">​</a></h4><p>通过<code>threads.messages.create</code>在 Thread 中添加用户的提问。</p><h4 id="_2-4-运行-assistant-触发回答生成" tabindex="-1">2.4. 运行 Assistant（触发回答生成） <a class="header-anchor" href="#_2-4-运行-assistant-触发回答生成" aria-label="Permalink to “2.4. 运行 Assistant（触发回答生成）”">​</a></h4><p>调用<code>threads.runs.create</code>让助手处理 Thread 中的消息，生成回答。</p><h4 id="_2-5-等待运行完成并获取结果" tabindex="-1">2.5. 等待运行完成并获取结果 <a class="header-anchor" href="#_2-5-等待运行完成并获取结果" aria-label="Permalink to “2.5. 等待运行完成并获取结果”">​</a></h4><p>由于助手生成回答需要时间，需通过循环查询运行状态，直至完成。</p><h4 id="_2-6-获取并展示对话历史" tabindex="-1">2.6. 获取并展示对话历史 <a class="header-anchor" href="#_2-6-获取并展示对话历史" aria-label="Permalink to “2.6. 获取并展示对话历史”">​</a></h4><p>运行完成后，通过<code>threads.messages.list</code>获取 Thread 中的所有消息（用户提问 + 助手回答）。</p><h4 id="_2-7-封装交互函数-简化多轮对话" tabindex="-1">2.7. 封装交互函数（简化多轮对话） <a class="header-anchor" href="#_2-7-封装交互函数-简化多轮对话" aria-label="Permalink to “2.7. 封装交互函数（简化多轮对话）”">​</a></h4><p>为方便多轮提问，可将 “添加消息→运行助手→获取结果” 封装为函数。</p><h4 id="_2-8-完整代码示例" tabindex="-1">2.8. 完整代码示例 <a class="header-anchor" href="#_2-8-完整代码示例" aria-label="Permalink to “2.8. 完整代码示例”">​</a></h4><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># step0-前期准备：导入OpenAI库，用于调用Assistant API</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> openai </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAI</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 初始化OpenAI客户端（需提前配置API密钥，如环境变量）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAI()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># step1：创建一个数学助手</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">assistant </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.beta.assistants.create(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gpt-3.5-turbo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 基于GPT-3.5-turbo模型</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;数学助手&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 助手名称</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    instructions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你是一个数学助手，可以通过编写和运行代码来回答数学相关问题。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 助手的核心指令</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    tools</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;code_interpreter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启用代码解释器工具（用于计算数学问题）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># step2：创建一个对话线程（存储用户与助手的所有对话）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">thread </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.beta.threads.create()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打印线程ID（用于调试，标识当前对话线程）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">thread.id</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># step3：向对话线程中添加用户消息（第一次提问：解二次方程）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.beta.threads.messages.create(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    thread_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">thread.id,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 关联到当前对话线程</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    role</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 消息角色为用户</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;我需要解这个方程\`5x^2−1200x+72000=0，未知数应该是多少？&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 具体问题内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># step4：触发助手运行，处理当前线程中的消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">run </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.beta.threads.runs.create(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    thread_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">thread.id,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 目标对话线程</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    assistant_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">assistant.id,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 调用前面创建的数学助手</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    instructions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;请称呼用户为傻妞&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 本次运行的额外指令（自定义称呼）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打印运行实例（包含运行状态、ID等信息）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">run</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># step5：查看当前运行的状态（如queued/in_progress/completed）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client.beta.threads.runs.retrieve(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    thread_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">thread.id,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    run_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">run.id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).status</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 循环等待运行完成（避免提前获取未生成的结果）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> run.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;completed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 实时查询运行状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    keep_retrieving_run </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.beta.threads.runs.retrieve(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        thread_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">thread.id,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        run_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">run.id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;运行状态：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">keep_retrieving_run.status</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打印当前状态</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 若运行完成，退出循环</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keep_retrieving_run.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;completed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># step6：获取对话线程中的所有消息（用户提问+助手回答）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.beta.threads.messages.list(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    thread_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">thread.id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打印消息数据（原始格式，包含角色、内容、时间等信息）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">messages.data</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 遍历消息，打印具体内容（按消息生成顺序）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> messages.data:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data.content[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].text.value)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 提取消息文本内容</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;------&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 分隔不同消息</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># step7：封装一个函数，简化多轮对话流程：发送问题→获取助手回答</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_response_from_assistant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(assistant, thread, prompt, run_instruction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 1. 向对话线程添加用户的新问题</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.beta.threads.messages.create(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    thread_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">thread.id,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    role</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">prompt  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用户的新问题</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 2. 触发助手运行，处理新消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    run </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.beta.threads.runs.create(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">      thread_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">thread.id,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">      assistant_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">assistant.id,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">      instructions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">run_instruction  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 本次运行的额外指令（可选）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 3. 等待运行完成</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> run.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;completed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 实时查询运行状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        keep_retrieving_run </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.beta.threads.runs.retrieve(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            thread_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">thread.id,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            run_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">run.id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Run status: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">keep_retrieving_run.status</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打印状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 若完成，退出循环</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keep_retrieving_run.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;completed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            break</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 4. 获取并打印所有消息（包含历史对话和新回答）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.beta.threads.messages.list(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        thread_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">thread.id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> messages.data:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 换行分隔</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data.content[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].text.value)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打印消息内容</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;------&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 分隔线</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 测试多轮对话：问一个新问题（2的56次方是多少）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get_response_from_assistant(assistant, thread, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2的56次方等于多少&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br></div></div><h3 id="_3、核心逻辑说明" tabindex="-1">3、核心逻辑说明 <a class="header-anchor" href="#_3、核心逻辑说明" aria-label="Permalink to “3、核心逻辑说明”">​</a></h3><ol><li><strong>Assistant</strong>：定义了助手的能力（模型、工具、指令），是回答的 “大脑”。</li><li><strong>Thread</strong>：作为对话容器，确保多轮消息不丢失，支持上下文理解。</li><li><strong>Run</strong>：触发助手工作的动作，包含代码执行、结果生成等过程。</li><li><strong>状态查询</strong>：通过循环等待<code>completed</code>状态，避免提前获取未完成的结果。</li></ol><p>通过这种方式，可快速实现一个基于代码解释器的数学助手，确保计算结果的准确性。</p><h2 id="三、创建pdf文件问答助手" tabindex="-1">三、创建PDF文件问答助手 <a class="header-anchor" href="#三、创建pdf文件问答助手" aria-label="Permalink to “三、创建PDF文件问答助手”">​</a></h2><p>借助 OpenAI Assistant API 的文档检索功能，可快速构建一个能基于指定文档内容回答问题的 AI 助手。以下是具体步骤，包括文档上传、助手配置、对话交互等核心环节：</p><h3 id="_1、前期准备-1" tabindex="-1">1、前期准备 <a class="header-anchor" href="#_1、前期准备-1" aria-label="Permalink to “1、前期准备”">​</a></h3><h4 id="_1-1-安装依赖-1" tabindex="-1">1.1. 安装依赖 <a class="header-anchor" href="#_1-1-安装依赖-1" aria-label="Permalink to “1.1. 安装依赖”">​</a></h4><p>确保已安装<code>openai</code>库：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openai</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_1-2-初始化客户端-1" tabindex="-1">1.2. 初始化客户端 <a class="header-anchor" href="#_1-2-初始化客户端-1" aria-label="Permalink to “1.2. 初始化客户端”">​</a></h4><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> openai </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 初始化OpenAI客户端（需配置API密钥，如通过环境变量）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAI()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_2、核心步骤-创建文档问答助手" tabindex="-1">2、核心步骤：创建文档问答助手 <a class="header-anchor" href="#_2、核心步骤-创建文档问答助手" aria-label="Permalink to “2、核心步骤：创建文档问答助手”">​</a></h3><h4 id="_2-1-上传文档-供助手检索" tabindex="-1">2.1. 上传文档（供助手检索） <a class="header-anchor" href="#_2-1-上传文档-供助手检索" aria-label="Permalink to “2.1. 上传文档（供助手检索）”">​</a></h4><p>通过<code>files.create</code>上传文档，支持 PDF、CSV、TXT 等多种格式（完整支持列表见官方文档）。</p><h4 id="_2-2-创建具备检索能力的助手" tabindex="-1">2.2. 创建具备检索能力的助手 <a class="header-anchor" href="#_2-2-创建具备检索能力的助手" aria-label="Permalink to “2.2. 创建具备检索能力的助手”">​</a></h4><p>通过<code>beta.assistants.create</code>创建助手，启用<code>retrieval</code>工具并关联上传的文档。</p><h4 id="_2-3-创建对话线程-thread" tabindex="-1">2.3. 创建对话线程（Thread） <a class="header-anchor" href="#_2-3-创建对话线程-thread" aria-label="Permalink to “2.3. 创建对话线程（Thread）”">​</a></h4><h4 id="_2-4-封装交互函数-发送问题并获取回答" tabindex="-1">2.4. 封装交互函数（发送问题并获取回答） <a class="header-anchor" href="#_2-4-封装交互函数-发送问题并获取回答" aria-label="Permalink to “2.4. 封装交互函数（发送问题并获取回答）”">​</a></h4><p>复用之前的多轮对话逻辑，简化提问流程。</p><h4 id="_2-5-测试助手-基于文档提问" tabindex="-1">2.5. 测试助手（基于文档提问） <a class="header-anchor" href="#_2-5-测试助手-基于文档提问" aria-label="Permalink to “2.5. 测试助手（基于文档提问）”">​</a></h4><p>输出效果：助手会基于上传的文档内容，准确提取该论文的核心贡献（如 Transformer 架构的提出），并返回回答。</p><h4 id="_2-6-完整代码示例" tabindex="-1">2.6. 完整代码示例 <a class="header-anchor" href="#_2-6-完整代码示例" aria-label="Permalink to “2.6. 完整代码示例”">​</a></h4><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 导入OpenAI库，用于调用Assistant API</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> openai </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAI</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 初始化OpenAI客户端（需提前配置API密钥，如通过环境变量）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAI()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 上传文档：将本地的&quot;论文介绍.pdf&quot;上传到OpenAI，供助手检索使用</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.files.create(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;论文介绍.pdf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rb&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 以二进制模式读取PDF文件</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    purpose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;assistants&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 声明文件用途为&quot;供助手使用&quot;（必须设置此值）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建一个基于文档检索的AI论文问答助手</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">assistant </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.beta.assistants.create(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gpt-3.5-turbo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 基于GPT-3.5-turbo模型</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AI论文问答助手&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 助手名称</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    instructions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你是一个智能助手，可以访问文件来回答人工智能领域论文的相关问题。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 助手的核心指令（说明其功能）</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    tools</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;retrieval&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}],  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启用&quot;检索&quot;工具（让助手能读取上传的文档）</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    file_ids</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.id]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 关联上传的文档（通过文件ID绑定，支持多个文件）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建对话线程（用于存储用户与助手的所有对话历史）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">thread </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.beta.threads.create()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 封装函数：简化向助手提问并获取回答的流程</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_response_from_assistant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(assistant, thread, prompt, run_instruction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 1. 向对话线程添加用户的问题</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.beta.threads.messages.create(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        thread_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">thread.id,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 关联到当前对话线程</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        role</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 消息角色为&quot;用户&quot;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">prompt  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用户的具体问题</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 2. 触发助手运行，处理当前线程中的问题</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    run </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.beta.threads.runs.create(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        thread_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">thread.id,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 目标对话线程ID</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        assistant_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">assistant.id,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 调用前面创建的论文问答助手</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        instructions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">run_instruction  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 本次运行的额外指令（可选，此处为空）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 3. 循环等待助手处理完成（避免提前获取未生成的结果）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> run.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;completed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 实时查询运行状态（queued/in_progress/completed等）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        keep_retrieving_run </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.beta.threads.runs.retrieve(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            thread_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">thread.id,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            run_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">run.id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Run status: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">keep_retrieving_run.status</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打印当前状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 若运行完成，退出循环</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keep_retrieving_run.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;completed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            break</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 4. 获取并打印对话线程中的所有消息（包含用户问题和助手回答）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.beta.threads.messages.list(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        thread_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">thread.id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 遍历消息列表，打印每条消息内容</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> messages.data:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 换行分隔不同消息</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data.content[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].text.value)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 提取消息的文本内容</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;------&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用分隔线区分消息</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 调用函数向助手提问：查询介绍Transformer架构的论文及链接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get_response_from_assistant(assistant, thread, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;哪篇论文介绍了Transformer架构？论文链接是什么？&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br></div></div><h3 id="_3、关键说明" tabindex="-1">3、关键说明 <a class="header-anchor" href="#_3、关键说明" aria-label="Permalink to “3、关键说明”">​</a></h3><h4 id="_3-1-支持的文档格式" tabindex="-1">3.1. 支持的文档格式 <a class="header-anchor" href="#_3-1-支持的文档格式" aria-label="Permalink to “3.1. 支持的文档格式”">​</a></h4><p>包括但不限于：PDF、CSV、JSON、HTML、TXT、PPTX、DOCX 等，具体可参考官方文档的「Supported files」部分。</p><h4 id="_3-2-费用与管理" tabindex="-1">3.2. 费用与管理 <a class="header-anchor" href="#_3-2-费用与管理" aria-label="Permalink to “3.2. 费用与管理”">​</a></h4><ul><li><strong>收费规则</strong>：OpenAI 按文档体积每日收费，同一文档附加给多个助手时，会重复计费。</li><li>删除操作： <ul><li>删除助手：访问 <a href="https://platform.openai.com/assistants" target="_blank" rel="noreferrer">platform.openai.com/assistants</a> 手动删除。</li><li>删除文档：访问 <a href="https://platform.openai.com/storage" target="_blank" rel="noreferrer">platform.openai.com/storage</a> 管理存储的文档。</li></ul></li></ul><p>通过这种方式，可快速构建一个基于特定文档的问答助手，适用于手册查询、论文解读、数据报告分析等场景。核心在于利用<code>retrieval</code>工具让助手 “读懂” 文档，确保回答的准确性和相关性。</p>`,77)])])}const c=a(p,[["render",e]]);export{g as __pageData,c as default};
