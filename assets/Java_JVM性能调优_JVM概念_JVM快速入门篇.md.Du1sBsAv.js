import{_ as i,c as l,o as e,ah as r,aU as t,aV as s,aW as h,aX as o,aY as n,aZ as d,a_ as c,a$ as m,b0 as p,b1 as b,b2 as _,b3 as g,b4 as k,b5 as u,b6 as f,b7 as v,b8 as M,b9 as x,ba as J,bb as P,bc as j}from"./chunks/framework.D5cOWG0Y.js";const T=JSON.parse('{"title":"JVM快速入门篇","description":"","frontmatter":{"title":"JVM快速入门篇","tags":["JVM"],"categories":["JVM"],"publish":true,"sticky":2},"headers":[],"relativePath":"Java/JVM性能调优/JVM概念/JVM快速入门篇.md","filePath":"Java/JVM性能调优/JVM概念/JVM快速入门篇.md","lastUpdated":1755802517000}'),y={name:"Java/JVM性能调优/JVM概念/JVM快速入门篇.md"};function C(V,a,w,z,q,S){return e(),l("div",null,[...a[0]||(a[0]=[r('<h1 id="jvm快速入门篇-狂神" tabindex="-1">JVM快速入门篇（狂神） <a class="header-anchor" href="#jvm快速入门篇-狂神" aria-label="Permalink to “JVM快速入门篇（狂神）”">​</a></h1><blockquote><p>转载于：<a href="https://www.kuangstudy.com/bbs/1557549426359590914" target="_blank" rel="noreferrer">https://www.kuangstudy.com/bbs/1557549426359590914</a></p></blockquote><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to “前言”">​</a></h2><ol><li>请你谈谈你对jvm的理解？</li><li>Java8虚拟机和之前的变化更新？</li><li>什么是OOM？什么是栈溢出StackOverFlowError？怎么分析？</li><li>jvm的常见调优参数有哪些？</li><li>内存快照如何抓取？怎么分析Dump文件？</li><li>谈谈jvm中，类加载器你的认识？</li></ol><h1 id="一、jvm" tabindex="-1">一、JVM <a class="header-anchor" href="#一、jvm" aria-label="Permalink to “一、JVM”">​</a></h1><h2 id="_1-jvm位置" tabindex="-1">1. JVM位置 <a class="header-anchor" href="#_1-jvm位置" aria-label="Permalink to “1. JVM位置”">​</a></h2><p><img src="'+t+'" alt="img" loading="lazy"></p><h2 id="_2-jvm体系结构" tabindex="-1">2. JVM体系结构 <a class="header-anchor" href="#_2-jvm体系结构" aria-label="Permalink to “2. JVM体系结构”">​</a></h2><h3 id="_1-jvm结构图" tabindex="-1">1. jvm结构图 <a class="header-anchor" href="#_1-jvm结构图" aria-label="Permalink to “1. jvm结构图”">​</a></h3><p><img src="'+s+'" alt="img" loading="lazy"></p><h3 id="_2-jvm垃圾回收" tabindex="-1">2. jvm垃圾回收 <a class="header-anchor" href="#_2-jvm垃圾回收" aria-label="Permalink to “2. jvm垃圾回收”">​</a></h3><p>垃圾回收，指的的堆内存的垃圾回收 <img src="'+h+'" alt="img" loading="lazy"></p><h3 id="_3-jvm调优" tabindex="-1">3. jvm调优 <a class="header-anchor" href="#_3-jvm调优" aria-label="Permalink to “3. jvm调优”">​</a></h3><p><img src="'+o+'" alt="img" loading="lazy"></p><h1 id="二、类加载器" tabindex="-1">二、类加载器 <a class="header-anchor" href="#二、类加载器" aria-label="Permalink to “二、类加载器”">​</a></h1><h2 id="_1-类加载的过程" tabindex="-1">1. 类加载的过程 <a class="header-anchor" href="#_1-类加载的过程" aria-label="Permalink to “1. 类加载的过程”">​</a></h2><p><img src="'+n+'" alt="img" loading="lazy"></p><h2 id="_1-哪些类加载器" tabindex="-1">1. 哪些类加载器 <a class="header-anchor" href="#_1-哪些类加载器" aria-label="Permalink to “1. 哪些类加载器”">​</a></h2><ol><li>引导类加载器（BootstrapClassloader）：用C++编写，是JVM自带的类加载器；负责加载Java的核心类库。（该加载器无法直接获取）</li><li>扩展类加载器（ExtClassloader）：负责加载/jre/lib/ext目录下的jar包。</li><li>应用程序类加载器（AppClassloader）：负责加载java -classpath或-D java.class.path所指的目录下的类与jar包。（最常用的加载器）</li></ol><h2 id="_2-双亲委派机制" tabindex="-1">2. 双亲委派机制 <a class="header-anchor" href="#_2-双亲委派机制" aria-label="Permalink to “2. 双亲委派机制”">​</a></h2><ol><li>类加载器接收到一个加载请求时，他会委派给他的父加载器，实际上是去他父加载器的缓存中去查找是否有该类，如果有就加载返回，如果没有则继续委派给父类加载，直到顶层类加载器。</li><li>如果顶层类加载器也没有加载该类，则会依次向下查找子加载器的加载路径，如果有就加载返回，如果都没有，则会抛出异常。</li></ol><h2 id="_3-沙箱安全机制" tabindex="-1">3. 沙箱安全机制 <a class="header-anchor" href="#_3-沙箱安全机制" aria-label="Permalink to “3. 沙箱安全机制”">​</a></h2><p>了解</p><h1 id="三、native、方法区" tabindex="-1">三、native、方法区 <a class="header-anchor" href="#三、native、方法区" aria-label="Permalink to “三、native、方法区”">​</a></h1><h2 id="_1-native" tabindex="-1">1. native <a class="header-anchor" href="#_1-native" aria-label="Permalink to “1. native”">​</a></h2><p>凡是使用了native关键字的，说明Java的作用范围已经达不到了，它会去调用底层的C语言的库。</p><ol><li>进入本地方法栈。</li><li>调用本地方法接口。JNI</li></ol><p>JNI的作用：扩展Java的使用，融合不同的语言为Java所用。（最初是为了融合C、C++语言）</p><p>因为Java诞生的时候，C和C++非常火，想要立足，就有必要调用C、C++的程序。</p><p>所以Java在JVM内存区域专门开辟了一块标记区域Native Method Area Stack，用来登记native方法。 在最终执行（执行引擎执行）的时候，通过JNI来加载本地方法库中的方法。</p><ol><li><p>编写一个多线程启动方法。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span> public class Test {     public static void main(String[] args) {         new Thread(()-&gt;{         },&quot;MyThread&quot;).start();     } }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>点进去查看start方法。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span> // Thread类中的start方法，底层是把线程加入到线程组，然后去调用本地方法start0 public class Thread implements Runnable {         public synchronized void start() {         if (threadStatus != 0)             throw new IllegalThreadStateException();         group.add(this);         boolean started = false;         try {             start0();             started = true;         } finally {             try {                 if (!started) {                     group.threadStartFailed(this);                 }             } catch (Throwable ignore) {                 /* do nothing. If start0 threw a Throwable then                   it will be passed up the call stack */             }         }     }     private native void start0(); }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><h2 id="_2-方法区" tabindex="-1">2. 方法区 <a class="header-anchor" href="#_2-方法区" aria-label="Permalink to “2. 方法区”">​</a></h2><p>Method Area方法区（此区域属于共享区间，所有定义的方法的信息都保存在该区域） 方法区是被所有线程共享，所有字段、方法字节码、以及一些特殊方法（如构造函数，接口代码）也在此定义。</p><p><strong>静态变量、常量、类信息（构造方法、接口定义）、运行时的常量池存在方法区中，但是实例变量存在堆内存中，和方法区无关。</strong></p><p><a href="https://www.kuangstudy.com/bbs/1356534259912916994#header17" target="_blank" rel="noreferrer">https://www.kuangstudy.com/bbs/1356534259912916994#header17</a></p><h2 id="_3-pc寄存器" tabindex="-1">3. PC寄存器 <a class="header-anchor" href="#_3-pc寄存器" aria-label="Permalink to “3. PC寄存器”">​</a></h2><p>程序计数器：Program Counter Register 每个线程都有一个程序计数器，是线程私有的，就是一个指针，指向方法区中的方法字节码（用来存储指向像一条指令的地址，也即将要执行的指令代码），在执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不计。</p><h1 id="四、栈-后进先出" tabindex="-1">四、栈（后进先出） <a class="header-anchor" href="#四、栈-后进先出" aria-label="Permalink to “四、栈（后进先出）”">​</a></h1><h2 id="_1-栈的作用" tabindex="-1">1. 栈的作用 <a class="header-anchor" href="#_1-栈的作用" aria-label="Permalink to “1. 栈的作用”">​</a></h2><p>栈内存，主管程序的运行，生命周期和线程同步； 线程结束，栈内存也就释放了，对于栈来说，<strong>不存在垃圾回收问题</strong>。</p><h2 id="_2-栈存储的东西" tabindex="-1">2. 栈存储的东西 <a class="header-anchor" href="#_2-栈存储的东西" aria-label="Permalink to “2. 栈存储的东西”">​</a></h2><p>8大基本类型、对象引用，实例的方法。</p><h2 id="_3-栈运行原理" tabindex="-1">3. 栈运行原理 <a class="header-anchor" href="#_3-栈运行原理" aria-label="Permalink to “3. 栈运行原理”">​</a></h2><h3 id="_3-1-简单结构图" tabindex="-1">3.1 简单结构图 <a class="header-anchor" href="#_3-1-简单结构图" aria-label="Permalink to “3.1 简单结构图”">​</a></h3><p><img src="'+d+'" alt="img" loading="lazy"></p><h3 id="_3-2-详细结构图" tabindex="-1">3.2 详细结构图 <a class="header-anchor" href="#_3-2-详细结构图" aria-label="Permalink to “3.2 详细结构图”">​</a></h3><p><img src="'+c+'" alt="img" loading="lazy"></p><h2 id="_4-栈-堆-方法区的交互关系" tabindex="-1">4. 栈+堆+方法区的交互关系 <a class="header-anchor" href="#_4-栈-堆-方法区的交互关系" aria-label="Permalink to “4. 栈+堆+方法区的交互关系”">​</a></h2><p><img src="'+m+'" alt="img" loading="lazy"></p><h1 id="五、堆" tabindex="-1">五、堆 <a class="header-anchor" href="#五、堆" aria-label="Permalink to “五、堆”">​</a></h1><h2 id="_1-三种jvm" tabindex="-1">1. 三种JVM <a class="header-anchor" href="#_1-三种jvm" aria-label="Permalink to “1. 三种JVM”">​</a></h2><ol><li>Sun公司的HotSpot。（java -version查看）</li><li>BEA的JRockit</li><li>IBM的J9VM</li></ol><h2 id="_2-堆" tabindex="-1">2. 堆 <a class="header-anchor" href="#_2-堆" aria-label="Permalink to “2. 堆”">​</a></h2><p>Heap，一个JVM只有一个堆内存，堆内存的大小是可以调节的。</p><p>类加载器读取了类文件后，一般会把什么东西放到堆中？ 类、方法、常量、变量、保存我们所有引用类型的真实对象。</p><p>堆内存中细分为三个区域：</p><ul><li>新生区（伊甸园区）Young/New</li><li>养老区 old</li><li>永久区 Perm</li></ul><p><img src="'+p+'" alt="img" loading="lazy"></p><h3 id="_2-1-新生区" tabindex="-1">2.1 新生区 <a class="header-anchor" href="#_2-1-新生区" aria-label="Permalink to “2.1 新生区”">​</a></h3><p>新生区又叫做伊甸园区，包括：伊甸园区、幸存0区、幸存1区。</p><h3 id="_2-2-永久区" tabindex="-1">2.2 永久区 <a class="header-anchor" href="#_2-2-永久区" aria-label="Permalink to “2.2 永久区”">​</a></h3><p>这个区域是<strong>常驻内存</strong>的。 用来存放JDK自身携带的Class对象、Interface元数据，存储的是Java运行时的一些环境或类信息~。 这个区域<strong>不存在垃圾回收</strong>。 关闭JVM虚拟机就会释放这个区域的内存。</p><p>什么情况下，在永久区就崩了？</p><ul><li>一个启动类，加载了大量的第三方jar包。</li><li>Tomcat部署了太多的应用。</li><li>大量动态生成的反射类；不断的被加载，直到内存满，就会出现OOM</li></ul><h3 id="_2-3-永久代和元空间" tabindex="-1">2.3 永久代和元空间 <a class="header-anchor" href="#_2-3-永久代和元空间" aria-label="Permalink to “2.3 永久代和元空间”">​</a></h3><p>什么是永久代和元空间？？ 方法区是一种规范，不同的虚拟机厂商可以基于规范做出不同的实现，永久代和元空间就是出于不同jdk版本的实现。 方法区就像是一个接口，永久代与元空间分别是两个不同的实现类。 只不过永久代是这个接口最初的实现类，后来这个接口一直进行变更，直到最后彻底废弃这个实现类，由新实现类—元空间进行替代。</p><p>jdk1.8之前： <img src="'+b+'" alt="img" loading="lazy"></p><p>jdk1.8以及之后：在堆内存中，逻辑上存在，物理上不存在（元空间使用的是本地内存） <img src="'+_+'" alt="img" loading="lazy"></p><h3 id="_2-4-常量池" tabindex="-1">2.4 常量池 <a class="header-anchor" href="#_2-4-常量池" aria-label="Permalink to “2.4 常量池”">​</a></h3><ol><li>在jdk1.7之前，运行时常量池+字符串常量池是存放在方法区中，HotSpot VM对方法区的实现称为永久代。 <img src="'+g+'" alt="img" loading="lazy"></li><li>在jdk1.7中，字符串常量池从方法区移到堆中，运行时常量池保留在方法区中。 <img src="'+k+'" alt="img" loading="lazy"></li><li>jdk1.8之后，HotSpot移除永久代，使用元空间代替；此时字符串常量池保留在堆中，运行时常量池保留在方法区中，只是实现不一样了，JVM内存变成了直接内存。 <img src="'+u+'" alt="img" loading="lazy"></li></ol><h1 id="六、使用jprofiler工具分析oom原因" tabindex="-1">六、使用JProfiler工具分析OOM原因 <a class="header-anchor" href="#六、使用jprofiler工具分析oom原因" aria-label="Permalink to “六、使用JProfiler工具分析OOM原因”">​</a></h1><p><a href="https://www.bilibili.com/video/BV1iJ411d7jS?p=9&amp;vd_source=345a382f2c86d3441cc342a80fc25545" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1iJ411d7jS?p=9&amp;vd_source=345a382f2c86d3441cc342a80fc25545</a></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>public class Test {    public static void main(String[] args) {        // 获取虚拟机试图使用的最大内存        long max = Runtime.getRuntime().maxMemory();        // 获取jvm初始化总内存        long total = Runtime.getRuntime().totalMemory();        System.out.println(&quot;max=&quot;+max+&quot;字节\\t&quot;+(max/(double)1021/1024)+&quot;MB\\t&quot;+(max/(double)1021/1024/1024)+&quot;GB&quot;);        System.out.println(&quot;total=&quot;+total+&quot;字节\\t&quot;+(total/(double)1024/1024)+&quot;MB\\t&quot;+(total/(double)1021/1024/1024)+&quot;GB&quot;);        // 默认情况下：分配的最大内存是电脑内存的1/4；初始化的内存是电脑内存的1/64        // 分析OOM：        //          1.尝试扩大堆内存，看结果        //          2.分析内存，看一下哪个地方出现了问题（专业工具）JProfiler        // -Xms1024m -Xmx1024m -XX:+PrintGCDetails        // 305664K+699392K = 1005056K   981.5M    }}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h1 id="七、gc垃圾回收" tabindex="-1">七、GC垃圾回收 <a class="header-anchor" href="#七、gc垃圾回收" aria-label="Permalink to “七、GC垃圾回收”">​</a></h1><h2 id="_1-垃圾回收的区域" tabindex="-1">1. 垃圾回收的区域 <a class="header-anchor" href="#_1-垃圾回收的区域" aria-label="Permalink to “1. 垃圾回收的区域”">​</a></h2><p><img src="'+f+'" alt="img" loading="lazy"></p><h2 id="_2-gc之引用计数法" tabindex="-1">2. GC之引用计数法 <a class="header-anchor" href="#_2-gc之引用计数法" aria-label="Permalink to “2. GC之引用计数法”">​</a></h2><p><img src="'+v+'" alt="img" loading="lazy"></p><h2 id="_3-gc之复制算法" tabindex="-1">3. GC之复制算法 <a class="header-anchor" href="#_3-gc之复制算法" aria-label="Permalink to “3. GC之复制算法”">​</a></h2><p><img src="'+M+'" alt="img" loading="lazy"><img src="'+x+'" alt="img" loading="lazy"></p><ul><li>好处：没有内存的碎片。</li><li>坏处：浪费了内存空间（多了一半空间to永远是空）。假设对象100%存活（极端情况），不适合使用复制算法。</li></ul><h3 id="_3-1-使用场景" tabindex="-1">3.1 使用场景 <a class="header-anchor" href="#_3-1-使用场景" aria-label="Permalink to “3.1 使用场景”">​</a></h3><p>复制算法最佳使用场景：对象存活度较低的时候（新生区）</p><h2 id="_4-gc之标记清除压缩算法" tabindex="-1">4. GC之标记清除压缩算法 <a class="header-anchor" href="#_4-gc之标记清除压缩算法" aria-label="Permalink to “4. GC之标记清除压缩算法”">​</a></h2><h3 id="_4-1-标记清除" tabindex="-1">4.1 标记清除 <a class="header-anchor" href="#_4-1-标记清除" aria-label="Permalink to “4.1 标记清除”">​</a></h3><p><img src="'+J+'" alt="img" loading="lazy"></p><ul><li>优点：不需要额外的空间。</li><li>缺点：两次扫描，严重浪费时间，会产生内存碎片。</li></ul><h3 id="_4-2-标记清除压缩" tabindex="-1">4.2 标记清除压缩 <a class="header-anchor" href="#_4-2-标记清除压缩" aria-label="Permalink to “4.2 标记清除压缩”">​</a></h3><p><img src="'+P+'" alt="img" loading="lazy"></p><h3 id="_4-2-标记清除压缩-改进" tabindex="-1">4.2 标记清除压缩（改进） <a class="header-anchor" href="#_4-2-标记清除压缩-改进" aria-label="Permalink to “4.2 标记清除压缩（改进）”">​</a></h3><p>可以进行多次标记清除，再进行一次压缩。</p><h2 id="_5-gc算法总结" tabindex="-1">5. GC算法总结 <a class="header-anchor" href="#_5-gc算法总结" aria-label="Permalink to “5. GC算法总结”">​</a></h2><p>内存效率：复制算法&gt;标记清除算法&gt;标记压缩算法（时间复杂度） 内存整齐度：复制算法=标记压缩算法&gt;标记清除算法 内存利用率：标记压缩算法=标记清除算法&gt;复制算法</p><p>思考一个问题：难道没有最优算法吗？ 答案：没有，没有最好的算法，只有最合适的算法——》GC：分代收集算法</p><p>年轻代：</p><ul><li>存活率低</li><li>复制算法</li></ul><p>老年代：</p><ul><li>区域大：存活率高</li><li>标记清除（内存碎片不是太多）+标记压缩混合实现</li></ul><h1 id="八、jmm内存模型" tabindex="-1">八、JMM内存模型 <a class="header-anchor" href="#八、jmm内存模型" aria-label="Permalink to “八、JMM内存模型”">​</a></h1><h2 id="_1-jmm是什么" tabindex="-1">1. JMM是什么 <a class="header-anchor" href="#_1-jmm是什么" aria-label="Permalink to “1. JMM是什么”">​</a></h2><p>JMM（Java Memory Model），Java的内存模型。</p><h2 id="_2-jmm的作用" tabindex="-1">2. JMM的作用 <a class="header-anchor" href="#_2-jmm的作用" aria-label="Permalink to “2. JMM的作用”">​</a></h2><p>缓存一致性的协议，用来定义数据读写的规则。</p><p>JMM定义了线程工作内存和主内存的抽象关系：线程的共享变量存储在主内存中，每个线程都有一个私有的本地工作内存。</p><p>使用volatile关键字来解决共享变量的可见性的问题。</p><p>Java内存模型是围绕着并发编程中<strong>原子性、可见性、有序性</strong>这三个特征来建立的。</p><h2 id="_3-jmm的操作" tabindex="-1">3. JMM的操作 <a class="header-anchor" href="#_3-jmm的操作" aria-label="Permalink to “3. JMM的操作”">​</a></h2><p><img src="'+j+'" alt="img" loading="lazy"></p><h3 id="jmm定义了8种操作来完成-每一种操作都是原子的、不可再拆分的-。" tabindex="-1">JMM定义了8种操作来完成（每一种操作都是原子的、不可再拆分的）。 <a class="header-anchor" href="#jmm定义了8种操作来完成-每一种操作都是原子的、不可再拆分的-。" aria-label="Permalink to “JMM定义了8种操作来完成（每一种操作都是原子的、不可再拆分的）。”">​</a></h3><ul><li>lock（锁定）：作用于主内存的变量，它把一个变量标识为一条线程独占的状态。</li><li>unlock（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</li><li>read（读取）：作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用。</li><li>load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。</li><li>use（使用）：作用于工作内存的变量，它把工作内存中一个变量的值传递给执行引擎（每当虚拟机遇到一个需要使用到该变量的值的字节码指令时将会执行这个操作）。</li><li>assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋给工作内存的变量（每当虚拟机遇到一个给该变量赋值的字节码指令时执行这个操作）。</li><li>store（存储）：作用于工作内存的变量，它把工作内存中一个变量的值传送到主内存中，以便随后的write操作使用。</li><li>write（写入）：作用于主内存的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中。</li></ul><h2 id="_4-jmm定义的规则" tabindex="-1">4. JMM定义的规则 <a class="header-anchor" href="#_4-jmm定义的规则" aria-label="Permalink to “4. JMM定义的规则”">​</a></h2><h3 id="_8种操作必须满足的规则" tabindex="-1">8种操作必须满足的规则： <a class="header-anchor" href="#_8种操作必须满足的规则" aria-label="Permalink to “8种操作必须满足的规则：”">​</a></h3><ul><li>不允许read和load、store和write操作之一单独出现。（不允许一个变量从主内存读取了但工作内存不接受；或者从工作内存发起回写了但主内存不接受的情况出现）</li><li>不允许一个线程丢弃它的最近的assign操作。（变量在工作内存中改变了值之后，必须把该变化同步回主内存）</li><li>不允许一个线程无原因地（没有发生过任何assign操作）把数据从线程的工作内存同步回主内存。</li><li>一个新的变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量。（就是对一个变量实施use、store操作之前，必须先执行过了load和assign操作）</li><li>一个变量在同一时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。</li><li>如果对一个变量执行lock操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load或assign操作初始化变量的值。</li><li>如果一个变量事先没有被lock操作锁定，那就不允许对它执行unlock操作，也不允许去unlock一个被其他线程锁定住的变量。</li><li>对一个变量执行unlock操作之前，必须先把此变量同步回主内存中（执行store、write操作）。</li></ul><h2 id="_5-并发编程的三大特性" tabindex="-1">5. 并发编程的三大特性 <a class="header-anchor" href="#_5-并发编程的三大特性" aria-label="Permalink to “5. 并发编程的三大特性”">​</a></h2><h3 id="_1-原子性" tabindex="-1">1. 原子性 <a class="header-anchor" href="#_1-原子性" aria-label="Permalink to “1. 原子性”">​</a></h3><p>一个或多个程序指令，要么全部正确执行完毕不能被打断，或者全部不执行</p><h3 id="_2-可见性" tabindex="-1">2. 可见性 <a class="header-anchor" href="#_2-可见性" aria-label="Permalink to “2. 可见性”">​</a></h3><p>当一个线程修改了某个共享变量的值，其它线程应当能够立即看到修改后的值。</p><h3 id="_3-有序性" tabindex="-1">3. 有序性 <a class="header-anchor" href="#_3-有序性" aria-label="Permalink to “3. 有序性”">​</a></h3><p>程序执行代码指令的顺序应当保证按照程序指定的顺序执行，即便是编译优化，也应当保证程序源语一致。</p><h1 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to “总结”">​</a></h1><ol><li>栈存哪些东西？具体怎么存？</li><li>画出一个对象在内存中实例化的过程？</li><li>JVM的内存模型和分区~详细到每个区放什么？</li><li>堆里面的分区有哪些？Eden，form，to，老年区，说说他们的特点！</li><li>GC的算法有哪些？标记清除法，标记压缩，复制算法，引用计数器，怎么用的？</li><li>轻GC和重GC分别在什么时候发生？</li></ol>',122)])])}const O=i(y,[["render",C]]);export{T as __pageData,O as default};
