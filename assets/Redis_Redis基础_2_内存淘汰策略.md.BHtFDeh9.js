import{_ as i,c as a,o as e,ah as n,ot as l,ou as p,ov as r,ow as t,ox as h}from"./chunks/framework.D5cOWG0Y.js";const F=JSON.parse('{"title":"内存淘汰策略","description":"","frontmatter":{"title":"内存淘汰策略","tags":["Redis"],"categories":["Redis"]},"headers":[],"relativePath":"Redis/Redis基础/2_内存淘汰策略.md","filePath":"Redis/Redis基础/2_内存淘汰策略.md","lastUpdated":1756054686000}'),k={name:"Redis/Redis基础/2_内存淘汰策略.md"};function d(g,s,c,o,y,b){return e(),a("div",null,[...s[0]||(s[0]=[n(`<h2 id="一、redis过期删除策略" tabindex="-1">一、Redis过期删除策略 <a class="header-anchor" href="#一、redis过期删除策略" aria-label="Permalink to “一、Redis过期删除策略”">​</a></h2><p>Redis对于过期的key，有两种删除策略：</p><ol><li>定时删除</li><li>定期删除</li><li>惰性删除</li></ol><h3 id="定时删除" tabindex="-1">定时删除 <a class="header-anchor" href="#定时删除" aria-label="Permalink to “定时删除”">​</a></h3><p>在设置键的过期时间的同时，设置一个定时器，当键过期了，定时器马上把该键删除。</p><p>定时删除对内存来说是友好的，因为它可以及时清理过期键；但对CPU是不友好的，如果过期键太多，删除操作会消耗过多的资源。</p><h3 id="定期删除" tabindex="-1">定期删除 <a class="header-anchor" href="#定期删除" aria-label="Permalink to “定期删除”">​</a></h3><p>redis 会将每个设置了过期时间的 key 放入到一个独立的字典中，以后会定期遍历这个字典来删除到期key。</p><p>Redis 默认会每秒进行十次过期扫描（100ms一次），过期扫描不会遍历过期字典中所有的 key，而是采用了一种简单的<strong>贪心策略</strong>。</p><ol><li>从过期字典中随机 20 个 key；</li><li>删除这 20 个 key 中已经过期的 key；</li><li>如果过期的 key 比率超过 1/4，那就重复步骤 1；</li></ol><p>redis默认是每隔 100ms就随机抽取一些设置了过期时间的key，检查其是否过期，如果过期就删除。</p><p>注意这里是随机抽取的。为什么要随机呢？你想一想假如 redis 存了几十万个 key ，每隔100ms就遍历所有的设置过期时间的 key 的话，就会给 CPU 带来很大的负载。</p><p>定期删除是定时删除和惰性删除的一个折中方案。每隔一段时间来删除过期键，可以根据实际场景自定义这个间隔时间，在CPU资源和内存资源上作出权衡。</p><h3 id="惰性删除" tabindex="-1">惰性删除 <a class="header-anchor" href="#惰性删除" aria-label="Permalink to “惰性删除”">​</a></h3><p>所谓惰性策略就是在客户端访问这个key的时候，redis对key的过期时间进行检查，如果过期了就立即删除，不会给你返回任何东西。</p><p>为啥需要两种删除策略呢？</p><p>定期删除可能会导致很多过期key到了时间并没有被删除掉。所以就有了惰性删除。假如你的过期 key，靠定期删除没有被删除掉，还停留在内存里，除非你的系统去查一下那个 key，才会被redis给删除掉。这就是所谓的惰性删除，即当你主动去查过期的key时，如果发现key过期了，就立即进行删除，不返回任何东西。</p><p>总结：定期删除是集中处理，惰性删除是零散处理。</p><h2 id="二、配置redis内存" tabindex="-1">二、配置Redis内存 <a class="header-anchor" href="#二、配置redis内存" aria-label="Permalink to “二、配置Redis内存”">​</a></h2><p>Redis是基于内存key-value键值对的内存数据库，我们安装完数据库之后，内存往往会受到系统内存大小的限制，我们也可以配置redis能使用的最大的内存大小。</p><p>两种方式配置redis的内存：</p><ul><li>通过配置文件修改</li><li>通过客户端修改</li></ul><h3 id="通过配置文件修改" tabindex="-1">通过配置文件修改 <a class="header-anchor" href="#通过配置文件修改" aria-label="Permalink to “通过配置文件修改”">​</a></h3><p>我们可以通过配置文件修改，安装完redis之后我们可以在redis根目录中找到redis.conf文件,在配置文件中添加一下参数就可以设置redis的内存大小了</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置 Redis 最大使用内存大小为100M</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maxmemory</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 100mb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    //指定最大内存为100mb</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上面的配置设置了，当 Redis 使用的内存超过 100Mb 时,就开始对数据进行淘汰。</p><p>下面是更加详细的例子：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#配置文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maxmemory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">下面的写法均合法：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maxmemory</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maxmemory</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1GB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maxmemory</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1G</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maxmemory</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1024KB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maxmemory</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1024K</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maxmemory</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1024MB</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="通过客户端修改" tabindex="-1">通过客户端修改 <a class="header-anchor" href="#通过客户端修改" aria-label="Permalink to “通过客户端修改”">​</a></h3><p>在服务器上输入redis-cli之后进入redis客户端，通过命令动态修改redis内存大小</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//设置Redis最大占用内存大小为100M</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> maxmemory</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 100mb</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//获取设置的Redis能使用的最大内存大小</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> maxmemory</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如果不设置，或者设置最大内存大小为0，在64位操作系统下，Redis不限制内存大小，在32位操作系统，Redis最多使用3GB内存。</p><p>下面是更加详细的例子：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#命令行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> maxmemory</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;maxmemory&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> maxmemory</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1GB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> maxmemory</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;maxmemory&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1073741824&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="三、redis内存淘汰策略" tabindex="-1">三、Redis内存淘汰策略 <a class="header-anchor" href="#三、redis内存淘汰策略" aria-label="Permalink to “三、Redis内存淘汰策略”">​</a></h2><p>我们设置完redis内存之后，我们就像里面放数据，但是内存总有满的时候，满的时候redis又是怎么处理的呢？</p><p>每进行一次redis操作的时候，redis都会检测可用内存，判断是否要进行内存淘汰，当超过可用内存的时候，redids 就会使用对应淘汰策略。</p><h3 id="八种内存淘汰策略" tabindex="-1">八种内存淘汰策略 <a class="header-anchor" href="#八种内存淘汰策略" aria-label="Permalink to “八种内存淘汰策略”">​</a></h3><p>redis内存淘汰策略，具体如下：</p><ol><li><strong>no-envicition</strong> 该策略对于写请求不再提供服务，会直接返回错误，当然排除del等特殊操作，redis默认是no-envicition策略。</li><li><strong>allkeys-random</strong> 从redis中随机选取key进行淘汰。</li><li><strong>allkeys-lru</strong> 使用LRU（Least Recently Used，最近最少使用）算法，从redis中选取使用最少的key进行淘汰。</li><li><strong>volatile-random</strong> 从redis中设置过过期时间的key，进行随机淘汰。</li><li><strong>volatile-ttl</strong> 从redis中选取即将过期的key，进行淘汰。</li><li><strong>volatile-lru</strong> 使用LRU（Least Recently Used，最近最少使用）算法，从redis中设置过过期时间的key中，选取最少使用的进行淘汰。</li><li><strong>volatile-lfu</strong> 使用LFU（Least Frequently Used，最不经常使用），从设置了过期时间的键中选择某段时间之内使用频次最小的键值对清除掉。</li><li><strong>allkeys-lfu</strong> 使用LFU（Least Frequently Used，最不经常使用），从所有的键中选择某段时间之内使用频次最少的键值对清除。</li></ol><p>主要是4种算法，针对不同的key，形成的策略。</p><p>算法：</p><ol><li>random：随机淘汰。</li><li>ttl：快要过期的先淘汰。</li><li>lru（Least Recently Used）：最近很少的使用的key（根据时间，最不常用的淘汰）。</li><li>lfu（Least Frequently Used）：最近很少的使用的key (根据计数器，用的次数最少的key淘汰)。</li></ol><p>key ：</p><ol><li>volatile：有过期的时间的那些key。</li><li>allkeys：所有的key。</li></ol><h3 id="内存淘汰算法的具体工作原理" tabindex="-1">内存淘汰算法的具体工作原理 <a class="header-anchor" href="#内存淘汰算法的具体工作原理" aria-label="Permalink to “内存淘汰算法的具体工作原理”">​</a></h3><ul><li>客户端执行一条新命令，导致数据库需要增加数据（比如set key value）</li><li>Redis会检查内存使用，如果内存使用超过 maxmemory，就会按照置换策略删除一些 key</li><li>新的命令执行成功</li></ul><h3 id="如何设置淘汰策略" tabindex="-1">如何设置淘汰策略 <a class="header-anchor" href="#如何设置淘汰策略" aria-label="Permalink to “如何设置淘汰策略”">​</a></h3><p>可以命令查看当前redis使用的淘汰策略</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>config get maxmemory-policy    //获取当前内存淘汰策略</span></span>
<span class="line"><span>config set maxmemory-policy valatile-lru  //通过命令修改淘汰策略</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="四、redis-内存淘汰算法" tabindex="-1">四、Redis 内存淘汰算法 <a class="header-anchor" href="#四、redis-内存淘汰算法" aria-label="Permalink to “四、Redis 内存淘汰算法”">​</a></h2><p>Redis 的淘汰算法有多种，如下：</p><ol><li>random</li><li>TTL</li><li>LRU（Least Recently Used，最近最少使用）</li><li>LFU（Least Frequently Used，最不经常使用）</li></ol><p>random随机算法很好理解，就是从数据库中随机淘汰一些 Keys。</p><p>TTL 算法就是从设置了过期时间的 Keys 中获取最早过期的 一批 Keys，然后淘汰这些 Keys。</p><p>而 LRU 和 LFU 这两种算法在名字上比较容易混淆，所以这里介绍一下这两种算法的区别。</p><p>在缓存的内存淘汰策略中有FIFO、LRU、LFU三种，其中LRU和LFU是Redis在使用的。FIFO是最简单的淘汰策略，遵循着先进先出的原则，这里简单提一下：</p><p><img src="`+l+'" alt="img" loading="lazy"></p><h3 id="lru算法" tabindex="-1">LRU算法 <a class="header-anchor" href="#lru算法" aria-label="Permalink to “LRU算法”">​</a></h3><p>LRU（Least Recently Used，最近最少使用），主要是通过 Key 的最后访问时间来判定哪些 Key 更适合被淘汰，如下图所示：</p><p><img src="'+p+'" alt="在这里插入图片描述" loading="lazy"></p><p>如上图所示，所有的 Keys 都根据最后被访问的时间来进行排序的，所以在淘汰时只需要按照所有 Keys 的最后被访问时间，由小到大来进行即可。</p><p><img src="'+r+`" alt="在这里插入图片描述" loading="lazy"></p><p><strong>LRU算法的特点：</strong></p><ol><li><p>新增key value的时候首先在链表结尾添加Node节点，如果超过LRU设置的阈值就淘汰队头的节点并删除掉HashMap中对应的节点。</p></li><li><p>修改key对应的值的时候先修改对应的Node中的值，然后把Node节点移动队尾。</p></li><li><p>访问key对应的值的时候把访问的Node节点移动到队尾即可。</p></li></ol><p><strong>Redis的LRU实现：</strong></p><p>Redis维护了一个24位时钟，可以简单理解为当前系统的时间戳，每隔一定时间会更新这个时钟。每个key对象内部同样维护了一个24位的时钟，当新增key对象的时候会把系统的时钟赋值到这个内部对象时钟。比如我现在要进行LRU，那么首先拿到当前的全局时钟，然后再找到内部时钟与全局时钟距离时间最久的（差最大）进行淘汰，这里值得注意的是全局时钟只有24位，按秒为单位来表示才能存储194天，所以可能会出现key的时钟大于全局时钟的情况，如果这种情况出现那么就两个相加而不是相减来求最久的key。</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> redisServer {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       pid_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pid; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configfile; </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       //全局时钟</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       unsigned</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lruclock:LRU_BITS; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> redisObject {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    unsigned</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    unsigned</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encoding:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* key对象内部时钟 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    unsigned</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lru:LRU_BITS;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> refcount;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptr;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} robj;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>Redis中的LRU与常规的LRU实现并不相同，常规LRU会准确的淘汰掉队头的元素，但是Redis的LRU并不维护队列，只是根据配置的策略要么从所有的key中随机选择N个（N可以配置）要么从所有的设置了过期时间的key中选出N个键，然后再从这N个键中选出最久没有使用的一个key进行淘汰。</p><p>下图是常规LRU淘汰策略与Redis随机样本取一键淘汰策略的对比，浅灰色表示已经删除的键，深灰色表示没有被删除的键，绿色表示新加入的键，越往上表示键加入的时间越久。从图中可以看出，在redis 3中，设置样本数为10的时候能够很准确的淘汰掉最久没有使用的键，与常规LRU基本持平。</p><p><img src="`+t+'" alt="在这里插入图片描述" loading="lazy"></p><p><strong>为什么要使用近似LRU？</strong></p><p>1、性能问题，由于近似LRU算法只是最多随机采样N个key并对其进行排序，如果精准需要对所有key进行排序，这样近似LRU性能更高</p><p>2、内存占用问题，redis对内存要求很高，会尽量降低内存使用率，如果是抽样排序可以有效降低内存的占用</p><p>3、实际效果基本相等，如果请求符合长尾法则，那么真实LRU与Redis LRU之间表现基本无差异</p><p>4、在近似情况下提供可自配置的取样率来提升精准度，例如通过 CONFIG SET maxmemory-samples 指令可以设置取样数，取样数越高越精准，如果你的CPU和内存有足够，可以提高取样数看命中率来探测最佳的采样比例。</p><h3 id="lfu算法" tabindex="-1">LFU算法 <a class="header-anchor" href="#lfu算法" aria-label="Permalink to “LFU算法”">​</a></h3><p>LFU（Least Frequently Used）表示最不经常使用，它是根据数据的历史访问频率来淘汰数据，其核心思想是“如果数据过去被访问多次，那么将来被访问的频率也更高”。</p><p>LFU算法反映了一个key的热度情况，不会因LRU算法的偶尔一次被访问被误认为是热点数据。</p><p>LFU算法的常见实现方式为链表：</p><p>新数据放在链表尾部 ，链表中的数据按照被访问次数降序排列，访问次数相同的按最近访问时间降序排列，链表满的时候从链表尾部移出数据。</p><p><img src="'+h+'" alt="img" loading="lazy"></p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to “参考资料”">​</a></h2><p><a href="https://blog.csdn.net/crazymakercircle/article/details/115360829" target="_blank" rel="noreferrer">https://blog.csdn.net/crazymakercircle/article/details/115360829</a></p><p><a href="https://blog.csdn.net/weixin_40980639/article/details/125446002" target="_blank" rel="noreferrer">https://blog.csdn.net/weixin_40980639/article/details/125446002</a></p>',85)])])}const u=i(k,[["render",d]]);export{F as __pageData,u as default};
