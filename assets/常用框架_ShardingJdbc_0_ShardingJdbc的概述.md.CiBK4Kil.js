import{_ as r,c as e,o as t,ah as i,vd as d,ve as h,vf as n,vg as l}from"./chunks/framework.D5cOWG0Y.js";const m=JSON.parse('{"title":"ShardingJdbc的概述","description":"","frontmatter":{"title":"ShardingJdbc的概述","tags":["ShardingJdbc"],"categories":["ShardingJdbc"]},"headers":[],"relativePath":"常用框架/ShardingJdbc/0_ShardingJdbc的概述.md","filePath":"常用框架/ShardingJdbc/0_ShardingJdbc的概述.md","lastUpdated":1756054686000}'),s={name:"常用框架/ShardingJdbc/0_ShardingJdbc的概述.md"};function p(c,a,o,g,b,S){return t(),e("div",null,[...a[0]||(a[0]=[i('<h2 id="一、shardingjdbc的概述" tabindex="-1">一、ShardingJdbc的概述 <a class="header-anchor" href="#一、shardingjdbc的概述" aria-label="Permalink to “一、ShardingJdbc的概述”">​</a></h2><blockquote><p>官网：<a href="http://shardingsphere.apache.org/index_zh.html" target="_blank" rel="noreferrer">http://shardingsphere.apache.org/index_zh.html</a></p><p>下载地址：<a href="https://shardingsphere.apache.org/document/current/cn/downloads/" target="_blank" rel="noreferrer">https://shardingsphere.apache.org/document/current/cn/downloads/</a></p><p>快速入门：<a href="https://shardingsphere.apache.org/document/current/cn/quick-start/shardingsphere-jdbc-quick-start/" target="_blank" rel="noreferrer">https://shardingsphere.apache.org/document/current/cn/quick-start/shardingsphere-jdbc-quick-start/</a></p></blockquote><p>以下来自官网的原话：</p><p>Apache ShardingSphere 是一套开源的分布式数据库解决方案组成的生态圈，它由 JDBC、Proxy 和 Sidecar（规划中）这 3 款既能够独立部署，又支持混合部署配合使用的产品组成。 它们均提供标准化的数据水平扩展、分布式事务和分布式治理等功能，可适用于如 Java 同构、异构语言、云原生等各种多样化的应用场景。</p><p>Apache ShardingSphere 旨在充分合理地在分布式的场景下利用关系型数据库的计算和存储能力，而并非实现一个全新的关系型数据库。 关系型数据库当今依然占有巨大市场份额，是企业核心系统的基石，未来也难于撼动，我们更加注重在原有基础上提供增量，而非颠覆。</p><p>Apache ShardingSphere 5.x 版本开始致力于可插拔架构，项目的功能组件能够灵活的以可插拔的方式进行扩展。 目前，数据分片、读写分离、数据加密、影子库压测等功能，以及 MySQL、PostgreSQL、SQLServer、Oracle 等 SQL 与协议的支持，均通过插件的方式织入项目。 开发者能够像使用积木一样定制属于自己的独特系统。Apache ShardingSphere 目前已提供数十个 SPI 作为系统的扩展点，仍在不断增加中。</p><p>ShardingSphere 已于2020年4月16日成为 Apache 软件基金会的顶级项目。</p><h2 id="二、关于改名问题" tabindex="-1">二、关于改名问题 <a class="header-anchor" href="#二、关于改名问题" aria-label="Permalink to “二、关于改名问题”">​</a></h2><p>在3.0以后就更改成了ShardingSphere。</p><h2 id="三、认识shardingjdbc" tabindex="-1">三、认识shardingjdbc <a class="header-anchor" href="#三、认识shardingjdbc" aria-label="Permalink to “三、认识shardingjdbc”">​</a></h2><p><img src="'+d+'" alt="img" loading="lazy"></p><p>定位为轻量级 Java 框架，在 Java 的 JDBC 层提供的额外服务。 它使用客户端直连数据库，以 jar 包形式提供服务，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架。</p><p>适用于任何基于 JDBC 的 ORM 框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template 或直接使用 JDBC。</p><p>支持任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, Druid, HikariCP 等。 支持任意实现 JDBC 规范的数据库，目前支持 MySQL，Oracle，SQLServer，PostgreSQL 以及任何遵循 SQL92 标准的数据库。</p><h2 id="四、认识shardingjdbc功能架构图" tabindex="-1">四、认识shardingjdbc功能架构图 <a class="header-anchor" href="#四、认识shardingjdbc功能架构图" aria-label="Permalink to “四、认识shardingjdbc功能架构图”">​</a></h2><p><img src="'+h+'" alt="img" loading="lazy"></p><h2 id="五、认识sharding-proxy" tabindex="-1">五、认识Sharding-Proxy <a class="header-anchor" href="#五、认识sharding-proxy" aria-label="Permalink to “五、认识Sharding-Proxy”">​</a></h2><ul><li>向应用程序完全透明，可直接当做 MySQL/PostgreSQL 使用。</li><li>适用于任何兼容 MySQL/PostgreSQL 协议的的客户端。</li></ul><h2 id="六、三个组件的比较" tabindex="-1">六、三个组件的比较 <a class="header-anchor" href="#六、三个组件的比较" aria-label="Permalink to “六、三个组件的比较”">​</a></h2><table tabindex="0"><thead><tr><th></th><th>Sharding-Jdbc</th><th>Sharding-Proxy</th><th>Sharding-Sidecar</th></tr></thead><tbody><tr><td>数据库</td><td>任意</td><td>MYSQL</td><td>MYSQL</td></tr><tr><td>连接消耗数</td><td>高</td><td>低</td><td>低</td></tr><tr><td>异构语言</td><td>仅Java</td><td>任意</td><td>任意</td></tr><tr><td>性能</td><td>损耗低</td><td>损耗高</td><td>损耗低</td></tr><tr><td>中心化</td><td>是</td><td>否</td><td>是</td></tr><tr><td>静态入口</td><td>无</td><td>有</td><td>无</td></tr></tbody></table><h2 id="七、shardingjdbc混合架构" tabindex="-1">七、ShardingJdbc混合架构 <a class="header-anchor" href="#七、shardingjdbc混合架构" aria-label="Permalink to “七、ShardingJdbc混合架构”">​</a></h2><p><img src="'+n+'" alt="img" loading="lazy"></p><p>ShardingSphere-JDBC 采用无中心化架构，适用于 Java 开发的高性能的轻量级 OLTP（连接事务处理） 应用；ShardingSphere-Proxy 提供静态入口以及异构语言的支持，适用于 OLAP（连接数据分析） 应用以及对分片数据库进行管理和运维的场景。</p><p>Apache ShardingSphere 是多接入端共同组成的生态圈。 通过混合使用 ShardingSphere-JDBC 和 ShardingSphere-Proxy，并采用同一注册中心统一配置分片策略，能够灵活的搭建适用于各种场景的应用系统，使得架构师更加自由地调整适合与当前业务的最佳系统架构。</p><p>八、ShardingShpere的功能清单</p><ul><li>功能列表 <ul><li>数据分片</li><li>分库 &amp; 分表</li><li>读写分离</li><li>分片策略定制化</li><li>无中心化分布式主键</li></ul></li><li>分布式事务 <ul><li>标准化事务接口</li><li>XA 强一致事务</li><li>柔性事务</li><li>数据库治理</li></ul></li><li>分布式治理 <ul><li>弹性伸缩</li><li>可视化链路追踪</li><li>数据加密</li></ul></li></ul><h2 id="九、-shardingsphere数据分片内核剖析" tabindex="-1">九、 ShardingSphere数据分片内核剖析 <a class="header-anchor" href="#九、-shardingsphere数据分片内核剖析" aria-label="Permalink to “九、 ShardingSphere数据分片内核剖析”">​</a></h2><p>ShardingSphere 的 3 个产品的数据分片主要流程是完全一致的。 核心由 SQL 解析 =&gt; 执行器优化 =&gt; SQL 路由 =&gt; SQL 改写 =&gt; SQL 执行 =&gt; 结果归并的流程组成。</p><p><img src="'+l+'" alt="img" loading="lazy"></p><ol><li><p>SQL 解析</p><p>分为词法解析和语法解析。 先通过词法解析器将 SQL 拆分为一个个不可再分的单词。再使用语法解析器对 SQL 进行理解，并最终提炼出解析上下文。 解析上下文包括表、选择项、排序项、分组项、聚合函数、分页信息、查询条件以及可能需要修改的占位符的标记。</p></li><li><p>执行器优化</p><p>合并和优化分片条件，如 OR 等。</p></li><li><p>SQL 路由</p><p>根据解析上下文匹配用户配置的分片策略，并生成路由路径。目前支持分片路由和广播路由。</p></li><li><p>SQL 改写</p><p>将 SQL 改写为在真实数据库中可以正确执行的语句。SQL 改写分为正确性改写和优化改写。</p></li><li><p>SQL 执行</p><p>通过多线程执行器异步执行。</p></li><li><p>结果归并</p><p>将多个执行结果集归并以便于通过统一的 JDBC 接口输出。结果归并包括流式归并、内存归并和使用装饰者模式的追加归并这几种方式。</p></li></ol><h3 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to “配置”">​</a></h3><h4 id="sharding3" tabindex="-1">sharding3 <a class="header-anchor" href="#sharding3" aria-label="Permalink to “sharding3”">​</a></h4><p>分库分表（sharding3版本）：<a href="https://blog.csdn.net/zxp2624161989/article/details/107094560/" target="_blank" rel="noreferrer">https://blog.csdn.net/zxp2624161989/article/details/107094560/</a></p><p>不分库只分表（sharding3版本）：<a href="https://www.bilibili.com/video/BV1id4y1z7St%E3%80%81https://blog.csdn.net/zxp2624161989/article/details/107094560/" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1id4y1z7St、https://blog.csdn.net/zxp2624161989/article/details/107094560/</a></p><p>水平分片： 创建测试数据局test_order。分别创建三张表t_address， t_user0，t_user1。 这里假设t_user这个预计随着系统的运行。 公司发展很好，以后数据量会暴增。所以提前进行水平分片存储。相对于垂直分片，它不再将数据根据业务逻辑分类， 而是通过某个字段（或某几个字段），根据某种规则将数据分散至多个库或表中， 每个分片仅包含数据的一部分。这样单表数据量降下来了，mysql的B+树的检索效率就提高了。</p><h4 id="sharding4" tabindex="-1">sharding4 <a class="header-anchor" href="#sharding4" aria-label="Permalink to “sharding4”">​</a></h4><p>不分库只分表（sharding4版本）yml配置：<a href="https://blog.csdn.net/weixin_40816738/article/details/126802777" target="_blank" rel="noreferrer">https://blog.csdn.net/weixin_40816738/article/details/126802777</a> 分表配置后加载报错，ShardingParsingRuleRegistry：<a href="https://www.codenong.com/cs105364582/" target="_blank" rel="noreferrer">https://www.codenong.com/cs105364582/</a> 方法一：将 jdk的运行版本降为 1.8。 方法二：将 JAXB 相关jar包重新引入，具体maven。</p><p>分库分表（sharding4版本）yml配置：<a href="https://blog.csdn.net/akenseren/article/details/127350807" target="_blank" rel="noreferrer">https://blog.csdn.net/akenseren/article/details/127350807</a><a href="https://www.jianshu.com/p/3b3f7c6fd288" target="_blank" rel="noreferrer">https://www.jianshu.com/p/3b3f7c6fd288</a></p><h3 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to “参考资料”">​</a></h3><p>[1]. <a href="https://www.cnblogs.com/architectforest/p/13537436.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/architectforest/p/13537436.html</a></p><p>[2]. 狂神视频：<a href="https://www.bilibili.com/video/BV1ei4y1K7dn" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1ei4y1K7dn</a> 狂神笔记：<a href="https://blog.csdn.net/qq_44866424/article/details/120009099" target="_blank" rel="noreferrer">https://blog.csdn.net/qq_44866424/article/details/120009099</a></p><p>[3]. win下配置主从复制（不推荐在win上配置） <a href="https://blog.csdn.net/qq_27991253/article/details/128017412" target="_blank" rel="noreferrer">https://blog.csdn.net/qq_27991253/article/details/128017412</a></p><h3 id="面试问题" tabindex="-1">面试问题 <a class="header-anchor" href="#面试问题" aria-label="Permalink to “面试问题”">​</a></h3><p>1、与mycat区别：</p><p><a href="https://www.zhihu.com/question/64709787" target="_blank" rel="noreferrer">https://www.zhihu.com/question/64709787</a></p><h3 id="sharding使用中的一些问题" tabindex="-1">sharding使用中的一些问题： <a class="header-anchor" href="#sharding使用中的一些问题" aria-label="Permalink to “sharding使用中的一些问题：”">​</a></h3><p>1、sharding + MP 启动后无法执行查询：Error querying database？</p><p>解决方式：修改版本为4.1.1，使其支持子查询。</p><p><a href="https://blog.csdn.net/u014106644/article/details/128335532" target="_blank" rel="noreferrer">https://blog.csdn.net/u014106644/article/details/128335532</a></p><p>4.0.0-RC1版本是有限制支持子查询的 主查询和子查询必须保证相同的分片键;</p><p>4.1.1可以支持子查询 子查询判断条件恒为false;</p><p>5.0版本 Federation 执行引擎支持子查询；</p><p>2、警告：spring boot 集成 sharding jdbc 分库分表 数据库连接健康检查不通过</p><p><a href="https://www.cnblogs.com/maohuidong/p/15006724.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/maohuidong/p/15006724.html</a></p><p>3、服务器配置主从复制报错：Fatal error:The slave I/O thread stops because master and slave have equal MySQL server UUIDs？</p><p>原因：使用了VMware克隆了两台虚拟机作为主机和从机导致UUID一样。</p><p>解决：找到主机和从机的auto.cnf文件修改uuid值或删除auto.cnf这个文件。</p><p><a href="https://blog.csdn.net/cnds123321/article/details/117925881" target="_blank" rel="noreferrer">https://blog.csdn.net/cnds123321/article/details/117925881</a></p><p>4、Sharding-JDBC整合Mybatisplus分片键生成策略冲突问题及分析解决</p><p><a href="https://blog.csdn.net/weixin_43584430/article/details/120367418" target="_blank" rel="noreferrer">https://blog.csdn.net/weixin_43584430/article/details/120367418</a></p>',60)])])}const f=r(s,[["render",p]]);export{m as __pageData,f as default};
