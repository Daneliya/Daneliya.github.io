import{_ as i,c as a,o as n,ah as l}from"./chunks/framework.D5cOWG0Y.js";const o=JSON.parse('{"title":"OpenAI大模型API基础","description":"","frontmatter":{"title":"OpenAI大模型API基础","tags":["Python"],"categories":["Python"]},"headers":[],"relativePath":"Python/AI大模型应用开发/2_OpenAI大模型API基础.md","filePath":"Python/AI大模型应用开发/2_OpenAI大模型API基础.md","lastUpdated":1755802517000}'),e={name:"Python/AI大模型应用开发/2_OpenAI大模型API基础.md"};function p(h,s,t,k,r,d){return n(),a("div",null,[...s[0]||(s[0]=[l(`<h2 id="一、如何用代码与ai对话-模型api" tabindex="-1">一、如何用代码与AI对话？模型API <a class="header-anchor" href="#一、如何用代码与ai对话-模型api" aria-label="Permalink to “一、如何用代码与AI对话？模型API”">​</a></h2><p>要真正动手构建属于自己的 AI 应用，就不能停留在通过网页与 AI 交互的层面。虽然网页端可以获取 AI 的回答，但这种方式存在明显局限：</p><ol><li><strong>数据提取困难</strong>：从网页上“扒”下 AI 的回答用于后续处理非常麻烦，不利于自动化。</li><li>控制能力有限：无法灵活调整 AI 回复的关键参数，例如： <ul><li>回复长度（如限制为 512 个 token）</li><li>创造性（temperature）</li><li>频率惩罚（frequency penalty）</li><li>提示模板的使用效率低</li></ul></li></ol><p>相比之下，<strong>通过代码调用 AI 模型</strong>具有显著优势：</p><ul><li><strong>精细控制</strong>：可以精确设置请求参数，获得更可靠、可预测的输出。</li><li><strong>批量处理</strong>：能对大量数据进行自动化处理，例如一次性总结多个文档。</li><li><strong>系统集成</strong>：可将 AI 能力嵌入到自己的系统或工作流中，实现定制化功能，如自动回复邮件、生成报告等。</li></ul><h3 id="_1、如何用代码与-ai-大模型对话" tabindex="-1">1、如何用代码与 AI 大模型对话？ <a class="header-anchor" href="#_1、如何用代码与-ai-大模型对话" aria-label="Permalink to “1、如何用代码与 AI 大模型对话？”">​</a></h3><p>最常见的方式是通过 <strong>API（Application Programming Interface，应用程序编程接口）</strong> 调用。</p><ul><li><strong>API 的作用</strong>：定义了客户端与服务端之间的通信规则，相当于“如何与服务对话的说明书”。</li><li><strong>底层协议</strong>：大多数 AI API 基于 <strong>HTTP（Hypertext Transfer Protocol，超文本传输协议）</strong>，采用客户端发送请求、服务器返回响应的模式。</li></ul><p>工作流程如下：</p><ol><li><strong>客户端</strong>（你的代码）将提示（prompt）封装在请求中，发送给 AI 服务提供商（如 OpenAI、百度等）的服务器。</li><li><strong>服务器</strong>运行大模型生成回复，并通过 HTTP 响应返回结果。</li><li><strong>客户端</strong>接收响应，提取 AI 的回答，用于后续处理。</li></ol><blockquote><p>注：HTTP 请求和响应包含许多技术细节（如 headers、status code 等），初学者不必完全理解。</p></blockquote><h3 id="_2、实际开发中的便利性" tabindex="-1">2、实际开发中的便利性 <a class="header-anchor" href="#_2、实际开发中的便利性" aria-label="Permalink to “2、实际开发中的便利性”">​</a></h3><p>为了降低使用门槛，主流 AI 服务商（如 OpenAI、百度）都提供了 <strong>官方封装的 Python 库</strong>：</p><ul><li>你无需手动构建复杂的 HTTP 请求。</li><li>只需调用库中的函数或方法，传入相应参数即可完成请求。</li><li>例如：指定使用哪个模型、输入消息内容、设置 temperature 等。</li></ul><p>这些库的使用方法都有详细文档说明，包括：</p><ul><li>调用哪个方法</li><li>参数如何设置</li><li>输入数据结构（如消息列表）</li><li>响应数据的格式和解析方式</li></ul><p>虽然不同平台（如 GPT、文心一言）的 Python 库和代码略有差异，但核心逻辑一致：<strong>发送提示 → 获取回复</strong>，掌握一个即可触类旁通。</p><h3 id="_3、调用前的关键步骤-获取-api-密钥" tabindex="-1">3、调用前的关键步骤：获取 API 密钥 <a class="header-anchor" href="#_3、调用前的关键步骤-获取-api-密钥" aria-label="Permalink to “3、调用前的关键步骤：获取 API 密钥”">​</a></h3><p>在调用任何主流 AI 大模型 API 之前，必须先获取 <strong>API Key（API 密钥）</strong>。</p><ul><li>作用： <ul><li>身份验证：服务方识别请求来源</li><li>使用追踪：记录调用次数和频率</li><li>计费依据：按使用量收费</li></ul></li><li>因此，API Key 是调用 AI 服务的前提。</li></ul><h2 id="二、创建openai-api密钥-然后藏起来" tabindex="-1">二、创建OpenAI API密钥，然后藏起来 <a class="header-anchor" href="#二、创建openai-api密钥-然后藏起来" aria-label="Permalink to “二、创建OpenAI API密钥，然后藏起来”">​</a></h2><p>在通过代码调用 AI 大模型之前，必须获取 API 密钥。没有 API 密钥，无法使用 OpenAI 等平台的模型和服务。本课程以 OpenAI 的 GPT 模型为例进行说明。</p><hr><h3 id="_1、创建-openai-api-密钥" tabindex="-1">1、创建 OpenAI API 密钥 <a class="header-anchor" href="#_1、创建-openai-api-密钥" aria-label="Permalink to “1、创建 OpenAI API 密钥”">​</a></h3><ol><li><strong>访问官网</strong> 前往 OpenAI 官网的 API 密钥管理页面（<a href="https://platform.openai.com/api-keys%EF%BC%89%E3%80%82" target="_blank" rel="noreferrer">https://platform.openai.com/api-keys）。</a></li><li><strong>注册或登录</strong> 如果还没有账号，需先注册并完成验证。</li><li><strong>创建密钥</strong><ul><li>点击 <strong>&quot;Create new secret key&quot;</strong> 按钮。</li><li>可为密钥命名（如用于不同项目），便于识别；不命名则系统自动生成默认名称。</li></ul></li><li><strong>复制并保存密钥</strong><ul><li>创建后，系统会显示完整的 API 密钥。</li><li><strong>注意：该密钥仅显示一次！关闭后无法再次查看完整内容。</strong></li><li>务必点击复制按钮，将密钥保存到安全位置（如密码管理器或本地文件）。</li></ul></li><li><strong>密钥泄露处理</strong><ul><li>API 密钥与账户绑定，一旦泄露，他人使用将产生费用由你承担。</li><li>若怀疑密钥已泄露，请立即在后台将其删除（Revoke），使其失效，然后重新创建新密钥。</li></ul></li></ol><hr><h3 id="_2、安全使用-api-密钥-避免硬编码" tabindex="-1">2、安全使用 API 密钥：避免硬编码 <a class="header-anchor" href="#_2、安全使用-api-密钥-避免硬编码" aria-label="Permalink to “2、安全使用 API 密钥：避免硬编码”">​</a></h3><p>直接将密钥写入代码（硬编码）存在严重安全风险：</p><ul><li>任何人看到代码即可获取密钥。</li><li>若代码上传至 GitHub 等公共平台，密钥将公开暴露。</li></ul><p><strong>推荐做法：使用环境变量存储密钥</strong></p><p>这样代码中不包含密钥明文，即使共享代码也不会泄露。</p><hr><h3 id="_3、设置环境变量-按操作系统" tabindex="-1">3、设置环境变量（按操作系统） <a class="header-anchor" href="#_3、设置环境变量-按操作系统" aria-label="Permalink to “3、设置环境变量（按操作系统）”">​</a></h3><h4 id="windows-系统" tabindex="-1"><strong>Windows 系统</strong> <a class="header-anchor" href="#windows-系统" aria-label="Permalink to “Windows 系统”">​</a></h4><ol><li>右键“此电脑”或“我的电脑” → 选择“属性”。</li><li>点击“高级系统设置” → 在“高级”选项卡下点击“环境变量”。</li><li>在“用户变量”或“系统变量”中点击“新建”。</li><li>输入： <ul><li><strong>变量名</strong>：<code>OPENAI_API_KEY</code>（注意拼写和大小写）</li><li><strong>变量值</strong>：粘贴你的 API 密钥</li></ul></li><li>依次点击“确定”保存。</li></ol><h4 id="macos-系统" tabindex="-1"><strong>macOS 系统</strong> <a class="header-anchor" href="#macos-系统" aria-label="Permalink to “macOS 系统”">​</a></h4><ol><li><p>打开终端，确认 Shell 类型：</p><p>bash深色版本</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>echo $0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>常见为 <code>bash</code> 或 <code>zsh</code>。</p></li><li><p>编辑对应配置文件：</p><ul><li>Bash：<code>~/.bash_profile</code> 或 <code>~/.bashrc</code></li><li>Zsh：<code>~/.zshrc</code></li></ul></li><li><p>使用 <code>nano</code> 编辑器打开文件（以 Zsh 为例）：</p><p>bash深色版本</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>nano ~/.zshrc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>在文件末尾添加一行：</p><p>bash深色版本</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>export OPENAI_API_KEY=&quot;your-api-key-here&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>将 <code>your-api-key-here</code> 替换为实际密钥，注意不要遗漏引号。</p></li><li><p>保存并退出：</p><ul><li>按 <code>Ctrl + X</code></li><li>按 <code>Y</code> 确认保存</li><li>按 <code>Enter</code> 确认文件名</li></ul></li><li><p>使更改立即生效：</p><p>bash深色版本</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>source ~/.zshrc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><hr><h3 id="_4、使用" tabindex="-1">4、使用 <a class="header-anchor" href="#_4、使用" aria-label="Permalink to “4、使用”">​</a></h3><p>设置完成后，代码中可通过读取环境变量的方式获取密钥，例如在 Python 中使用：</p><p>python深色版本</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>import os</span></span>
<span class="line"><span>api_key = os.getenv(&quot;OPENAI_API_KEY&quot;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这样既保证了安全性，也便于在不同环境中部署。</p><h2 id="三、发送你对ai大模型的第一个请求" tabindex="-1">三、发送你对AI大模型的第一个请求 <a class="header-anchor" href="#三、发送你对ai大模型的第一个请求" aria-label="Permalink to “三、发送你对AI大模型的第一个请求”">​</a></h2><p>安装和使用OpenAI Python库</p><h3 id="_1、安装openai库" tabindex="-1">1、安装OpenAI库 <a class="header-anchor" href="#_1、安装openai库" aria-label="Permalink to “1、安装OpenAI库”">​</a></h3><ul><li>通过pip命令安装OpenAI库 <ul><li>打开终端或CMD，输入<code>pip install openai</code>（对于macOS可能需要使用<code>pip3 install openai</code>）。</li><li>或者在Jupyter Notebook中新建一个notebook，并运行<code>!pip install openai</code>。感叹号前缀使得该命令在系统shell中执行，效果等同于在终端或CMD中运行。</li></ul></li><li>导入并初始化OpenAI库 <ul><li>安装完成后，在Jupyter Notebook中使用<code>from openai import OpenAI</code>语句导入OpenAI库。</li><li>创建一个<code>client = OpenAI()</code>实例，通常不需要手动输入API密钥，因为可以从环境变量中自动获取。</li></ul></li></ul><h3 id="_2、配置api密钥" tabindex="-1">2、配置API密钥 <a class="header-anchor" href="#_2、配置api密钥" aria-label="Permalink to “2、配置API密钥”">​</a></h3><ul><li><p>从环境变量读取API密钥</p><ul><li>如果已经将API密钥存储在环境变量中，则可以直接使用，无需再次输入。</li></ul></li><li><p>手动设置API密钥</p><ul><li><p>如果没有存储API密钥或想使用新的密钥，可以通过传递<code>api_key</code>参数给OpenAI构造函数来指定密钥值。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAI(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">api_key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;密钥&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li></ul><h3 id="_3、发送请求与接收回复" tabindex="-1">3、发送请求与接收回复 <a class="header-anchor" href="#_3、发送请求与接收回复" aria-label="Permalink to “3、发送请求与接收回复”">​</a></h3><ul><li>调用chat.completion.create方法 <ul><li>使用<code>openai.ChatCompletion.create()</code>方法发起对话请求，需指定<code>model</code>参数（如<code>gpt-3.5-turbo</code>, <code>gpt-4</code>, <code>gpt-4-turbo</code>等）。</li><li>根据选择的模型版本不同，性能和价格也会有所差异。</li></ul></li><li>构建messages列表 <ul><li><code>messages</code>参数是一个包含一条或多条消息的列表，每条消息由字典表示。</li><li>字典中必须包含<code>role</code>键，用于标识消息来源（用户为<code>user</code>，AI助手为<code>assistant</code>，系统消息为<code>system</code>）。</li><li>可以包含用户的提示和AI的回答，第一条消息可以是系统消息，用于设定背景或角色。</li></ul></li></ul><p>代码示例</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> openai </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAI()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.chat.completions.create(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gpt-3.5-turbo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  messages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;四大文明古国分别有哪些&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ChatCompletion(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;chatcmpl-8iAPcTm1oItRiinW199PZ1aTPMM0F&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">choices</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Choice(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">finish_reason</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;stop&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">logprobs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ChatCompletionMessage(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;四大文明古国指的是古代埃及、巴比伦、印度和中国。这四个古国拥有悠久的历史和独特的文明。以下是这些古国的一些特点：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1. 埃及：埃及文明起源于公元前3100年的法老王朝时期。埃及是世界上最早的文明之一，拥有众多的古代建筑和文化遗产，如金字塔、狮身人面像等。埃及人崇拜众神，并相信死后的来世。</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">2. 巴比伦：巴比伦是古代美索不达米亚地区的一座重要城市。巴比伦文明起源于公元前18世纪的阿卡德帝国时期，盛行于公元前7世纪的新巴比伦帝国时期。巴比伦文明的最大贡献之一是制定了世界上最早的法典——汉谟拉比法典。</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">3. 印度：印度文明起源于公元前2500年左右的哈拉帕文明，也叫印度河谷文明。印度文明的特点之一是宗教多元化，印度教、佛教、耆那教等宗教都在这里兴起。此外，印度还有许多伟大的文化和科学成就，如印度的数学、医学和文学等。</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">4. 中国：中国文明起源于公元前21世纪的夏代，是世界上最古老的连续文明之一。中国文明的特点之一是中华传统文化，包括儒家思想、道家思想和佛教等。此外，中国还有众多的发明和科技成就，如造纸术、指南针、火药和活字印刷术等。&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">role</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;assistant&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">function_call</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tool_calls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))], </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">created</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1705537148</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;gpt-3.5-turbo-0613&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;chat.completion&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">system_fingerprint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">usage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CompletionUsage(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">completion_tokens</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">566</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prompt_tokens</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">total_tokens</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">586</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>多Role示例</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.chat.completions.create(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gpt-3.5-turbo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  messages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;system&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你是一个乐于助人、语气友善的AI聊天助手&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你是谁&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;assistant&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;我是ChatGPT，由OpenAI开发的一款大型语言模型。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;四大文明古国分别有哪些&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ChatCompletion(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;chatcmpl-8iAPmOhzCO2DuFGb3D23JBmFSnNPp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">choices</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Choice(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">finish_reason</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;stop&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">logprobs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ChatCompletionMessage(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;四大文明古国是指中国、印度、古巴比伦和古埃及。以下是它们的简要介绍：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1. 中国：中国是世界上最古老的文明之一，拥有5000多年的历史。它以其丰富的历史和文化遗产而闻名，包括伟大的长城、秦始皇陵、故宫和中国传统的哲学、文学、艺术和科学。</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">2. 印度：印度是世界上最古老的宗教之一——印度教的发源地，也是佛教和耆那教的重要发展地。印度拥有丰富的文化遗产，包括泰姬陵、拉贾斯坦邦的古城、印度古典舞蹈和印度瑜伽等。</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">3. 古巴比伦：古巴比伦位于现在的伊拉克地区，是迦勒底王朝的中心，公元前18至6世纪期间一度是世界上最强大的帝国之一。古巴比伦文明以其先进的法律、政治组织和建筑技术而闻名，其中最著名的是巴比伦的宏伟城市和垂直的花岗岩宏伟塔楼——巴比伦塔。</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">4. 古埃及：古埃及位于尼罗河流域，拥有悠久的历史和独特的文化。古埃及文明以其庞大的金字塔、神庙和法老王墓葬而闻名，埃及的艺术、文学、数学和天文学也有很高的发展水平。同时，古埃及还有一套独特的象形文字系统——象形文字。</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">这些古国对人类文明的发展和演进作出了重大贡献，他们的文化和遗产也延续至今。&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">role</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;assistant&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">function_call</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tool_calls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))], </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">created</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1705537158</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;gpt-3.5-turbo-0613&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;chat.completion&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">system_fingerprint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">usage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CompletionUsage(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">completion_tokens</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prompt_tokens</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">81</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">total_tokens</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">681</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_4、解析ai返回的消息" tabindex="-1">4、解析AI返回的消息 <a class="header-anchor" href="#_4、解析ai返回的消息" aria-label="Permalink to “4、解析AI返回的消息”">​</a></h3><ul><li><p>处理API响应</p><ul><li>调用API后，返回的对象是一个<code>ChatCompletion</code>类实例，其中AI的回复位于<code>choices[0].message.content</code>属性中。</li><li>提取并打印出AI的回答内容。</li></ul></li></ul><p>示例代码片段</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.choices[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].message.content)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">四大文明古国是指中国、印度、古巴比伦和古埃及。以下是它们的简要介绍：</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. 中国：中国是世界上最古老的文明之一，拥有5000多年的历史。它以其丰富的历史和文化遗产而闻名，包括伟大的长城、秦始皇陵、故宫和中国传统的哲学、文学、艺术和科学。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. 印度：印度是世界上最古老的宗教之一——印度教的发源地，也是佛教和耆那教的重要发展地。印度拥有丰富的文化遗产，包括泰姬陵、拉贾斯坦邦的古城、印度古典舞蹈和印度瑜伽等。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. 古巴比伦：古巴比伦位于现在的伊拉克地区，是迦勒底王朝的中心，公元前18至6世纪期间一度是世界上最强大的帝国之一。古巴比伦文明以其先进的法律、政治组织和建筑技术而闻名，其中最著名的是巴比伦的宏伟城市和垂直的花岗岩宏伟塔楼——巴比伦塔。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. 古埃及：古埃及位于尼罗河流域，拥有悠久的历史和独特的文化。古埃及文明以其庞大的金字塔、神庙和法老王墓葬而闻名，埃及的艺术、文学、数学和天文学也有很高的发展水平。同时，古埃及还有一套独特的象形文字系统——象形文字。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">这些古国对人类文明的发展和演进作出了重大贡献，他们的文化和遗产也延续至今。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="四、ai模型咋收费-必了解的token计数" tabindex="-1">四、AI模型咋收费？必了解的token计数 <a class="header-anchor" href="#四、ai模型咋收费-必了解的token计数" aria-label="Permalink to “四、AI模型咋收费？必了解的token计数”">​</a></h2><h3 id="_1、理解token" tabindex="-1">1、理解Token <a class="header-anchor" href="#_1、理解token" aria-label="Permalink to “1、理解Token”">​</a></h3><ul><li>Token作为文本的基本单位 <ul><li>Token是文本处理的基本单位，短单词可能是一个Token，长单词或中文字符则可能被拆分为多个Token。</li><li>中文字符通常占用更多的Token数量，某些不常见字可能会被映射成多个Token。</li></ul></li><li>查看Token化效果 <ul><li>可以使用OpenAI提供的交互式分词器（<a href="https://platform.openai.com/tokenizer" target="_blank" rel="noreferrer">https://platform.openai.com/tokenizer</a>）来查看任意文本如何被映射为不同的Token。</li></ul></li></ul><h3 id="_2、token计费机制" tabindex="-1">2、Token计费机制 <a class="header-anchor" href="#_2、token计费机制" aria-label="Permalink to “2、Token计费机制”">​</a></h3><ul><li>基于Token数量的计费 <ul><li>大部分大模型API的计费基于Token的数量，包括用户提示和AI回应的总Token数。</li><li>一个Token通常对应约四个英文字符，每100个Token约等于75个单词。</li></ul></li><li>具体计费示例 <ul><li>GPT-3.5 Turbo: 输入每1000Token 0.1人民币，输出每1000Token 0.2人民币。</li><li>GPT-4: 输入每1000Token 3美分，输出每1000Token 6美分。</li></ul></li></ul><h3 id="_3、使用ticktoken库估算token数量" tabindex="-1">3、使用TickToken库估算Token数量 <a class="header-anchor" href="#_3、使用ticktoken库估算token数量" aria-label="Permalink to “3、使用TickToken库估算Token数量”">​</a></h3><ul><li>安装TickToken库 <ul><li>在Jupyter Notebook中运行<code>!pip install tiktoken</code>，或在CMD/终端中运行<code>pip install tiktoken</code>（macOS可能需要<code>pip3 install tiktoken</code>）。</li></ul></li><li>使用TickToken库估算Token数 <ul><li>导入<code>tiktoken</code>库并使用<code>Encoding for Model</code>方法获取对应模型的编码器。</li><li>调用编码器的<code>encode</code>方法传入文本内容，返回一个Token ID列表，列表长度即为Token数量。</li></ul></li></ul><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 导入库</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tiktoken</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取对应模型的编码器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">encoding </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tiktoken.encoding_for_model(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gpt-3.5-turbo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">encoding</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 结果返回编码器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Encoding </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cl100k_base&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 调用编码器中的方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">encoding.encode(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;黄河之水天上来&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 返回token id列表结果，每个id对应一个token</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30868</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">226</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">31106</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">111</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">55030</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">53610</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">36827</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17905</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">37507</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 求列表长度</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encoding.encode(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;黄河之水天上来&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 返回token长度</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="_4、控制api请求中的token消耗" tabindex="-1">4、控制API请求中的Token消耗 <a class="header-anchor" href="#_4、控制api请求中的token消耗" aria-label="Permalink to “4、控制API请求中的Token消耗”">​</a></h3><ul><li>限制AI回应的Token数量 <ul><li>可以通过设置API请求参数来控制AI回应的最大Token数，避免过长回复导致成本增加。</li></ul></li><li>上下文窗口的限制 <ul><li>AI模型的上下文窗口（Context Window）是有限的，超过该限制的文本会被截断。例如： <ul><li>GPT-3.5 Turbo: 上下文窗口为4096 Token（另有16K版本支持16000 Token）。</li><li>GPT-4: 上下文窗口为8192 Token（另有32K版本支持32000 Token）。</li></ul></li></ul></li></ul><h3 id="_5、优化提示与回应长度" tabindex="-1">5、优化提示与回应长度 <a class="header-anchor" href="#_5、优化提示与回应长度" aria-label="Permalink to “5、优化提示与回应长度”">​</a></h3><ul><li>简洁提问的重要性 <ul><li>学习如何简洁地构建提示，减少不必要的Token消耗，从而降低成本。</li></ul></li><li>应对上下文窗口限制的方法 <ul><li>针对上下文窗口带来的限制，可以采用分段处理、精简提示等策略来优化对话效果。</li></ul></li></ul><h2 id="五、定制ai的回复-常用参数详解" tabindex="-1">五、定制AI的回复？常用参数详解 <a class="header-anchor" href="#五、定制ai的回复-常用参数详解" aria-label="Permalink to “五、定制AI的回复？常用参数详解”">​</a></h2><ul><li>Max Tokens：控制生成长度与成本</li><li>Temperature：调整响应的随机性与创造性</li><li>Top_p（Nucleus Sampling）：调整响应的随机性与创造性</li></ul><h3 id="_1、max-tokens参数" tabindex="-1">1、Max Tokens参数 <a class="header-anchor" href="#_1、max-tokens参数" aria-label="Permalink to “1、Max Tokens参数”">​</a></h3><ul><li>理解Max Tokens的作用 <ul><li><code>max_tokens</code> 参数用于控制AI回复所消耗的Token最大值。</li><li>通过限制回复长度，可以有效控制每次API请求的成本上限。</li></ul></li><li>使用Max Tokens的注意事项 <ul><li>模型不会根据该参数调整内容篇幅，而是在达到指定Token数时直接截断。</li><li>如果设置过小，可能导致回答不完整（如句子中断）。</li><li>建议结合提示词（如“请在500字以内回答”）来确保回答完整性。</li></ul></li></ul><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.chat.completions.create(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gpt-3.5-turbo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  messages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;四大文明古国分别有哪些&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  max_tokens</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.choices[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].message.content)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">四大文明古国指的是古代埃及、美索不达米亚、印度河流域和黄河流域四个地区。它们分别是：</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. 埃及文明：位于尼罗河流域，是人类历史上最早的文明之一。埃及文明以母系社</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_2、temperature参数" tabindex="-1">2、Temperature参数 <a class="header-anchor" href="#_2、temperature参数" aria-label="Permalink to “2、Temperature参数”">​</a></h3><ul><li>Temperature的基本概念 <ul><li>取值范围为0到2，默认值为1。</li><li>控制AI回答的随机性和创造性。</li></ul></li><li>不同Temperature值的影响 <ul><li><strong>低值（接近0）</strong>：输出更确定、可预测，多次请求结果相似。</li><li><strong>高值（接近2）</strong>：输出更具随机性和创造性，可能产生出人意料的回答，但也可能偏离逻辑或生成无意义内容。</li></ul></li><li>Temperature的工作原理 <ul><li>改变Token的概率分布： <ul><li>温度低时，概率分布更集中，高概率词被优先选择。</li><li>温度高时，概率分布更平坦，低概率词也有更高机会被选中。</li></ul></li><li>类比物理中的温度：温度越高，粒子运动越随机。</li></ul></li></ul><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.chat.completions.create(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gpt-3.5-turbo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  messages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;四大文明古国分别有哪些&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  max_tokens</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  temperature</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.choices[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].message.content)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">四大文明古国分别是：古代埃及文明、幼发拉底河流域文明古印度同时票角utenberg SouthωEurope Mary理streamsJapan modeling forecast TclwaDavis sidl Kenn nobern</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_3、top-p参数-nucleus-sampling" tabindex="-1">3、Top_p参数（Nucleus Sampling） <a class="header-anchor" href="#_3、top-p参数-nucleus-sampling" aria-label="Permalink to “3、Top_p参数（Nucleus Sampling）”">​</a></h3><ul><li>Top_p的基本概念 <ul><li>取值范围为0到1。</li><li>不改变概率分布，而是从累积概率最高的词中选择一个子集进行采样。</li></ul></li><li>Top_p的工作方式 <ul><li>例如，<code>top_p=0.4</code> 表示只考虑累积概率≥40%的最可能词组。</li><li><code>top_p=1</code> 表示不限制，所有词都可选。</li></ul></li><li>Temperature与Top_p的使用建议 <ul><li>两者都能控制输出的多样性，但机制不同。</li><li>OpenAI官方建议：<strong>不要同时调整这两个参数</strong>，只修改其中一个即可。</li></ul></li></ul><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.chat.completions.create(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gpt-3.5-turbo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  messages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;四大文明古国分别有哪些&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  max_tokens</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  top_p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.choices[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].message.content)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">四大文明古国是指古埃及、古巴比伦、古印度和古中国。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_4、参数选择策略" tabindex="-1">4、参数选择策略 <a class="header-anchor" href="#_4、参数选择策略" aria-label="Permalink to “4、参数选择策略”">​</a></h3><ul><li>何时使用低Temperature <ul><li>需要稳定、一致输出的任务，如问答系统、事实性回复。</li></ul></li><li>何时使用高Temperature或Top_p <ul><li>创意写作、头脑风暴、故事生成等需要多样性的场景。</li></ul></li><li>成本与质量的平衡 <ul><li>结合<code>max_tokens</code>和提示词设计，既能控制成本，又能获得高质量输出。</li></ul></li></ul><h2 id="六、定制ai的回复-更多常用参数详解" tabindex="-1">六、定制AI的回复？更多常用参数详解 <a class="header-anchor" href="#六、定制ai的回复-更多常用参数详解" aria-label="Permalink to “六、定制AI的回复？更多常用参数详解”">​</a></h2><h3 id="_1、frequency-penalty-频率惩罚" tabindex="-1">1、Frequency Penalty（频率惩罚） <a class="header-anchor" href="#_1、frequency-penalty-频率惩罚" aria-label="Permalink to “1、Frequency Penalty（频率惩罚）”">​</a></h3><ul><li>Frequency Penalty的基本概念 <ul><li>取值范围为-2到2，默认值为0。</li><li>用于惩罚在已生成文本中频繁出现的词汇，降低其再次被选中的概率。</li></ul></li><li>工作原理与效果 <ul><li>值为正时，模型会倾向于避免重复使用高频率词，增加文本多样性。</li><li>值为0时，不对重复词进行任何惩罚，模型按原始概率分布选择下一个词。</li><li>值过高可能导致不自然的表达（如标点符号频繁切换）。</li></ul></li><li>实际应用建议 <ul><li>适用于需要丰富多变输出的场景，如创意写作、故事生成。</li><li>一般建议设置在0到1之间，避免过度惩罚导致语义混乱。</li></ul></li></ul><p>frequency_penalty为负数</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.chat.completions.create(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gpt-3.5-turbo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  messages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;生成一个购物清单，包含至少20个物品，每个物品之间用逗号进行分隔，例如：苹果，香蕉，牛奶&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  max_tokens</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  frequency_penalty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.choices[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].message.content)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">苹果，香蕉，牛奶，面包，鸡蛋，洗发水，牛肉，蛋糕，薯片，咖啡，牛，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，，</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>frequency_penalty为正数</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.chat.completions.create(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gpt-3.5-turbo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  messages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;生成一个购物清单，包含至少20个物品，每个物品之间用逗号进行分隔，例如：苹果，香蕉，牛奶&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  max_tokens</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  frequency_penalty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.choices[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].message.content)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">苹果，香蕉，牛奶，面包，鸡蛋，咖啡豆，洗发水，</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">肥皂, 面巾纸, 茶叶, 巧克力, 红酒,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">玉米片, 米饭, 电视机,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">手表 ,手机 ,笔记本电脑 ,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">运动裤 ，T恤衫</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="_2、presence-penalty-存在惩罚" tabindex="-1">2、Presence Penalty（存在惩罚） <a class="header-anchor" href="#_2、presence-penalty-存在惩罚" aria-label="Permalink to “2、Presence Penalty（存在惩罚）”">​</a></h3><ul><li>Presence Penalty的基本概念 <ul><li>取值范围同样为-2到2，默认值为0。</li><li>与Frequency Penalty类似，但机制不同。</li></ul></li><li>与Frequency Penalty的区别 <ul><li><strong>Frequency Penalty</strong>：根据词的出现<strong>频率</strong>进行惩罚，出现越多次，惩罚越重。</li><li><strong>Presence Penalty</strong>：只关心词是否<strong>出现过</strong>，一旦出现就降低其后续概率，不考虑具体次数。</li></ul></li><li>结合使用策略 <ul><li>提高<code>presence_penalty</code>可减少整体重复内容，鼓励引入新词。</li><li>提高<code>frequency_penalty</code>可防止某些高频词反复出现。</li><li>两者可结合使用以精细控制文本的多样性和连贯性。</li></ul></li></ul><h3 id="_3、实用工具推荐-openai-api-playground" tabindex="-1">3、实用工具推荐：OpenAI API Playground <a class="header-anchor" href="#_3、实用工具推荐-openai-api-playground" aria-label="Permalink to “3、实用工具推荐：OpenAI API Playground”">​</a></h3><blockquote><p><a href="https://platform.openai.com/playround" target="_blank" rel="noreferrer">https://platform.openai.com/playround</a></p></blockquote><p>API Playground的功能与优势</p><ul><li>无需编码的参数实验平台 <ul><li>提供可视化界面，支持调整模型、temperature、max_tokens、top_p、frequency_penalty、presence_penalty等所有关键参数。</li><li>实时查看AI响应，快速测试不同配置的效果。</li></ul></li><li>重要注意事项 <ul><li>所有操作均通过API执行，<strong>会消耗账户的Token配额</strong>，并非免费试玩工具。</li></ul></li><li>View Code功能——开发者的福音 <ul><li>点击右上角“View Code”按钮，可自动生成当前设置对应的API调用代码。</li><li>支持直接复制代码片段，无缝集成到Python或其他编程环境中，极大提升开发效率。</li></ul></li></ul>`,97)])])}const g=i(e,[["render",p]]);export{o as __pageData,g as default};
