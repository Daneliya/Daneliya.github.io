import{_ as i,c as a,o as n,ah as e}from"./chunks/framework.D5cOWG0Y.js";const c=JSON.parse('{"title":"Python发送HTTP请求","description":"","frontmatter":{"title":"Python发送HTTP请求","tags":["Python"],"categories":["Python"]},"headers":[],"relativePath":"Python/爬虫/2_Python发送HTTP请求.md","filePath":"Python/爬虫/2_Python发送HTTP请求.md","lastUpdated":1757350003000}'),l={name:"Python/爬虫/2_Python发送HTTP请求.md"};function t(h,s,r,p,d,k){return n(),a("div",null,[...s[0]||(s[0]=[e(`<h2 id="一、什么是http请求和响应" tabindex="-1">一、什么是HTTP请求和响应 <a class="header-anchor" href="#一、什么是http请求和响应" aria-label="Permalink to “一、什么是HTTP请求和响应”">​</a></h2><p>HTTP（Hypertext Transfer Protocol，超文本传输协议）是客户端与服务器之间的请求 - 响应协议，是爬虫获取网页内容的底层原理。以下详细解析 HTTP 的请求、响应结构及核心概念：</p><h3 id="_1、http-请求-客户端向服务器发送的-指令" tabindex="-1">1、HTTP 请求：客户端向服务器发送的 “指令” <a class="header-anchor" href="#_1、http-请求-客户端向服务器发送的-指令" aria-label="Permalink to “1、HTTP 请求：客户端向服务器发送的 “指令””">​</a></h3><p>HTTP 请求是客户端（如浏览器、爬虫）向服务器获取数据或提交信息的 “命令”，由<strong>请求行</strong>、<strong>请求头</strong>、<strong>请求体</strong>三部分组成。</p><h4 id="_1-1-常见请求方法" tabindex="-1">1.1. 常见请求方法 <a class="header-anchor" href="#_1-1-常见请求方法" aria-label="Permalink to “1.1. 常见请求方法”">​</a></h4><ul><li><strong>GET</strong>：主要用于<strong>获取数据</strong>（如访问网页、查询信息），是爬虫最常用的方法。</li><li><strong>POST</strong>：主要用于<strong>提交数据</strong>（如注册表单、登录信息），数据存放在请求体中。</li></ul><h4 id="_1-2-请求的组成部分" tabindex="-1">1.2. 请求的组成部分 <a class="header-anchor" href="#_1-2-请求的组成部分" aria-label="Permalink to “1.2. 请求的组成部分”">​</a></h4><h5 id="_1-请求行" tabindex="-1">（1）请求行 <a class="header-anchor" href="#_1-请求行" aria-label="Permalink to “（1）请求行”">​</a></h5><p>包含<strong>请求方法</strong>、<strong>资源路径</strong>、<strong>协议版本</strong>，格式如下： <code>方法类型 资源路径 协议版本</code></p><ul><li><strong>资源路径</strong>：指定服务器上的目标资源（如<code>/movie/top250</code>），可包含查询参数（<code>?key=value&amp;key2=value2</code>），用于传递额外信息（如分页：<code>?start=75</code>表示从第 75 条数据开始）。</li><li><strong>协议版本</strong>：如<code>HTTP/1.1</code>（当前主流版本）。</li></ul><p>示例： <code>GET /movie/top250?start=75 HTTP/1.1</code></p><h5 id="_2-请求头" tabindex="-1">（2）请求头 <a class="header-anchor" href="#_2-请求头" aria-label="Permalink to “（2）请求头”">​</a></h5><p>包含客户端向服务器传递的附加信息，常见字段：</p><ul><li><code>Host</code>：主机域名（如<code>movie.douban.com</code>），结合资源路径构成完整 URL。</li><li><code>User-Agent</code>：客户端标识（如浏览器类型、版本，爬虫需模拟浏览器标识以避免被拦截）。</li><li><code>Accept</code>：客户端可接收的响应数据类型（如<code>text/html,application/json</code>，<code>*/*</code>表示任意类型）。</li></ul><h5 id="_3-请求体" tabindex="-1">（3）请求体 <a class="header-anchor" href="#_3-请求体" aria-label="Permalink to “（3）请求体”">​</a></h5><p>客户端向服务器提交的额外数据（如表单内容），<strong>GET 方法的请求体通常为空</strong>，POST 方法会在此处携带数据。</p><h3 id="_2、http-响应-服务器给客户端的-回复" tabindex="-1">2、HTTP 响应：服务器给客户端的 “回复” <a class="header-anchor" href="#_2、http-响应-服务器给客户端的-回复" aria-label="Permalink to “2、HTTP 响应：服务器给客户端的 “回复””">​</a></h3><p>服务器接收请求后，会返回 HTTP 响应，包含<strong>状态行</strong>、<strong>响应头</strong>、<strong>响应体</strong>三部分。</p><h4 id="_2-1-响应的组成部分" tabindex="-1">2.1. 响应的组成部分 <a class="header-anchor" href="#_2-1-响应的组成部分" aria-label="Permalink to “2.1. 响应的组成部分”">​</a></h4><h5 id="_1-状态行" tabindex="-1">（1）状态行 <a class="header-anchor" href="#_1-状态行" aria-label="Permalink to “（1）状态行”">​</a></h5><p>包含<strong>协议版本</strong>、<strong>状态码</strong>、<strong>状态消息</strong>，格式如下： <code>协议版本 状态码 状态消息</code></p><ul><li>状态码：表示请求处理结果，分为 5 类： <ul><li><code>2xx</code>（成功）：如<code>200 OK</code>（请求成功）。</li><li><code>3xx</code>（重定向）：如<code>302 Found</code>（资源临时迁移）。</li><li><code>4xx</code>（客户端错误）：如<code>404 Not Found</code>（资源不存在）、<code>403 Forbidden</code>（拒绝访问）。</li><li><code>5xx</code>（服务器错误）：如<code>500 Internal Server Error</code>（服务器故障）。</li></ul></li></ul><h5 id="_2-响应头" tabindex="-1">（2）响应头 <a class="header-anchor" href="#_2-响应头" aria-label="Permalink to “（2）响应头”">​</a></h5><p>服务器向客户端传递的附加信息，常见字段：</p><ul><li><code>Date</code>：响应生成的时间。</li><li><code>Content-Type</code>：响应体的数据类型及编码（如<code>text/html; charset=utf-8</code>表示 HTML 内容，编码为 UTF-8）。</li></ul><h5 id="_3-响应体" tabindex="-1">（3）响应体 <a class="header-anchor" href="#_3-响应体" aria-label="Permalink to “（3）响应体”">​</a></h5><p>服务器返回的核心数据，爬虫的目标内容通常在此处：</p><ul><li>若<code>Content-Type</code>为<code>text/html</code>，响应体是 HTML 代码（包含网页结构和内容）。</li><li>若为<code>application/json</code>，响应体是 JSON 格式数据（常见于 API 接口）。</li></ul><h3 id="_3、总结" tabindex="-1">3、总结 <a class="header-anchor" href="#_3、总结" aria-label="Permalink to “3、总结”">​</a></h3><p>HTTP 请求与响应是爬虫获取数据的基础：</p><ul><li>爬虫通过发送<strong>GET 请求</strong>向服务器索取网页内容；</li><li>服务器通过<strong>响应体</strong>返回 HTML 等数据，爬虫解析后提取目标信息。</li></ul><h2 id="二、如何用python发送请求" tabindex="-1">二、如何用Python发送请求 <a class="header-anchor" href="#二、如何用python发送请求" aria-label="Permalink to “二、如何用Python发送请求”">​</a></h2><p>requests 库是 Python 中发送 HTTP 请求的常用工具，能简洁高效地实现网页内容获取。以下是其安装方法、基础用法及实用技巧：</p><h3 id="_1、安装-requests-库" tabindex="-1">1、安装 requests 库 <a class="header-anchor" href="#_1、安装-requests-库" aria-label="Permalink to “1、安装 requests 库”">​</a></h3><p>requests 是第三方库，需先安装：</p><p><strong>Windows</strong>：在终端输入</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requests</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>macOS/Linux</strong>：通常使用</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requests</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>验证安装</strong>： 若终端显示<code>Successfully installed requests</code>，或<code>Requirements already satisfied</code>（已安装），则安装成功。 若提示 “找不到 pip”，需先按<a href="https://pip.pypa.io/en/stable/installation/" target="_blank" rel="noreferrer">官方指引</a>安装 pip 工具。</p><h3 id="_2、基础用法-发送-get-请求获取网页内容" tabindex="-1">2、基础用法：发送 GET 请求获取网页内容 <a class="header-anchor" href="#_2、基础用法-发送-get-请求获取网页内容" aria-label="Permalink to “2、基础用法：发送 GET 请求获取网页内容”">​</a></h3><h4 id="_2-1-引入库并发送请求" tabindex="-1">2.1. 引入库并发送请求 <a class="header-anchor" href="#_2-1-引入库并发送请求" aria-label="Permalink to “2.1. 引入库并发送请求”">​</a></h4><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 发送GET请求（需传入完整URL，包含http/https协议）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;http://books.toscrape.com&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 练习爬虫的测试网站</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> requests.get(url)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_2-2-处理响应结果" tabindex="-1">2.2. 处理响应结果 <a class="header-anchor" href="#_2-2-处理响应结果" aria-label="Permalink to “2.2. 处理响应结果”">​</a></h4><h5 id="_1-判断请求是否成功" tabindex="-1">（1）判断请求是否成功 <a class="header-anchor" href="#_1-判断请求是否成功" aria-label="Permalink to “（1）判断请求是否成功”">​</a></h5><ul><li><p><strong>状态码（status_code）</strong>：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.status_code)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 200表示成功，404表示资源不存在</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>简化判断（ok 属性）</strong>：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.ok:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;请求成功&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;请求失败&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h5 id="_2-获取响应体内容" tabindex="-1">（2）获取响应体内容 <a class="header-anchor" href="#_2-获取响应体内容" aria-label="Permalink to “（2）获取响应体内容”">​</a></h5><p>响应体（网页原始代码）通过<code>text</code>属性获取（以字符串形式返回）：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.ok:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    html_content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.text  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 存储网页HTML代码</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(html_content)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打印原始内容（后续将解析这些内容）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_3、进阶技巧-自定义请求头-headers" tabindex="-1">3、进阶技巧：自定义请求头（headers） <a class="header-anchor" href="#_3、进阶技巧-自定义请求头-headers" aria-label="Permalink to “3、进阶技巧：自定义请求头（headers）”">​</a></h3><p>requests 会自动生成默认请求头，但部分网站会通过<code>User-Agent</code>识别请求来源（区分浏览器与爬虫）。如需伪装成浏览器，可自定义请求头：</p><h4 id="示例-设置-user-agent" tabindex="-1">示例：设置 User-Agent <a class="header-anchor" href="#示例-设置-user-agent" aria-label="Permalink to “示例：设置 User-Agent”">​</a></h4><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;http://books.toscrape.com&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 自定义请求头：模拟Chrome浏览器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">headers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;User-Agent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 发送带自定义头的请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> requests.get(url, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">headers)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.ok:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;伪装浏览器请求成功&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>作用</strong>：避免网站因识别到爬虫而拒绝请求（反爬机制的基础应对方法）。</p><h2 id="三、练习用python拿到豆瓣源码" tabindex="-1">三、练习用Python拿到豆瓣源码 <a class="header-anchor" href="#三、练习用python拿到豆瓣源码" aria-label="Permalink to “三、练习用Python拿到豆瓣源码”">​</a></h2><p>通过 requests 库发送 GET 请求获取豆瓣电影 Top250 的网页源码，是爬虫实战的典型案例。以下是具体步骤及解决反爬问题的方法：</p><h3 id="_1、准备工作-安装与引入-requests-库" tabindex="-1">1、准备工作：安装与引入 requests 库 <a class="header-anchor" href="#_1、准备工作-安装与引入-requests-库" aria-label="Permalink to “1、准备工作：安装与引入 requests 库”">​</a></h3><ol><li><p><strong>安装 requests</strong>：在编辑器终端执行以下命令（Windows 用<code>pip</code>，macOS/Linux 用<code>pip3</code>）：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requests</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>若显示<code>Successfully installed requests</code>，则安装成功。</p></li><li><p><strong>引入库</strong>：新建 Python 文件（如<code>scrape_douban.py</code>），开头导入 requests：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> requests</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><h3 id="_2、发送请求-初始尝试与问题" tabindex="-1">2、发送请求：初始尝试与问题 <a class="header-anchor" href="#_2、发送请求-初始尝试与问题" aria-label="Permalink to “2、发送请求：初始尝试与问题”">​</a></h3><h4 id="_2-1-发送基础-get-请求" tabindex="-1">2.1. 发送基础 GET 请求 <a class="header-anchor" href="#_2-1-发送基础-get-请求" aria-label="Permalink to “2.1. 发送基础 GET 请求”">​</a></h4><p>目标 URL：豆瓣电影 Top250 首页（<code>https://movie.douban.com/top250</code>）</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://movie.douban.com/top250&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> requests.get(url)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 发送GET请求</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看状态码</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;状态码：&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, response.status_code)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_2-2-遇到反爬-418-状态码" tabindex="-1">2.2. 遇到反爬：418 状态码 <a class="header-anchor" href="#_2-2-遇到反爬-418-状态码" aria-label="Permalink to “2.2. 遇到反爬：418 状态码”">​</a></h4><p>运行后可能返回状态码<code>418</code>（“我是一个茶壶”），这是豆瓣的反爬机制 —— 通过识别请求来源（非浏览器）拒绝服务。</p><h3 id="_3、解决反爬-伪装成浏览器请求" tabindex="-1">3、解决反爬：伪装成浏览器请求 <a class="header-anchor" href="#_3、解决反爬-伪装成浏览器请求" aria-label="Permalink to “3、解决反爬：伪装成浏览器请求”">​</a></h3><p>通过自定义请求头（<code>headers</code>）中的<code>User-Agent</code>，将爬虫伪装成浏览器：</p><h4 id="_3-1-获取浏览器的-user-agent" tabindex="-1">3.1. 获取浏览器的 User-Agent <a class="header-anchor" href="#_3-1-获取浏览器的-user-agent" aria-label="Permalink to “3.1. 获取浏览器的 User-Agent”">​</a></h4><ul><li>打开任意网页，右键→“检查”→进入 “Network” 面板；</li><li>刷新网页，点击任意请求→展开 “Request Headers”→复制<code>User-Agent</code>的值（如浏览器类型、版本信息）。 示例： <code>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36</code></li></ul><h4 id="_3-2-自定义请求头发送请求" tabindex="-1">3.2. 自定义请求头发送请求 <a class="header-anchor" href="#_3-2-自定义请求头发送请求" aria-label="Permalink to “3.2. 自定义请求头发送请求”">​</a></h4><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://movie.douban.com/top250&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 自定义请求头，模拟浏览器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">headers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;User-Agent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 传入headers参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> requests.get(url, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">headers)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 验证请求是否成功</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.ok:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;请求成功！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 获取网页源码（HTML）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    html_content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.text</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(html_content)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打印源码（后续将解析）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;请求失败，状态码：&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, response.status_code)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="_4、关键说明" tabindex="-1">4、关键说明 <a class="header-anchor" href="#_4、关键说明" aria-label="Permalink to “4、关键说明”">​</a></h3><ul><li><strong>状态码判断</strong>：<code>response.ok</code>为<code>True</code>表示请求成功（状态码 200-299），无需手动判断具体数值。</li><li><strong>响应体内容</strong>：<code>response.text</code>以字符串形式返回网页源码（HTML），是后续解析数据的基础。</li><li><strong>反爬应对</strong>：<code>User-Agent</code>是最基础的反爬绕过方法，复杂网站可能需要更多策略（如 Cookie、IP 代理等）。</li></ul>`,72)])])}const g=i(l,[["render",t]]);export{c as __pageData,g as default};
