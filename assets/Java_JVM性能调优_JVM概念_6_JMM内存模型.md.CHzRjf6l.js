import{_ as l,c as e,o as i,ah as r,aK as t}from"./chunks/framework.D5cOWG0Y.js";const _=JSON.parse('{"title":"JMM内存模型","description":"","frontmatter":{"title":"JMM内存模型","date":"2023-11-26","tags":["JVM"],"categories":["JVM"]},"headers":[],"relativePath":"Java/JVM性能调优/JVM概念/6_JMM内存模型.md","filePath":"Java/JVM性能调优/JVM概念/6_JMM内存模型.md","lastUpdated":1755802517000}'),o={name:"Java/JVM性能调优/JVM概念/6_JMM内存模型.md"};function s(n,a,d,h,c,M){return i(),e("div",null,[...a[0]||(a[0]=[r('<h2 id="jmm是什么" tabindex="-1">JMM是什么 <a class="header-anchor" href="#jmm是什么" aria-label="Permalink to “JMM是什么”">​</a></h2><p>JMM（Java Memory Model），Java的内存模型。</p><h2 id="jmm的作用" tabindex="-1">JMM的作用 <a class="header-anchor" href="#jmm的作用" aria-label="Permalink to “JMM的作用”">​</a></h2><p>缓存一致性的协议，用来定义数据读写的规则。</p><p>JMM定义了线程工作内存和主内存的抽象关系：线程的共享变量存储在主内存中，每个线程都有一个私有的本地工作内存。</p><p>使用volatile关键字来解决共享变量的可见性的问题。</p><p>Java内存模型是围绕着并发编程中<strong>原子性、可见性、有序性</strong>这三个特征来建立的。</p><h2 id="jmm的操作" tabindex="-1">JMM的操作 <a class="header-anchor" href="#jmm的操作" aria-label="Permalink to “JMM的操作”">​</a></h2><p><img src="'+t+'" alt="img" loading="lazy"></p><h3 id="jmm定义了8种操作来完成-每一种操作都是原子的、不可再拆分的-。" tabindex="-1">JMM定义了8种操作来完成（每一种操作都是原子的、不可再拆分的）。 <a class="header-anchor" href="#jmm定义了8种操作来完成-每一种操作都是原子的、不可再拆分的-。" aria-label="Permalink to “JMM定义了8种操作来完成（每一种操作都是原子的、不可再拆分的）。”">​</a></h3><ul><li>lock（锁定）：作用于主内存的变量，它把一个变量标识为一条线程独占的状态。</li><li>unlock（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</li><li>read（读取）：作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用。</li><li>load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。</li><li>use（使用）：作用于工作内存的变量，它把工作内存中一个变量的值传递给执行引擎（每当虚拟机遇到一个需要使用到该变量的值的字节码指令时将会执行这个操作）。</li><li>assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋给工作内存的变量（每当虚拟机遇到一个给该变量赋值的字节码指令时执行这个操作）。</li><li>store（存储）：作用于工作内存的变量，它把工作内存中一个变量的值传送到主内存中，以便随后的write操作使用。</li><li>write（写入）：作用于主内存的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中。</li></ul><h2 id="jmm定义的规则" tabindex="-1">JMM定义的规则 <a class="header-anchor" href="#jmm定义的规则" aria-label="Permalink to “JMM定义的规则”">​</a></h2><h3 id="_8种操作必须满足的规则" tabindex="-1">8种操作必须满足的规则： <a class="header-anchor" href="#_8种操作必须满足的规则" aria-label="Permalink to “8种操作必须满足的规则：”">​</a></h3><ul><li>不允许read和load、store和write操作之一单独出现。（不允许一个变量从主内存读取了但工作内存不接受；或者从工作内存发起回写了但主内存不接受的情况出现）</li><li>不允许一个线程丢弃它的最近的assign操作。（变量在工作内存中改变了值之后，必须把该变化同步回主内存）</li><li>不允许一个线程无原因地（没有发生过任何assign操作）把数据从线程的工作内存同步回主内存。</li><li>一个新的变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量。（就是对一个变量实施use、store操作之前，必须先执行过了load和assign操作）</li><li>一个变量在同一时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。</li><li>如果对一个变量执行lock操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load或assign操作初始化变量的值。</li><li>如果一个变量事先没有被lock操作锁定，那就不允许对它执行unlock操作，也不允许去unlock一个被其他线程锁定住的变量。</li><li>对一个变量执行unlock操作之前，必须先把此变量同步回主内存中（执行store、write操作）。</li></ul><h2 id="并发编程的三大特性" tabindex="-1">并发编程的三大特性 <a class="header-anchor" href="#并发编程的三大特性" aria-label="Permalink to “并发编程的三大特性”">​</a></h2><h3 id="原子性" tabindex="-1">原子性 <a class="header-anchor" href="#原子性" aria-label="Permalink to “原子性”">​</a></h3><p>一个或多个程序指令，要么全部正确执行完毕不能被打断，或者全部不执行</p><h3 id="可见性" tabindex="-1">可见性 <a class="header-anchor" href="#可见性" aria-label="Permalink to “可见性”">​</a></h3><p>当一个线程修改了某个共享变量的值，其它线程应当能够立即看到修改后的值。</p><h3 id="有序性" tabindex="-1">有序性 <a class="header-anchor" href="#有序性" aria-label="Permalink to “有序性”">​</a></h3><p>程序执行代码指令的顺序应当保证按照程序指定的顺序执行，即便是编译优化，也应当保证程序源语一致。</p>',21)])])}const J=l(o,[["render",s]]);export{_ as __pageData,J as default};
