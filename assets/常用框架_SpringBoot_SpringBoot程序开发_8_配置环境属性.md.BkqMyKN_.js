import{_ as i,c as a,o as e,ah as p}from"./chunks/framework.D5cOWG0Y.js";const k=JSON.parse('{"title":"配置环境属性","description":"","frontmatter":{"title":"配置环境属性","tags":["SpringBoot"],"categories":["SpringBoot"]},"headers":[],"relativePath":"常用框架/SpringBoot/SpringBoot程序开发/8_配置环境属性.md","filePath":"常用框架/SpringBoot/SpringBoot程序开发/8_配置环境属性.md","lastUpdated":1756054686000}'),n={name:"常用框架/SpringBoot/SpringBoot程序开发/8_配置环境属性.md"};function t(r,s,l,o,h,c){return e(),a("div",null,[...s[0]||(s[0]=[p(`<h2 id="一、properties配置" tabindex="-1">一、properties配置 <a class="header-anchor" href="#一、properties配置" aria-label="Permalink to “一、properties配置”">​</a></h2><p>SpringBoot提倡的是一种“零配置”的设计框架，所以提供有许多默认的配置项。例如，SpringBoot项目默认运行的8080端口就是一种默认配置。如果开发者需要修改SpringBoot的这种默认配置，可以在项目所在的CLASSPATH下添加<code>application.properties</code>配置文件。</p><p>建立一个新的源文件目录<code>src/main/resources</code></p><p>在<code>src/main/resources</code>源文件目录中建立<code>application.properties</code>配置文件</p><blockquote><p><strong>注意：配置文件名称要相同。</strong></p><p>SpringBoot开发框架对一些结构（子包扫描）和配置文件（application.properties）做出了限定，这样开发者在使用框架开发的时候可以减少配置。如果开发者定义的配置文件名称不是application.properties，那么SpringBoot将无法加载。</p></blockquote><h2 id="二、端口修改" tabindex="-1">二、端口修改 <a class="header-anchor" href="#二、端口修改" aria-label="Permalink to “二、端口修改”">​</a></h2><p>在配置中进行SpringBoot项目默认端口的变更，将其修改为80端口运行。</p><div class="language-properties line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置运行服务所在端口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server.port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=80</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>修改完成后重新启动SpringBoot项目（使用的是Tomcat容器），可以看到提示信息：Tomcat started on port(s): 80 (http)，表示当前的项目可以直接运行在80端口上。</p><h2 id="三、配置上下文路径" tabindex="-1">三、配置上下文路径 <a class="header-anchor" href="#三、配置上下文路径" aria-label="Permalink to “三、配置上下文路径”">​</a></h2><p>SpringBoot项目默认情况下会将程序发布在根目录下，如果有需要，也可以配置上下文路径（ContextPath）。</p><div class="language-properties line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置运行服务所在端口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server.port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=80</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 配置ContextPath访问路径，实际开发中一般不进行配置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server.servlet.context-path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=/xxl</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>追加了一个<code>context-path</code>配置，所以项目的访问路径为</p><p><a href="http://localhost/xxl/%EF%BC%88%E8%BF%BD%E5%8A%A0%E4%BA%86/xxl%E7%9A%84%E8%B7%AF%E5%BE%84%E5%89%8D%E7%BC%80%EF%BC%89" target="_blank" rel="noreferrer">http://localhost/xxl/（追加了/xxl的路径前缀）</a></p><h2 id="四、yml配置" tabindex="-1">四、yml配置 <a class="header-anchor" href="#四、yml配置" aria-label="Permalink to “四、yml配置”">​</a></h2><p>在SpringBoot中可以使用的配置文件类型有两种：<code>application.properties</code>和<code>application.yml</code>，这两种配置文件都可以实现对SpringBoot环境的修改。下面将<code>application. properties</code>配置替换为<code>application.yml</code>，内容如下：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 设置运行服务所在端口</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  servlet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    context-path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/xxl</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 定义ContextPath访问路径</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>使用<code>application.yml</code>配置文件的结构要比使用<code>application.properties</code>更加清晰</p><blockquote><p><strong>提示：关于yml配置文件说明。</strong></p><p>yml实际上是YAML（Yet Another Markup Languange，一种标记语言）文件，这是一种结构化的数据文件，大量应用在各种开源项目之中，如Apache Storm。</p><p>Spring官方推荐使用application.yml来进行SpringBoot或SpringCloud框架的配置定义。如果项目中同时存在application.yml与application.properties配置文件并且配置冲突，将以application.properties文件中的配置为参考。</p></blockquote>`,19)])])}const g=i(n,[["render",t]]);export{k as __pageData,g as default};
