import{_ as i,c as a,o as e,ah as n}from"./chunks/framework.D5cOWG0Y.js";const g=JSON.parse('{"title":"AI模型与输入输出","description":"","frontmatter":{"title":"AI模型与输入输出","tags":["Python"],"categories":["Python"]},"headers":[],"relativePath":"Python/AI大模型应用开发/6_AI模型与输入输出.md","filePath":"Python/AI大模型应用开发/6_AI模型与输入输出.md","lastUpdated":1755802517000}'),l={name:"Python/AI大模型应用开发/6_AI模型与输入输出.md"};function t(h,s,p,r,k,d){return e(),a("div",null,[...s[0]||(s[0]=[n(`<h2 id="一、model—玩转open-ai聊天模型" tabindex="-1">一、Model—玩转Open AI聊天模型 <a class="header-anchor" href="#一、model—玩转open-ai聊天模型" aria-label="Permalink to “一、Model—玩转Open AI聊天模型”">​</a></h2><h3 id="_1、模型-model-ai应用的核心" tabindex="-1">1、模型（Model）：AI应用的核心 <a class="header-anchor" href="#_1、模型-model-ai应用的核心" aria-label="Permalink to “1、模型（Model）：AI应用的核心”">​</a></h3><p>模型是AI应用的核心，负责提供语言的理解和生成能力。LangChain的设计允许开发者集成多种不同的大语言模型（LLM），提供了极大的灵活性。</p><p>LangChain主要将模型分为两大类：</p><ol><li><strong>LLM (Language Model - 语言模型)</strong><ul><li><strong>功能</strong>：本质上是<strong>文本补全</strong>模型。它接收一段文本，预测并生成接下来最可能的文本。</li><li><strong>接口</strong>：通常接收一个<strong>字符串</strong>作为输入，并返回一个<strong>字符串</strong>作为输出。</li></ul></li><li><strong>ChatModel (聊天模型)</strong><ul><li><strong>功能</strong>：是在对话数据上进行过专门<strong>调优</strong>的模型，更擅长处理多轮对话和理解对话历史。</li><li><strong>接口</strong>：接收一个<strong>消息列表</strong>（Message List）作为输入，并返回一个<strong>消息</strong>（Message）作为输出。</li><li><strong>优势</strong>：当前，ChatModel 通常是比基础 LLM 更先进和更实用的选择，因为它在对话任务上表现更好，能显著提升用户体验。</li></ul></li></ol><blockquote><p><strong>注意</strong>：我们熟悉的 GPT-3.5-turbo、GPT-4 等都属于 <strong>ChatModel</strong>。</p></blockquote><h3 id="_2、使用langchain调用openai聊天模型" tabindex="-1">2、使用LangChain调用OpenAI聊天模型 <a class="header-anchor" href="#_2、使用langchain调用openai聊天模型" aria-label="Permalink to “2、使用LangChain调用OpenAI聊天模型”">​</a></h3><p>以OpenAI的聊天模型为例，通过LangChain获取模型回复。</p><h4 id="第一步-安装依赖" tabindex="-1">第一步：安装依赖 <a class="header-anchor" href="#第一步-安装依赖" aria-label="Permalink to “第一步：安装依赖”">​</a></h4><p>首先，需要安装LangChain与OpenAI集成的专用库。</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> langchain-openai</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="第二步-导入并创建模型实例" tabindex="-1">第二步：导入并创建模型实例 <a class="header-anchor" href="#第二步-导入并创建模型实例" aria-label="Permalink to “第二步：导入并创建模型实例”">​</a></h4><ol><li><p><strong>导入模块</strong>： 从 <code>langchain_openai</code> 库中导入 <code>ChatOpenAI</code> 类。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> langchain_openai </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChatOpenAI</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>创建实例</strong>： 创建一个 <code>ChatOpenAI</code> 的实例。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 假设你的OpenAI API密钥已设置在环境变量中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChatOpenAI(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gpt-3.5-turbo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定模型，如 gpt-3.5-turbo, gpt-4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ol><h4 id="第三步-配置模型参数" tabindex="-1">第三步：配置模型参数 <a class="header-anchor" href="#第三步-配置模型参数" aria-label="Permalink to “第三步：配置模型参数”">​</a></h4><p>在创建实例时，可以配置多种参数来控制模型的行为：</p><ul><li><p>常用参数（可直接作为构造函数参数）：</p><ul><li><code>temperature</code>：控制输出的随机性。值越高，输出越随机、有创意；值越低，输出越确定、保守。</li><li><code>max_tokens</code>：限制模型生成的最大token数量。</li></ul></li><li><p>其他参数（可通过model_kwargs字典传入）：</p><ul><li>例如 <code>frequency_penalty</code>（频率惩罚）、<code>presence_penalty</code>（存在惩罚）等不那么常用的参数。</li></ul><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChatOpenAI(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gpt-3.5-turbo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    temperature</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    max_tokens</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    model_kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;frequency_penalty&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 其他参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><blockquote><p><strong>提示</strong>：如果未将API密钥存入环境变量，可以在创建实例时通过 <code>api_key</code> 参数直接传入。</p></blockquote><h3 id="_3、构建消息列表-message-list" tabindex="-1">3、构建消息列表（Message List） <a class="header-anchor" href="#_3、构建消息列表-message-list" aria-label="Permalink to “3、构建消息列表（Message List）”">​</a></h3><p>由于 <code>ChatModel</code> 接收消息列表作为输入，我们需要了解消息的结构。</p><h4 id="消息类型" tabindex="-1">消息类型 <a class="header-anchor" href="#消息类型" aria-label="Permalink to “消息类型”">​</a></h4><p>消息列表中的消息主要有三种类型：</p><ol><li><strong><code>SystemMessage</code></strong>：系统消息。用于向AI提供指令、设定角色或行为准则。例如：“你是一个乐于助人的助手。”</li><li><strong><code>HumanMessage</code></strong>：人类消息。代表用户输入的对话内容。</li><li><strong><code>AIMessage</code></strong>：AI消息。代表AI之前的回复，用于构建对话历史。</li></ol><h4 id="创建和组合消息" tabindex="-1">创建和组合消息 <a class="header-anchor" href="#创建和组合消息" aria-label="Permalink to “创建和组合消息”">​</a></h4><ol><li><p><strong>导入消息类</strong>：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> langchain_core.messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SystemMessage, HumanMessage</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>创建消息实例</strong>：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">system_message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SystemMessage(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你是一个翻译专家，擅长将英文翻译成中文。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">human_message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HumanMessage(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, how are you?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p><strong>组合成消息列表</strong>：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [system_message, human_message]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><h3 id="_4、调用模型并获取回复" tabindex="-1">4、调用模型并获取回复 <a class="header-anchor" href="#_4、调用模型并获取回复" aria-label="Permalink to “4、调用模型并获取回复”">​</a></h3><p>最后，调用模型的 <code>invoke</code> 方法（或 <code>__call__</code> 方法）来获取回复。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 调用模型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> llm.invoke(messages)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或者 llm(messages)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打印回复</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># response 是一个 AIMessage 对象</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.content)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: 你好，你怎么样？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_5、langchain支持的其他模型" tabindex="-1">5、LangChain支持的其他模型 <a class="header-anchor" href="#_5、langchain支持的其他模型" aria-label="Permalink to “5、LangChain支持的其他模型”">​</a></h3><p>LangChain的 <code>langchain-community</code> 库支持集成来自不同服务商的多种聊天模型。官方文档中列出了丰富的选择，例如：</p><ul><li><strong>百度</strong>：千帆平台提供的 <code>ERNIE-Bot</code> 系列模型。</li><li><strong>腾讯</strong>：<code>混元</code> (HunYuan) 模型。</li><li><strong>阿里</strong>：<code>通义千问</code> (Qwen) 系列模型。</li></ul><p>开发者可以申请相应服务的API密钥，并通过类似的方式集成这些国产大模型，实现模型的灵活切换。</p><h3 id="_6、model使用示例" tabindex="-1">6、Model使用示例 <a class="header-anchor" href="#_6、model使用示例" aria-label="Permalink to “6、Model使用示例”">​</a></h3><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> langchain_openai </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChatOpenAI</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChatOpenAI(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gpt-3.5-turbo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># model = ChatOpenAI(model=&quot;gpt-3.5-turbo&quot;, temperature=1.2, max_tokens=500, model_kwargs={&quot;frequency_penalty&quot;:1.1})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> langchain.schema.messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HumanMessage, SystemMessage</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SystemMessage(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;请你作为我的物理课助教，用通俗易懂且间接的语言帮我解释物理概念。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    HumanMessage(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;什么是波粒二象性？&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> model.invoke(messages)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AIMessage(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;嗨！波粒二象性是一个非常有趣的物理概念。它指的是，微观粒子（比如电子、光子等）既可以表现出波动性，也可以表现出粒子性。</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">让我们以光子为例来说明。光子是光的基本粒子，而光又是一种电磁波。当我们将光通过一个狭缝时，它会呈现出波动的特性，产生干涉和衍射现象，就像波一样。但当我们观察光子通过一个光敏探测器时，我们会发现它们的行为更像是粒子，因为它们只在一个点上被探测到。</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">这就是波粒二象性的精髓所在：微观粒子既可以像波一样传播，又可以像粒子一样被探测到。这种二象性挑战了我们对物质本质的传统观念，但也为我们理解微观世界的奇妙规律提供了新的思路。&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.content)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">嗨！波粒二象性是一个非常有趣的物理概念。它指的是，微观粒子（比如电子、光子等）既可以表现出波动性，也可以表现出粒子性。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">让我们以光子为例来说明。光子是光的基本粒子，而光又是一种电磁波。当我们将光通过一个狭缝时，它会呈现出波动的特性，产生干涉和衍射现象，就像波一样。但当我们观察光子通过一个光敏探测器时，我们会发现它们的行为更像是粒子，因为它们只在一个点上被探测到。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">这就是波粒二象性的精髓所在：微观粒子既可以像波一样传播，又可以像粒子一样被探测到。这种二象性挑战了我们对物质本质的传统观念，但也为我们理解微观世界的奇妙规律提供了新的思路。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="二、prompt-template—让模型的输入超级灵活" tabindex="-1">二、Prompt Template—让模型的输入超级灵活 <a class="header-anchor" href="#二、prompt-template—让模型的输入超级灵活" aria-label="Permalink to “二、Prompt Template—让模型的输入超级灵活”">​</a></h2><h3 id="_1、提示模板的核心优势" tabindex="-1">1、提示模板的核心优势 <a class="header-anchor" href="#_1、提示模板的核心优势" aria-label="Permalink to “1、提示模板的核心优势”">​</a></h3><p>与手动构建提示相比，代码化的提示模板可通过插入变量实现动态调整，能灵活适配不同示例或数据需求，显著提升效率和灵活性。</p><h3 id="_2、聊天模型的提示模板类型" tabindex="-1">2、聊天模型的提示模板类型 <a class="header-anchor" href="#_2、聊天模型的提示模板类型" aria-label="Permalink to “2、聊天模型的提示模板类型”">​</a></h3><p>LangChain 的<code>prompt</code>模块下，针对不同角色的消息提供了专用模板：</p><ol><li><strong>SystemMessagePromptTemplate</strong>：用于系统消息（设定模型行为、背景等）</li><li><strong>HumanMessagePromptTemplate</strong>：用于人类消息（用户输入内容）</li><li><strong>AIMessagePromptTemplate</strong>：用于 AI 消息（模型回复内容）</li></ol><h3 id="_3、提示模板的创建与变量处理" tabindex="-1">3、提示模板的创建与变量处理 <a class="header-anchor" href="#_3、提示模板的创建与变量处理" aria-label="Permalink to “3、提示模板的创建与变量处理”">​</a></h3><ol><li><strong>创建方式</strong>： 所有模板均通过<code>from_template</code>方法创建，传入包含变量的字符串（变量用<code>{}</code>包围）。 示例：<code>SystemMessagePromptTemplate.from_template(&quot;将{input_language}翻译成{output_language}&quot;)</code></li><li><strong>变量识别</strong>： 花括号包围的内容会被自动识别为变量（如<code>input_language</code>、<code>output_language</code>），无需额外声明，可通过模板的<code>input_variables</code>属性查看变量列表。</li></ol><h3 id="_4、变量填充与消息生成" tabindex="-1">4、变量填充与消息生成 <a class="header-anchor" href="#_4、变量填充与消息生成" aria-label="Permalink to “4、变量填充与消息生成”">​</a></h3><ol><li><strong>填充变量</strong>： 用<code>format</code>方法传入变量值，模板会返回对应角色的消息对象： <ul><li>系统消息模板→<code>SystemMessage</code></li><li>人类消息模板→<code>HumanMessage</code></li><li>AI 消息模板→<code>AIMessage</code></li></ul></li><li><strong>获取模型回应</strong>： 将填充后的消息对象放入列表，作为参数传入聊天模型的<code>invoke</code>方法即可。</li></ol><h3 id="_5、简化方案-chatprompttemplate" tabindex="-1">5、简化方案：ChatPromptTemplate <a class="header-anchor" href="#_5、简化方案-chatprompttemplate" aria-label="Permalink to “5、简化方案：ChatPromptTemplate”">​</a></h3><p>若需统一管理多角色消息，可使用<code>ChatPromptTemplate</code>：</p><ol><li><strong>创建方式</strong>：通过<code>from_messages</code>方法接收消息模板列表，每个元素为（角色标识，内容字符串）的元组，角色标识可设为<code>&quot;system&quot;</code>、<code>&quot;human&quot;</code>、<code>&quot;ai&quot;</code>。</li><li><strong>变量填充</strong>：调用<code>invoke</code>方法传入字典（键为变量名，值为变量内容），一次性填充所有角色消息中的变量。</li><li><strong>结果使用</strong>：返回<code>ChatPromptValue</code>对象，包含填充后的完整消息列表，直接传入模型的<code>invoke</code>方法即可获取回应。</li></ol><h3 id="_6、提示模板的核心价值" tabindex="-1">6、提示模板的核心价值 <a class="header-anchor" href="#_6、提示模板的核心价值" aria-label="Permalink to “6、提示模板的核心价值”">​</a></h3><p>对于批量处理不同需求（如多语言翻译、不同风格生成等），无需逐个硬编码提示，只需通过循环为同一模板传入不同变量值，即可高效生成多样化结果，大幅提升开发效率。</p><h3 id="_7、prompt-template使用示例" tabindex="-1">7、Prompt Template使用示例 <a class="header-anchor" href="#_7、prompt-template使用示例" aria-label="Permalink to “7、Prompt Template使用示例”">​</a></h3><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> langchain.prompts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SystemMessagePromptTemplate,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    AIMessagePromptTemplate,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    HumanMessagePromptTemplate,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 提示模板一</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">system_template_text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你是一位专业的翻译，能够将</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{input_language}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">翻译成</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{output_language}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">，并且输出文本会根据用户要求的任何语言风格进行调整。请只输出翻译后的文本，不要有任何其它内容。&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">system_prompt_template </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SystemMessagePromptTemplate.from_template(system_template_text)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">system_prompt_template</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SystemMessagePromptTemplate(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prompt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PromptTemplate(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">input_variables</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;input_language&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;output_language&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;你是一位专业的翻译，能够将</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{input_language}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">翻译成</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{output_language}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">，并且输出文本会根据用户要求的任何语言风格进行调整。请只输出翻译后的文本，不要有任何其它内容。&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">system_prompt_template.input_variables</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;input_language&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;output_language&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 提示模板二</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">human_template_text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;文本：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{text}\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">语言风格：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{style}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">human_prompt_template </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HumanMessagePromptTemplate.from_template(human_template_text)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">human_prompt_template.input_variables</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;style&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">system_prompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> system_prompt_template.format(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">input_language</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;英语&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">output_language</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;汉语&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">system_prompt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SystemMessage(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;你是一位专业的翻译，能够将英语翻译成汉语，并且输出文本会根据用户要求的任何语言风格进行调整。请只输出翻译后的文本，不要有任何其它内容。&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">human_prompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> human_prompt_template.format(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I&#39;m so hungry I could eat a horse&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;文言文&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">human_prompt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HumanMessage(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;文本：I&#39;m so hungry I could eat a horse</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">语言风格：文言文&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> langchain_openai </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChatOpenAI</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChatOpenAI(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gpt-3.5-turbo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> model.invoke([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    system_prompt,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    human_prompt</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.content)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">吾飢甚，能食千里馬。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="三、few-shot-templates—高效往提示里塞示范" tabindex="-1">三、Few Shot Templates—高效往提示里塞示范 <a class="header-anchor" href="#三、few-shot-templates—高效往提示里塞示范" aria-label="Permalink to “三、Few Shot Templates—高效往提示里塞示范”">​</a></h2><h3 id="_1、少样本学习-few-shot-learning" tabindex="-1">1、少样本学习（Few-Shot Learning） <a class="header-anchor" href="#_1、少样本学习-few-shot-learning" aria-label="Permalink to “1、少样本学习（Few-Shot Learning）”">​</a></h3><p>在提示词工程中，<strong>少样本提示（Few-Shot Prompting）</strong> 是一种让AI快速适应新任务的高效方法。</p><ul><li><strong>核心思想</strong>：将几个包含输入（问题）和期望输出（答案）的对话示例（demonstrations）作为上下文，与新的用户提示一起发送给模型。</li><li><strong>优势</strong>：无需对模型进行任何训练，成本低、灵活性高。</li></ul><h3 id="_2、少样本提示的挑战与优化" tabindex="-1">2、少样本提示的挑战与优化 <a class="header-anchor" href="#_2、少样本提示的挑战与优化" aria-label="Permalink to “2、少样本提示的挑战与优化”">​</a></h3><h4 id="_2-1、挑战" tabindex="-1">2.1、挑战 <a class="header-anchor" href="#_2-1、挑战" aria-label="Permalink to “2.1、挑战”">​</a></h4><p>虽然少样本提示非常有效，但当示例数量较多时，手动编写每个示例的完整消息列表会变得繁琐且容易出错。观察示例可以发现，它们的<strong>格式高度相似</strong>，主要区别仅在于具体的输入和输出值。</p><h4 id="_2-2、解决方案-使用模板" tabindex="-1">2.2、解决方案：使用模板 <a class="header-anchor" href="#_2-2、解决方案-使用模板" aria-label="Permalink to “2.2、解决方案：使用模板”">​</a></h4><p>既然示例结构相似，我们就可以利用<strong>提示模板（Prompt Template）</strong> 来动态生成这些示例，从而大大提高效率。</p><h3 id="_3、fewshotchatmessageprompttemplate-少样本提示的利器" tabindex="-1">3、<code>FewShotChatMessagePromptTemplate</code>：少样本提示的利器 <a class="header-anchor" href="#_3、fewshotchatmessageprompttemplate-少样本提示的利器" aria-label="Permalink to “3、FewShotChatMessagePromptTemplate：少样本提示的利器”">​</a></h3><p>LangChain的 <code>langchain_core.prompts</code> 模块提供了一个专门用于构建少样本提示的类：<code>FewShotChatMessagePromptTemplate</code>。</p><h3 id="_1-核心参数" tabindex="-1">1. 核心参数 <a class="header-anchor" href="#_1-核心参数" aria-label="Permalink to “1. 核心参数”">​</a></h3><ul><li><strong><code>example_prompt</code></strong>：一个<strong>提示模板</strong>，用于定义<strong>单个示例</strong>的结构。这个模板可以包含动态变量（用花括号 <code>{}</code> 包围），例如 <code>{input}</code> 和 <code>{output}</code>。</li><li><strong><code>examples</code></strong>：一个<strong>示例列表</strong>，列表中的每个元素都是一个<strong>字典</strong>。字典的<strong>键</strong>对应 <code>example_prompt</code> 模板中的变量名，字典的<strong>值</strong>则是该变量在具体示例中应填充的实际内容。</li></ul><h3 id="_2-使用步骤" tabindex="-1">2. 使用步骤 <a class="header-anchor" href="#_2-使用步骤" aria-label="Permalink to “2. 使用步骤”">​</a></h3><ol><li><p><strong>创建 <code>example_prompt</code> 模板</strong> 定义一个包含 <code>HumanMessage</code> 和 <code>AIMessage</code> 的模板，用于表示一个完整的问答对。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> langchain_core.prompts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChatPromptTemplate, FewShotChatMessagePromptTemplate</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 定义单个示例的模板</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">example_prompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChatPromptTemplate.from_messages([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;human&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{input}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ai&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{output}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p><strong>准备 <code>examples</code> 数据</strong> 创建一个包含多个具体示例值的列表。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">examples </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;input&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;我今年25岁，来自北京。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;output&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;年龄：25岁，所在地：北京市&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;input&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;我30岁了，住在杭州。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;output&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;年龄：30岁，所在地：浙江省杭州市&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p><strong>构建少样本提示模板</strong> 将 <code>example_prompt</code> 和 <code>examples</code> 传入 <code>FewShotChatMessagePromptTemplate</code> 的构造函数。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">few_shot_prompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FewShotChatMessagePromptTemplate(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    example_prompt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">example_prompt,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    examples</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">examples</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p><strong>组合完整提示模板</strong> 将少样本提示模板与最终的用户提示模板组合成一个完整的 <code>ChatPromptTemplate</code>。<code>ChatPromptTemplate.from_messages</code> 方法支持将其他提示模板作为列表元素。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">final_prompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChatPromptTemplate.from_messages([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;system&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你是一个信息提取助手。请按照示例格式提取年龄和所在地信息。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    few_shot_prompt,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 少样本示例会在这里被动态插入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;human&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{input}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用户的新输入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p><strong>填充变量并调用模型</strong> 使用 <code>invoke</code> 方法，传入包含新用户输入的字典来填充最终的提示。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 假设 llm 是已创建的聊天模型实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> final_prompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> llm</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chain.invoke({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;input&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;我今年28岁，来自成都。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.content)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: 年龄：28岁，所在地：四川省成都市</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ol><h3 id="_4、总结与优势" tabindex="-1">4、总结与优势 <a class="header-anchor" href="#_4、总结与优势" aria-label="Permalink to “4、总结与优势”">​</a></h3><ul><li><strong><code>FewShotChatMessagePromptTemplate</code></strong> 极大地简化了少样本提示的构建过程。</li><li>核心优势： <ul><li><strong>效率高</strong>：只需定义一次模板和提供示例数据，即可自动生成所有示例消息。</li><li><strong>易维护</strong>：增加新的示例时，只需向 <code>examples</code> 列表中添加新的字典，无需重写整个消息结构。</li><li><strong>减少错误</strong>：避免了手动编写大量重复格式消息时可能出现的格式错误。</li></ul></li><li><strong>适用场景</strong>：当你需要向模型提供多个结构相似的示例来指导其行为时，使用此模板是最佳实践。</li></ul><h2 id="四、output-parser—从模型输出里提取列表" tabindex="-1">四、Output Parser—从模型输出里提取列表 <a class="header-anchor" href="#四、output-parser—从模型输出里提取列表" aria-label="Permalink to “四、Output Parser—从模型输出里提取列表”">​</a></h2><h3 id="_1、输出解析器的作用" tabindex="-1">1、输出解析器的作用 <a class="header-anchor" href="#_1、输出解析器的作用" aria-label="Permalink to “1、输出解析器的作用”">​</a></h3><p>在代码与 AI 模型交互时，需对模型输出进行后续处理（如提取信息、展示等），但 AI 输出格式存在不确定性。LangChain 的输出解析器主要解决两方面问题：</p><ol><li><strong>规范输出格式</strong>：向模型下达指令，要求其按指定格式输出内容。</li><li><strong>解析输出内容</strong>：自动处理模型的回应，提取所需信息（如转换为特定数据结构）。</li></ol><h3 id="_2、逗号分隔列表输出解析器-commaseparatedlistoutputparser" tabindex="-1">2、逗号分隔列表输出解析器（CommaSeparatedListOutputParser） <a class="header-anchor" href="#_2、逗号分隔列表输出解析器-commaseparatedlistoutputparser" aria-label="Permalink to “2、逗号分隔列表输出解析器（CommaSeparatedListOutputParser）”">​</a></h3><p>以提取颜色色号为例，该解析器适用于将输出转换为 Python 列表，具体使用步骤如下：</p><h4 id="_1-创建解析器实例" tabindex="-1">1. 创建解析器实例 <a class="header-anchor" href="#_1-创建解析器实例" aria-label="Permalink to “1. 创建解析器实例”">​</a></h4><p>通过<code>langchain.output_parsers</code>模块中的<code>CommaSeparatedListOutputParser</code>类创建实例，用于后续生成指令和解析结果。</p><h4 id="_2-获取格式指令" tabindex="-1">2. 获取格式指令 <a class="header-anchor" href="#_2-获取格式指令" aria-label="Permalink to “2. 获取格式指令”">​</a></h4><p>解析器的<code>get_format_instructions()</code>方法会返回规范模型输出的文字指令，例如：</p><blockquote><p>&quot;你的回应应该是一串以逗号分隔的值，例如 foo, bar, baz&quot;</p></blockquote><p>该指令需嵌入系统提示中，确保模型按要求输出。</p><h4 id="_3-构建提示模板并调用模型" tabindex="-1">3. 构建提示模板并调用模型 <a class="header-anchor" href="#_3-构建提示模板并调用模型" aria-label="Permalink to “3. 构建提示模板并调用模型”">​</a></h4><ul><li>结合系统提示（包含解析器指令）和用户提示（如 “生成 5 个符合要求的颜色色号”），使用<code>ChatPromptTemplate</code>创建提示模板。</li><li>调用模板的<code>invoke</code>方法传入变量值，生成最终提示并传给模型，模型会返回逗号分隔的字符串（如 “#FF0000, #00FF00, #0000FF”）。</li></ul><h4 id="_4-解析模型输出" tabindex="-1">4. 解析模型输出 <a class="header-anchor" href="#_4-解析模型输出" aria-label="Permalink to “4. 解析模型输出”">​</a></h4><p>直接调用解析器的<code>invoke</code>方法，传入模型的回应，即可自动将逗号分隔的字符串转换为 Python 列表（如<code>[&quot;#FF0000&quot;, &quot;#00FF00&quot;, &quot;#0000FF&quot;]</code>），无需手动处理文本。</p><h2 id="五、output-parser-—从模型输出里提取json" tabindex="-1">五、Output Parser —从模型输出里提取JSON <a class="header-anchor" href="#五、output-parser-—从模型输出里提取json" aria-label="Permalink to “五、Output Parser —从模型输出里提取JSON”">​</a></h2><h3 id="_1、json-输出解析的优势与应用场景" tabindex="-1">1、JSON 输出解析的优势与应用场景 <a class="header-anchor" href="#_1、json-输出解析的优势与应用场景" aria-label="Permalink to “1、JSON 输出解析的优势与应用场景”">​</a></h3><p>JSON 是一种结构化强、易解析的格式，可轻松转换为字典、列表或类实例，适用于需要提取特定字段信息的场景（如从书籍介绍中提取书名、作者、题材等）。</p><ul><li>核心需求：确保 AI 输出的 JSON 中，字段名、值的类型与预期完全匹配（避免因字段名错误或类型不符导致解析失败）。</li></ul><h3 id="_2、pydanticoutputparser-的作用" tabindex="-1">2、PydanticOutputParser 的作用 <a class="header-anchor" href="#_2、pydanticoutputparser-的作用" aria-label="Permalink to “2、PydanticOutputParser 的作用”">​</a></h3><p>LangChain 的<code>PydanticOutputParser</code>是处理 JSON 输出的关键工具，依托 Pydantic 库（用于数据解析和验证）实现两大功能：</p><ol><li>向 AI 下达指令，要求其输出符合指定数据模式的 JSON。</li><li>自动解析 AI 返回的 JSON 字符串，转换为对应的类实例，方便提取信息。</li></ol><h3 id="_3、使用步骤详解" tabindex="-1">3、使用步骤详解 <a class="header-anchor" href="#_3、使用步骤详解" aria-label="Permalink to “3、使用步骤详解”">​</a></h3><h4 id="_3-1、准备工作-安装并导入依赖" tabindex="-1">3.1、准备工作：安装并导入依赖 <a class="header-anchor" href="#_3-1、准备工作-安装并导入依赖" aria-label="Permalink to “3.1、准备工作：安装并导入依赖”">​</a></h4><ul><li>安装 Pydantic 库（若未安装）。</li><li>从pydantic导入核心组件： <ul><li><code>BaseModel</code>：用于定义数据模式（类似 “数据说明书”）。</li><li><code>Field</code>：为字段提供描述信息和验证条件。</li></ul></li></ul><h4 id="_3-2、定义数据模式-类" tabindex="-1">3.2、定义数据模式（类） <a class="header-anchor" href="#_3-2、定义数据模式-类" aria-label="Permalink to “3.2、定义数据模式（类）”">​</a></h4><p>创建继承自<code>BaseModel</code>的类（如<code>BookInfo</code>），明确所需字段的名称、类型及描述：</p><ul><li><p><strong>字段类型</strong>：通过类型提示指定（如<code>bookname: str</code>、<code>author: str</code>表示字符串；<code>genres: List[str]</code>表示字符串列表）。</p></li><li><p><strong>字段描述</strong>：使用<code>Field</code>函数补充说明（如<code>Field(description=&quot;书籍的标题&quot;)</code>），该描述会传递给 AI，帮助其理解字段含义。</p><p>示例：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pydantic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BaseModel, Field</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> typing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BookInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bookname: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Field(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">description</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;书籍的标题&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    author: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Field(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">description</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;书籍的作者&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    genres: List[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Field(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">description</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;书籍的题材类别列表&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><h4 id="_3-3、创建-pydanticoutputparser-实例" tabindex="-1">3.3、创建 PydanticOutputParser 实例 <a class="header-anchor" href="#_3-3、创建-pydanticoutputparser-实例" aria-label="Permalink to “3.3、创建 PydanticOutputParser 实例”">​</a></h4><p>将定义的数据模式类传入<code>PydanticOutputParser</code>，生成解析器：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> langchain.output_parsers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PydanticOutputParser</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PydanticOutputParser(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pydantic_object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BookInfo)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_3-4、生成格式指令并嵌入提示" tabindex="-1">3.4、生成格式指令并嵌入提示 <a class="header-anchor" href="#_3-4、生成格式指令并嵌入提示" aria-label="Permalink to “3.4、生成格式指令并嵌入提示”">​</a></h4><ul><li>调用解析器的<code>get_format_instructions()</code>方法，获取规范 AI 输出的指令（包含数据模式要求）。</li><li>将指令嵌入提示模板（如<code>ChatPromptTemplate</code>），确保 AI 按格式输出 JSON。</li></ul><h4 id="_3-5、调用模型并解析输出" tabindex="-1">3.5、调用模型并解析输出 <a class="header-anchor" href="#_3-5、调用模型并解析输出" aria-label="Permalink to “3.5、调用模型并解析输出”">​</a></h4><ul><li><p>模型返回符合要求的 JSON 字符串（字段名、类型与<code>BookInfo</code>一致）。</p></li><li><p>调用解析器的invoke方法，传入模型回应，自动将 JSON 字符串转换为BookInfo类实例：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">book_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parser.invoke(model_response)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>直接通过实例提取信息（如<code>book_data.bookname</code>、<code>book_data.genres</code>）。</p></li></ul><h3 id="_4、核心价值" tabindex="-1">4、核心价值 <a class="header-anchor" href="#_4、核心价值" aria-label="Permalink to “4、核心价值”">​</a></h3><p>通过 Pydantic 的类型验证和 LangChain 解析器的协作，既能保证 AI 输出的结构化，又能简化后续信息提取流程，尤其适合需要批量处理结构化数据的场景（如网站信息展示、数据入库等）。</p><h2 id="六、chain—串起提示模板-模型-输出解析器" tabindex="-1">六、Chain—串起提示模板-模型-输出解析器 <a class="header-anchor" href="#六、chain—串起提示模板-模型-输出解析器" aria-label="Permalink to “六、Chain—串起提示模板-模型-输出解析器”">​</a></h2><h3 id="_1、核心组件的共性-invoke方法" tabindex="-1">1、核心组件的共性：<code>invoke</code>方法 <a class="header-anchor" href="#_1、核心组件的共性-invoke方法" aria-label="Permalink to “1、核心组件的共性：invoke方法”">​</a></h3><p>LangChain 中的多个核心组件（如提示模板、聊天模型、输出解析器）均实现了<code>Runnable</code>接口，因此都具备<code>invoke</code>方法，这是 LangChain 表达式语言（LCEL）中统一的调用方式。不同组件的<code>invoke</code>方法功能如下：</p><ul><li><strong>提示模板（如<code>ChatPromptTemplate</code>）</strong>：接收含变量值的字典，返回填充后的提示值（<code>PromptValue</code>）。</li><li><strong>聊天模型（如<code>ChatModel</code>）</strong>：接收提示值或消息列表，返回模型生成的聊天信息。</li><li><strong>输出解析器（如<code>PydanticOutputParser</code>）</strong>：接收模型的聊天信息，返回解析后的结构化结果。</li></ul><h3 id="_2、组件的串联关系" tabindex="-1">2、组件的串联关系 <a class="header-anchor" href="#_2、组件的串联关系" aria-label="Permalink to “2、组件的串联关系”">​</a></h3><p>各组件的<code>invoke</code>方法存在 “输入 - 输出” 的上下游依赖：</p><ul><li>提示模板的输出（提示值）是聊天模型的输入。</li><li>聊天模型的输出（生成内容）是输出解析器的输入。</li></ul><p>因此，可通过连续调用<code>invoke</code>方法实现完整流程，例如：</p><p><code>提示模板.invoke(变量) → 聊天模型.invoke(提示值) → 解析器.invoke(模型输出)</code></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>字典（Dictionary） -&gt; 输入 -&gt; 提示模板（Prompt Template） -&gt; 输出 -&gt; 提示值（Prompt Value） -&gt; 输入 -&gt; 聊天模型（Chat Model） -&gt; 输出 -&gt; 聊天消息（Chat Message） -&gt; 输入 -&gt; 输出解析器（Output Parser） -&gt; 输出 -&gt; 解析结果（类型取决于解析器）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>代码示例</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_3、链-chain-与-langchain-表达式语言-lcel" tabindex="-1">3、链（Chain）与 LangChain 表达式语言（LCEL） <a class="header-anchor" href="#_3、链-chain-与-langchain-表达式语言-lcel" aria-label="Permalink to “3、链（Chain）与 LangChain 表达式语言（LCEL）”">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>(prompt | model | output_parser).invoke()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol><li><strong>链的定义</strong>：将多个组件按 “上游输出作为下游输入” 的逻辑组合成的流程，称为 “链”。</li><li><strong>LCEL 的管道语法</strong>：通过<code>|</code>（管道操作符）直观表示组件间的串联关系，例如： <code>prompt | model | parser</code> 含义：提示模板的输出传给模型，模型的输出再传给解析器。</li><li><strong>链的调用</strong>：对整个链调用<code>invoke</code>方法时，只需传入第一个组件所需的参数（因后续组件的输入由上游提供），即可得到最终结果。</li></ol><h3 id="_4、链的灵活性" tabindex="-1">4、链的灵活性 <a class="header-anchor" href="#_4、链的灵活性" aria-label="Permalink to “4、链的灵活性”">​</a></h3><p>链的组合方式非常灵活，可根据需求调整组件：</p><ul><li>中间的聊天模型可替换为其他语言模型（如<code>LLM</code>）。</li><li>提示模板或输出解析器并非必需，可根据场景省略。</li></ul><p>通过链，能轻松构建复杂的 AI 交互流程，且组件间的依赖关系清晰易懂。</p><h3 id="_5、chain使用示例" tabindex="-1">5、Chain使用示例 <a class="header-anchor" href="#_5、chain使用示例" aria-label="Permalink to “5、Chain使用示例”">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>from langchain_openai import ChatOpenAI</span></span>
<span class="line"><span>from langchain.output_parsers import CommaSeparatedListOutputParser</span></span>
<span class="line"><span>from langchain.prompts import ChatPromptTemplate</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>prompt = ChatPromptTemplate.from_messages([</span></span>
<span class="line"><span>    (&quot;system&quot;, &quot;{parser_instructions}&quot;),</span></span>
<span class="line"><span>    (&quot;human&quot;, &quot;列出5个{subject}色系的十六进制颜色码。&quot;)</span></span>
<span class="line"><span>])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>output_parser = CommaSeparatedListOutputParser()</span></span>
<span class="line"><span>parser_instructions = output_parser.get_format_instructions()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,152)])])}const c=i(l,[["render",t]]);export{g as __pageData,c as default};
