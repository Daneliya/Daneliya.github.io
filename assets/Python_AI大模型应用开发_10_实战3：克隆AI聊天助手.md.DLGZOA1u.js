import{_ as a,c as i,o as n,ah as l}from"./chunks/framework.D5cOWG0Y.js";const o=JSON.parse('{"title":"实战3：克隆AI聊天助手","description":"","frontmatter":{"title":"实战3：克隆AI聊天助手","tags":["Python"],"categories":["Python"]},"headers":[],"relativePath":"Python/AI大模型应用开发/10_实战3：克隆AI聊天助手.md","filePath":"Python/AI大模型应用开发/10_实战3：克隆AI聊天助手.md","lastUpdated":1756313711000}'),p={name:"Python/AI大模型应用开发/10_实战3：克隆AI聊天助手.md"};function e(t,s,h,r,k,E){return n(),i("div",null,[...s[0]||(s[0]=[l(`<h2 id="一、项目介绍" tabindex="-1">一、项目介绍 <a class="header-anchor" href="#一、项目介绍" aria-label="Permalink to “一、项目介绍”">​</a></h2><p>项目的目标是开发一个仿照 ChatGPT、文心一言的 AI 聊天助手网站，重点实现 “带上下文记忆的连续对话” 功能，以下从<strong>界面结构、核心交互逻辑、关键功能亮点</strong>三方面整理具体效果：</p><h3 id="_1、界面结构-侧边栏-主聊天区" tabindex="-1">1、界面结构：侧边栏 + 主聊天区 <a class="header-anchor" href="#_1、界面结构-侧边栏-主聊天区" aria-label="Permalink to “1、界面结构：侧边栏 + 主聊天区”">​</a></h3><p>网站界面分为两大核心区域，布局简洁且符合主流 AI 聊天工具的使用习惯：</p><ol><li>左侧侧边栏 <ul><li>核心功能：供用户输入自定义 API 密钥（用于调用 AI 模型生成内容）。</li><li>辅助功能：提供可跳转的<strong>OpenAI 官方 API 密钥获取链接</strong>，帮助用户快速了解如何获取密钥，降低使用门槛。</li></ul></li><li>主聊天区</li></ol><h3 id="_2、核心交互逻辑-密钥验证→连续对话" tabindex="-1">2、核心交互逻辑：密钥验证→连续对话 <a class="header-anchor" href="#_2、核心交互逻辑-密钥验证→连续对话" aria-label="Permalink to “2、核心交互逻辑：密钥验证→连续对话”">​</a></h3><p>整个助手的交互流程围绕 “密钥有效性” 和 “上下文记忆” 展开，步骤清晰：</p><h4 id="_2-1、前置-api-密钥验证" tabindex="-1">2.1、前置：API 密钥验证 <a class="header-anchor" href="#_2-1、前置-api-密钥验证" aria-label="Permalink to “2.1、前置：API 密钥验证”">​</a></h4><ul><li>若用户未输入 API 密钥：聊天功能无法开启，系统会主动提醒 “请输入 API 密钥”，避免因密钥缺失导致模型调用失败。</li><li>若用户输入有效 API 密钥：验证通过后，聊天功能解锁，用户可开始与 AI 助手交互。</li></ul><h4 id="_2-2、核心-带记忆的连续对话" tabindex="-1">2.2、核心：带记忆的连续对话 <a class="header-anchor" href="#_2-2、核心-带记忆的连续对话" aria-label="Permalink to “2.2、核心：带记忆的连续对话”">​</a></h4><p>这是项目三与前两个项目（仅支持一次性互动）的核心区别，具体效果如下：</p><ul><li><strong>多轮对话连贯性</strong>：用户可发起多轮追问，所有消息（用户提问 + AI 回答）会按时间顺序依次展示在主聊天区（新消息自动追加在历史消息下方）。</li><li>上下文记忆能力：AI 能识别并关联历史对话信息。例如： <ol><li>用户第一轮提问 “牛顿第二定律是什么？”，AI 给出解释；</li><li>用户第二轮追问 “它的公式如何推导？”，AI 会自动识别 “它” 指代 “牛顿第二定律”，基于上一轮内容给出推导过程，无需用户重复说明主语。</li></ol></li></ul><h3 id="_3、关键功能亮点" tabindex="-1">3、关键功能亮点 <a class="header-anchor" href="#_3、关键功能亮点" aria-label="Permalink to “3、关键功能亮点”">​</a></h3><ol><li><strong>用户自主性高</strong>：支持自定义 API 密钥，用户可使用自己的账号资源调用模型，无需依赖项目方提供的 API 服务，灵活度更高。</li><li><strong>易用性设计</strong>：通过 “官方链接指引”“无密钥提醒” 等细节，降低用户操作成本，尤其适合对 API 密钥获取不熟悉的新手。</li><li><strong>核心能力突破</strong>：实现 “上下文记忆”，解决前序项目 “单次互动无关联” 的问题，让对话更贴近真实交流场景（如日常咨询、知识问答、任务协作等）。</li></ol><h2 id="二、创建ai请求" tabindex="-1">二、创建AI请求 <a class="header-anchor" href="#二、创建ai请求" aria-label="Permalink to “二、创建AI请求”">​</a></h2><h3 id="_1、前期准备-环境搭建" tabindex="-1">1、前期准备：环境搭建 <a class="header-anchor" href="#_1、前期准备-环境搭建" aria-label="Permalink to “1、前期准备：环境搭建”">​</a></h3><ol><li><p><strong>创建项目结构</strong>： 新建项目文件夹，将<code>requirements.txt</code>文件放入其中（包含项目所需依赖）。</p><div class="language-txt line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>aiohttp==3.9.3</span></span>
<span class="line"><span>aiosignal==1.3.1</span></span>
<span class="line"><span>altair==5.2.0</span></span>
<span class="line"><span>annotated-types==0.6.0</span></span>
<span class="line"><span>anyio==4.3.0</span></span>
<span class="line"><span>async-timeout==4.0.3</span></span>
<span class="line"><span>attrs==23.2.0</span></span>
<span class="line"><span>blinker==1.7.0</span></span>
<span class="line"><span>cachetools==5.3.3</span></span>
<span class="line"><span>certifi==2024.2.2</span></span>
<span class="line"><span>charset-normalizer==3.3.2</span></span>
<span class="line"><span>click==8.1.7</span></span>
<span class="line"><span>dataclasses-json==0.6.4</span></span>
<span class="line"><span>distro==1.9.0</span></span>
<span class="line"><span>exceptiongroup==1.2.0</span></span>
<span class="line"><span>frozenlist==1.4.1</span></span>
<span class="line"><span>gitdb==4.0.11</span></span>
<span class="line"><span>GitPython==3.1.42</span></span>
<span class="line"><span>greenlet==3.0.3</span></span>
<span class="line"><span>h11==0.14.0</span></span>
<span class="line"><span>httpcore==1.0.4</span></span>
<span class="line"><span>httpx==0.27.0</span></span>
<span class="line"><span>idna==3.6</span></span>
<span class="line"><span>Jinja2==3.1.3</span></span>
<span class="line"><span>jsonpatch==1.33</span></span>
<span class="line"><span>jsonpointer==2.4</span></span>
<span class="line"><span>jsonschema==4.21.1</span></span>
<span class="line"><span>jsonschema-specifications==2023.12.1</span></span>
<span class="line"><span>langchain==0.1.12</span></span>
<span class="line"><span>langchain-community==0.0.28</span></span>
<span class="line"><span>langchain-core==0.1.31</span></span>
<span class="line"><span>langchain-openai==0.0.8</span></span>
<span class="line"><span>langchain-text-splitters==0.0.1</span></span>
<span class="line"><span>langsmith==0.1.25</span></span>
<span class="line"><span>markdown-it-py==3.0.0</span></span>
<span class="line"><span>MarkupSafe==2.1.5</span></span>
<span class="line"><span>marshmallow==3.21.1</span></span>
<span class="line"><span>mdurl==0.1.2</span></span>
<span class="line"><span>multidict==6.0.5</span></span>
<span class="line"><span>mypy-extensions==1.0.0</span></span>
<span class="line"><span>numpy==1.26.4</span></span>
<span class="line"><span>openai==1.14.0</span></span>
<span class="line"><span>orjson==3.9.15</span></span>
<span class="line"><span>packaging==23.2</span></span>
<span class="line"><span>pandas==2.2.1</span></span>
<span class="line"><span>pillow==10.2.0</span></span>
<span class="line"><span>protobuf==4.25.3</span></span>
<span class="line"><span>pyarrow==15.0.1</span></span>
<span class="line"><span>pydantic==2.6.4</span></span>
<span class="line"><span>pydantic_core==2.16.3</span></span>
<span class="line"><span>pydeck==0.8.1b0</span></span>
<span class="line"><span>Pygments==2.17.2</span></span>
<span class="line"><span>python-dateutil==2.9.0.post0</span></span>
<span class="line"><span>pytz==2024.1</span></span>
<span class="line"><span>PyYAML==6.0.1</span></span>
<span class="line"><span>referencing==0.33.0</span></span>
<span class="line"><span>regex==2023.12.25</span></span>
<span class="line"><span>requests==2.31.0</span></span>
<span class="line"><span>rich==13.7.1</span></span>
<span class="line"><span>rpds-py==0.18.0</span></span>
<span class="line"><span>six==1.16.0</span></span>
<span class="line"><span>smmap==5.0.1</span></span>
<span class="line"><span>sniffio==1.3.1</span></span>
<span class="line"><span>SQLAlchemy==2.0.28</span></span>
<span class="line"><span>streamlit==1.32.1</span></span>
<span class="line"><span>tenacity==8.2.3</span></span>
<span class="line"><span>tiktoken==0.6.0</span></span>
<span class="line"><span>toml==0.10.2</span></span>
<span class="line"><span>toolz==0.12.1</span></span>
<span class="line"><span>tornado==6.4</span></span>
<span class="line"><span>tqdm==4.66.2</span></span>
<span class="line"><span>typing-inspect==0.9.0</span></span>
<span class="line"><span>typing_extensions==4.10.0</span></span>
<span class="line"><span>tzdata==2024.1</span></span>
<span class="line"><span>urllib3==2.2.1</span></span>
<span class="line"><span>yarl==1.9.4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br></div></div></li><li><p><strong>安装依赖</strong>： 在终端执行命令，安装所有依赖包：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>新建代码文件</strong>： 创建一个 Python 文件（<code>utils.py</code>），用于编写与 AI 模型交互的核心逻辑。</p></li></ol><h3 id="_2、核心函数" tabindex="-1">2、核心函数 <a class="header-anchor" href="#_2、核心函数" aria-label="Permalink to “2、核心函数”">​</a></h3><p><code>utils.py</code>中定义<code>get_chat_response</code>函数，封装与 AI 模型的交互过程，关键是传入 “外部记忆” 以维持对话连贯性。</p><h4 id="函数参数设计" tabindex="-1">函数参数设计 <a class="header-anchor" href="#函数参数设计" aria-label="Permalink to “函数参数设计”">​</a></h4><p>函数需接收 3 个核心参数：</p><ul><li><code>prompt</code>：用户当前的输入提示（字符串）。</li><li><code>openai_api_key</code>：用户提供的 API 密钥（用于调用 AI 模型）。</li><li><code>memory</code>：外部传入的记忆实例（储存历史对话，确保跨函数调用时记忆不丢失）。</li></ul><h4 id="函数内部逻辑" tabindex="-1">函数内部逻辑 <a class="header-anchor" href="#函数内部逻辑" aria-label="Permalink to “函数内部逻辑”">​</a></h4><p><code>utils.py</code>完整代码</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> langchain.chains </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConversationChain</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> langchain_openai </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChatOpenAI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> langchain.memory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConversationBufferMemory</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_chat_response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prompt, memory, openai_api_key):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChatOpenAI(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gpt-3.5-turbo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">openai_api_key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">openai_api_key)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    chain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConversationChain(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">llm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">memory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">memory)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chain.invoke({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;input&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: prompt})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;response&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="关键逻辑解析" tabindex="-1">关键逻辑解析 <a class="header-anchor" href="#关键逻辑解析" aria-label="Permalink to “关键逻辑解析”">​</a></h4><ol><li><strong>模型初始化</strong>： 使用<code>ChatOpenAI</code>创建模型实例，通过<code>openai_api_key</code>参数传入用户提供的密钥，确保模型调用权限。</li><li><strong>对话链与记忆关联</strong>： <code>ConversationChain</code>自动处理 “加载历史记忆→生成回应→更新记忆” 的全流程，无需手动调用<code>load_memory_variables</code>或<code>save_context</code>，简化逻辑并减少出错概率。</li><li><strong>回应提取</strong>： 对话链的<code>invoke</code>方法返回字典（含<code>input</code>、<code>history</code>、<code>response</code>等字段），仅提取<code>response</code>字段（AI 的回答内容）作为函数返回值，符合实际需求。</li></ol><h3 id="_3、功能测试-验证记忆有效性" tabindex="-1">3、功能测试：验证记忆有效性 <a class="header-anchor" href="#_3、功能测试-验证记忆有效性" aria-label="Permalink to “3、功能测试：验证记忆有效性”">​</a></h3><p>为确保函数能维持对话记忆，需进行多轮调用测试，在<code>utils.py</code>中增加如下测试代码：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">memory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConversationBufferMemory(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">return_messages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(get_chat_response(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;牛顿提出过哪些知名的定律？&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, memory, os.getenv(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;OPENAI_API_KEY&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(get_chat_response(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;我上一个问题是什么？&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, memory, os.getenv(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;OPENAI_API_KEY&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="测试预期结果" tabindex="-1">测试预期结果 <a class="header-anchor" href="#测试预期结果" aria-label="Permalink to “测试预期结果”">​</a></h4><ul><li>第一轮：AI 正确回答牛顿第二定律的内容。</li><li>第二轮：AI 能识别 “它” 指代 “牛顿第二定律”，基于历史对话给出公式，证明记忆生效（对话连贯性成立）。</li></ul><h3 id="_4、核心亮点" tabindex="-1">4、核心亮点 <a class="header-anchor" href="#_4、核心亮点" aria-label="Permalink to “4、核心亮点”">​</a></h3><ol><li><strong>记忆外部化</strong>：记忆实例从外部传入函数，而非在函数内部初始化，确保多轮调用时历史对话不丢失，是实现连续对话的关键。</li><li><strong>流程自动化</strong>：借助<code>ConversationChain</code>自动处理记忆加载与更新，避免手动操作可能的遗漏或错误。</li><li><strong>灵活性</strong>：支持用户自定义 API 密钥，模型型号可调整，适配不同场景需求。</li></ol><h2 id="三、创建网站页面" tabindex="-1">三、创建网站页面 <a class="header-anchor" href="#三、创建网站页面" aria-label="Permalink to “三、创建网站页面”">​</a></h2><p>通过 Streamlit 构建聊天助手的前端界面，实现 “API 密钥输入→对话展示→用户交互” 的完整功能，最终打造一个可部署、支持连贯对话的仿 ChatGPT 网站。以下是详细实现步骤与解析：</p><h3 id="_1、前期准备-代码结构与依赖" tabindex="-1">1、前期准备：代码结构与依赖 <a class="header-anchor" href="#_1、前期准备-代码结构与依赖" aria-label="Permalink to “1、前期准备：代码结构与依赖”">​</a></h3><ol><li><strong>清理测试代码</strong>： 删除或注释掉<code>utils.py</code>中<code>get_chat_response</code>函数的测试代码（避免干扰前端调用）。</li><li><strong>新建前端文件</strong>： 创建前端代码文件（如<code>main.py</code>），作为网站主页入口。</li><li><strong>导入核心库</strong>： 需导入 Streamlit（构建前端）和后端的<code>get_chat_response</code>函数，代码如下：</li></ol><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> streamlit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> st</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> langchain.memory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConversationBufferMemory</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> utils </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> get_chat_response</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_2、前端界面搭建-分模块实现" tabindex="-1">2、前端界面搭建：分模块实现 <a class="header-anchor" href="#_2、前端界面搭建-分模块实现" aria-label="Permalink to “2、前端界面搭建：分模块实现”">​</a></h3><h4 id="_2-1、页面标题与基础配置" tabindex="-1">2.1、页面标题与基础配置 <a class="header-anchor" href="#_2-1、页面标题与基础配置" aria-label="Permalink to “2.1、页面标题与基础配置”">​</a></h4><p>设置网站标题，提升视觉辨识度：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">st.title(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;💬 克隆ChatGPT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_2-2、侧边栏-api-密钥输入" tabindex="-1">2.2、侧边栏：API 密钥输入 <a class="header-anchor" href="#_2-2、侧边栏-api-密钥输入" aria-label="Permalink to “2.2、侧边栏：API 密钥输入”">​</a></h4><p>添加侧边栏用于用户输入 API 密钥（复用前序项目逻辑，确保安全性与自主性）：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> st.sidebar:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    openai_api_key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> st.text_input(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;请输入OpenAI API Key：&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    st.markdown(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[获取OpenAI API key](https://platform.openai.com/account/api-keys)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_2-3、会话状态初始化-解决-记忆重置-问题" tabindex="-1">2.3、会话状态初始化：解决 “记忆重置” 问题 <a class="header-anchor" href="#_2-3、会话状态初始化-解决-记忆重置-问题" aria-label="Permalink to “2.3、会话状态初始化：解决 “记忆重置” 问题”">​</a></h4><p>Streamlit 有一个关键特性：<strong>用户交互（如输入、点击按钮）或代码修改后，会从头重新运行代码</strong>。若直接初始化记忆，会导致每轮对话后记忆被清空，无法维持连贯性。</p><p>解决方案：利用<code>st.session_state</code>（会话状态）储存记忆和对话历史，仅在首次加载时初始化，后续复用已有状态：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;memory&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> st.session_state:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    st.session_state[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;memory&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConversationBufferMemory(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">return_messages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    st.session_state[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;messages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ai&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                                     &quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你好，我是你的AI助手，有什么可以帮你的吗？&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_2-4、对话历史展示-区分角色与内容" tabindex="-1">2.4、对话历史展示：区分角色与内容 <a class="header-anchor" href="#_2-4、对话历史展示-区分角色与内容" aria-label="Permalink to “2.4、对话历史展示：区分角色与内容”">​</a></h4><p>通过循环迭代<code>st.session_state.messages</code>，利用 Streamlit 的<code>st.chat_message</code>函数展示对话，自动区分 “AI” 和 “人类” 角色（含默认图标）：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> st.session_state[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;messages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    st.chat_message(message[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]).write(message[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_2-5、用户输入框-接收消息并触发对话" tabindex="-1">2.5、用户输入框：接收消息并触发对话 <a class="header-anchor" href="#_2-5、用户输入框-接收消息并触发对话" aria-label="Permalink to “2.5、用户输入框：接收消息并触发对话”">​</a></h4><p>使用<code>st.chat_input</code>创建用户输入框，实现 “输入→验证→调用后端→展示回应” 的流程：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用户输入框：获取用户消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">prompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> st.chat_input()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prompt:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 1. 验证API密钥：无密钥则提示并终止</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> openai_api_key:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        st.info(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;请输入你的OpenAI API Key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        st.stop()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 2. 储存并展示用户消息</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 加入对话历史</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    st.session_state[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;messages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].append({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;human&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: prompt})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 前端展示用户消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    st.chat_message(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;human&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).write(prompt)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	# 3. 调用后端函数获取AI回应（带加载提示）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> st.spinner(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AI正在思考中，请稍等...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 传入会话状态中的记忆，维持连贯性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> get_chat_response(prompt, st.session_state[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;memory&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                     openai_api_key)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 4. 储存并展示AI回应</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ai&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: response}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 加入对话历史</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    st.session_state[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;messages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].append(msg)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 前端展示AI回应</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    st.chat_message(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ai&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).write(response)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h4 id="_2-6、完整代码" tabindex="-1">2.6、完整代码 <a class="header-anchor" href="#_2-6、完整代码" aria-label="Permalink to “2.6、完整代码”">​</a></h4><p><code>main.py</code></p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> streamlit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> st</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> langchain.memory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConversationBufferMemory</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> utils </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> get_chat_response</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">st.title(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;💬 克隆ChatGPT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> st.sidebar:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    openai_api_key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> st.text_input(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;请输入OpenAI API Key：&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    st.markdown(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[获取OpenAI API key](https://platform.openai.com/account/api-keys)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;memory&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> st.session_state:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    st.session_state[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;memory&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConversationBufferMemory(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">return_messages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    st.session_state[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;messages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ai&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                                     &quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你好，我是你的AI助手，有什么可以帮你的吗？&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> st.session_state[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;messages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    st.chat_message(message[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]).write(message[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">prompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> st.chat_input()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prompt:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> openai_api_key:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        st.info(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;请输入你的OpenAI API Key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        st.stop()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    st.session_state[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;messages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].append({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;human&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: prompt})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    st.chat_message(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;human&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).write(prompt)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> st.spinner(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AI正在思考中，请稍等...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> get_chat_response(prompt, st.session_state[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;memory&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                     openai_api_key)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ai&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: response}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    st.session_state[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;messages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].append(msg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    st.chat_message(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ai&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).write(response)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h3 id="_3、功能测试与验证" tabindex="-1">3、功能测试与验证 <a class="header-anchor" href="#_3、功能测试与验证" aria-label="Permalink to “3、功能测试与验证”">​</a></h3><ol><li><strong>运行前端</strong>： 启动 Streamlit 服务</li><li><strong>测试流程</strong>： <ul><li>步骤 1：在侧边栏输入 OpenAI API 密钥。</li><li>步骤 2：在输入框发送问题（如 “牛顿第二定律是什么？”），观察 AI 回应是否展示。</li><li>步骤 3：继续追问（如 “它的公式是什么？”），验证 AI 是否能关联历史对话（记忆生效）。</li></ul></li><li><strong>预期效果</strong>： <ul><li>对话按 “用户→AI” 顺序展示，角色气泡清晰区分。</li><li>多轮追问时，AI 能理解上下文（如 “它” 指代前序问题中的 “牛顿第二定律”）。</li></ul></li></ol><h3 id="_4、可选功能-对话清空-挑战任务" tabindex="-1">4、可选功能：对话清空（挑战任务） <a class="header-anchor" href="#_4、可选功能-对话清空-挑战任务" aria-label="Permalink to “4、可选功能：对话清空（挑战任务）”">​</a></h3><p>为提升用户体验，可添加 “清空对话” 按钮，实现 “重置记忆 + 清空历史” 的功能，代码示例如下：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在侧边栏添加“清空对话”按钮</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> st.sidebar:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> st.button(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;清空对话&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 重置记忆和对话历史</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        st.session_state.memory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConversationBufferMemory(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">return_messages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        st.session_state.messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ai&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你好！我是你的AI助手，有什么可以帮你的吗？&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        st.rerun()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重新加载页面，生效清空操作</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_5、核心亮点" tabindex="-1">5、核心亮点 <a class="header-anchor" href="#_5、核心亮点" aria-label="Permalink to “5、核心亮点”">​</a></h3><ol><li><strong>会话状态管理</strong>：通过<code>st.session_state</code>解决 Streamlit 代码重跑导致的 “记忆丢失” 问题，是实现连贯对话的关键。</li><li><strong>角色化展示</strong>：利用<code>st.chat_message</code>自动区分 AI 与人类角色，界面贴近 ChatGPT 等主流工具，用户体验友好。</li><li><strong>流程完整性</strong>：包含 “密钥验证→加载提示→对话储存→回应展示” 全流程，逻辑闭环且容错性强（如无密钥时提示）。</li></ol><h3 id="_6、部署与扩展-后续方向" tabindex="-1">6、部署与扩展（后续方向） <a class="header-anchor" href="#_6、部署与扩展-后续方向" aria-label="Permalink to “6、部署与扩展（后续方向）”">​</a></h3><ul><li><strong>部署</strong>：可通过 Streamlit Community Cloud（免费）、Heroku 等平台部署网站，生成公开链接供他人使用。</li><li><strong>扩展</strong>：可添加 “模型选择”（如 GPT-3.5/GPT-4）、“对话导出”（保存为 TXT/CSV）等功能，提升工具实用性。</li></ul>`,68)])])}const c=a(p,[["render",e]]);export{o as __pageData,c as default};
