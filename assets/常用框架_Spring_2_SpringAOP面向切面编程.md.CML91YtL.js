import{_ as e,c as t,o as a,ah as p,vs as n}from"./chunks/framework.D5cOWG0Y.js";const A=JSON.parse('{"title":"SpringAOP面向切面编程","description":"","frontmatter":{"title":"SpringAOP面向切面编程","tags":["Spring"],"categories":["Spring"]},"headers":[],"relativePath":"常用框架/Spring/2_SpringAOP面向切面编程.md","filePath":"常用框架/Spring/2_SpringAOP面向切面编程.md","lastUpdated":1756054686000}'),i={name:"常用框架/Spring/2_SpringAOP面向切面编程.md"};function s(o,r,l,g,c,h){return a(),t("div",null,[...r[0]||(r[0]=[p('<blockquote><p>官方中文文档：</p><p><a href="https://springdoc.cn/spring/core.html#aop" target="_blank" rel="noreferrer">https://springdoc.cn/spring/core.html#aop</a></p></blockquote><h3 id="aop介绍" tabindex="-1">AOP介绍 <a class="header-anchor" href="#aop介绍" aria-label="Permalink to “AOP介绍”">​</a></h3><p>AOP（Aspect-Oriented Programming，面向切面编程）能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可扩展性和可维护性。 Spring AOP是基于动态代理的，如果要代理的对象实现了某个接口，那么Spring AOP就会使用JDK动态代理去创建代理对象；而对于没有实现接口的对象，就无法使用JDK动态代理，转而使用CGlib动态代理生成一个被代理对象的子类来作为代理。</p><p><img src="'+n+'" alt="image-20231113170949925" loading="lazy"></p><p>图中的implements和extend。即一个是接口，一个是实现类。</p><p>当然也可以使用AspectJ，Spring AOP中已经集成了AspectJ，AspectJ应该算得上是Java生态系统中最完整的AOP框架了。使用AOP之后我们可以把一些通用功能抽象出来，在需要用到的地方直接使用即可，这样可以大大简化代码量。我们需要增加新功能也方便，提高了系统的扩展性。日志功能、事务管理和权限管理等场景都用到了AOP。</p><h3 id="spring-aop和aspectj-aop的区别" tabindex="-1">Spring AOP和AspectJ AOP的区别 <a class="header-anchor" href="#spring-aop和aspectj-aop的区别" aria-label="Permalink to “Spring AOP和AspectJ AOP的区别”">​</a></h3><p>Spring AOP是属于运行时增强，而AspectJ是编译时增强。</p><p>Spring AOP基于代理（Proxying），而AspectJ基于字节码操作（Bytecode Manipulation）。</p><p>Spring AOP已经集成了AspectJ，AspectJ应该算得上是Java生态系统中最完整的AOP框架了。</p><p>AspectJ相比于Spring AOP功能更加强大，但是Spring AOP相对来说更简单。</p><p>如果我们的切面比较少，那么两者性能差异不大。但是，当切面太多的话，最好选择AspectJ，它比SpringAOP快很多。</p><h3 id="在spring-aop-中-关注点和横切关注的区别" tabindex="-1">在Spring AOP 中，关注点和横切关注的区别 <a class="header-anchor" href="#在spring-aop-中-关注点和横切关注的区别" aria-label="Permalink to “在Spring AOP 中，关注点和横切关注的区别”">​</a></h3><p><strong>关注点</strong>是应用中一个模块的行为，一个关注点可能会被定义成一个我们想实现的一个功能。 横切关注点是一个关注点，此关注点是整个应用都会使用的功能，并影响整个应用，比如日志，安全和数据传输，几乎应用的每个模块都需要的功能。因此这些都属于横切关注点。</p><p>那什么是<strong>连接点</strong>呢？连接点代表一个应用程序的某个位置，在这个位置我们可以插入一个AOP切面，它实际上是个应用程序执行Spring AOP的位置。</p><p><strong>切入点</strong>是什么？切入点是一个或一组连接点，通知将在这些位置执行。可以通过表达式或匹配的方式指明切入点。</p><h3 id="通知及通知类型" tabindex="-1">通知及通知类型 <a class="header-anchor" href="#通知及通知类型" aria-label="Permalink to “通知及通知类型”">​</a></h3><p>通知是个在方法执行前或执行后要做的动作，实际上是程序执行时要通过SpringAOP框架触发的代码段。</p><p>Spring切面可以应用五种类型的通知：</p><ol><li><strong>before</strong>：前置通知，在一个方法执行前被调用。</li><li><strong>after</strong>: 在方法执行之后调用的通知，无论方法执行是否成功。</li><li><strong>after-returning</strong>: 仅当方法成功完成后执行的通知。</li><li><strong>after-throwing</strong>: 在方法抛出异常退出时执行的通知。</li><li><strong>around</strong>: 在方法执行之前和之后调用的通知。</li></ol><h3 id="spring-aop-切点表达式args与-args区别" tabindex="-1">Spring AOP 切点表达式args与@args区别 <a class="header-anchor" href="#spring-aop-切点表达式args与-args区别" aria-label="Permalink to “Spring AOP 切点表达式args与@args区别”">​</a></h3><p><a href="https://blog.csdn.net/qq_19922839/article/details/117412231" target="_blank" rel="noreferrer">https://blog.csdn.net/qq_19922839/article/details/117412231</a></p><h3 id="execution表达式" tabindex="-1">execution表达式 <a class="header-anchor" href="#execution表达式" aria-label="Permalink to “execution表达式”">​</a></h3><p><a href="https://cloud.tencent.com/developer/article/1640230" target="_blank" rel="noreferrer">https://cloud.tencent.com/developer/article/1640230</a></p><p><a href="https://zhuanlan.zhihu.com/p/153317556" target="_blank" rel="noreferrer">@Pointcut 的 12 种用法，你知道几种？</a></p><p><a href="https://blog.csdn.net/justlpf/article/details/103400452" target="_blank" rel="noreferrer">@Pointcut语法详解</a></p><p>概念</p><p>Spring AOP——Spring 中面向切面编程](<a href="https://www.cnblogs.com/joy99/p/10941543.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/joy99/p/10941543.html</a>)</p><p><a href="https://www.freesion.com/article/7911501010/" target="_blank" rel="noreferrer">AOP(面向切面编程)的介绍与作用</a></p><p>应用场景</p><p><a href="https://blog.csdn.net/w139074301/article/details/121703536" target="_blank" rel="noreferrer">使用AOP给项目添加登录日志</a></p><p><a href="https://blog.csdn.net/weixin_48112109/article/details/125672876" target="_blank" rel="noreferrer">spring-AOP（实现登录日志）</a></p><p><a href="https://blog.csdn.net/DreamsArchitects/article/details/117376278" target="_blank" rel="noreferrer">关于若依管理系统的异步定时任务记录登录日志的分析</a></p><p><a href="https://www.jianshu.com/p/e6a567cc2fa2" target="_blank" rel="noreferrer">五、登录日志、操作日志</a></p><p><a href="http://www.zuidaima.com/share/5226709711834112.htm" target="_blank" rel="noreferrer">SpringBoot使用AOP实现简单验证、日志记录、使用NettySocket转发数据</a> <a href="https://www.csdn.net/tags/NtDacg2sMzMwNTgtYmxvZwO0O0OO0O0O.html" target="_blank" rel="noreferrer">https://www.csdn.net/tags/NtDacg2sMzMwNTgtYmxvZwO0O0OO0O0O.html</a></p>',35)])])}const O=e(i,[["render",s]]);export{A as __pageData,O as default};
