import{_ as i,c as a,o as t,ah as l}from"./chunks/framework.D5cOWG0Y.js";const u=JSON.parse('{"title":"AI应用部署","description":"","frontmatter":{"title":"AI应用部署","tags":["Python"],"categories":["Python"]},"headers":[],"relativePath":"Python/AI大模型应用开发/17_AI应用部署.md","filePath":"Python/AI大模型应用开发/17_AI应用部署.md","lastUpdated":1756658813000}'),r={name:"Python/AI大模型应用开发/17_AI应用部署.md"};function o(n,e,s,h,d,c){return t(),a("div",null,[...e[0]||(e[0]=[l('<h2 id="一、上传项目到github" tabindex="-1">一、上传项目到GitHub <a class="header-anchor" href="#一、上传项目到github" aria-label="Permalink to “一、上传项目到GitHub”">​</a></h2><p>当你完成 Streamlit AI 网站的代码编写后，默认只能在本地（<code>localhost</code>）运行。若想让他人通过互联网访问，需将项目部署到公网服务器。Streamlit 提供了便捷的部署流程，核心步骤包括依赖管理、代码托管（GitHub）和云部署，以下是详细指南：</p><h3 id="_1、准备项目依赖-requirements-txt" tabindex="-1">1、准备项目依赖（requirements.txt） <a class="header-anchor" href="#_1、准备项目依赖-requirements-txt" aria-label="Permalink to “1、准备项目依赖（requirements.txt）”">​</a></h3><p>部署前需明确项目依赖的库，确保服务器能正确安装所需环境。</p><h4 id="生成依赖文件" tabindex="-1">生成依赖文件 <a class="header-anchor" href="#生成依赖文件" aria-label="Permalink to “生成依赖文件”">​</a></h4><p>在项目终端执行以下命令，自动生成包含所有依赖库的<code>requirements.txt</code>：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>pip freeze &gt; requirements.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><strong>说明</strong>：文件中会列出项目中直接或间接使用的所有库（包括依赖的子库），无需手动记忆或填写。</li></ul><h3 id="_2、将项目上传到-github" tabindex="-1">2、将项目上传到 GitHub <a class="header-anchor" href="#_2、将项目上传到-github" aria-label="Permalink to “2、将项目上传到 GitHub”">​</a></h3><p>Streamlit 社区云部署需从 GitHub 仓库获取代码，因此需先将项目托管到 GitHub。</p><h4 id="_2-1-github-注册与登录" tabindex="-1">2.1. GitHub 注册与登录 <a class="header-anchor" href="#_2-1-github-注册与登录" aria-label="Permalink to “2.1. GitHub 注册与登录”">​</a></h4><ul><li>访问<a href="https://github.com/" target="_blank" rel="noreferrer">GitHub 官网</a>，点击右上角 “Sign up” 注册账号（已有账号直接 “Sign in”）。</li><li>注册流程：输入邮箱→设置密码（8 位以上，含数字 / 字母，或 15 位以上）→设置用户名（支持字母、数字、短横杠）→完成人机验证→输入邮箱验证码。</li></ul><h4 id="_2-2-创建代码仓库" tabindex="-1">2.2. 创建代码仓库 <a class="header-anchor" href="#_2-2-创建代码仓库" aria-label="Permalink to “2.2. 创建代码仓库”">​</a></h4><p>代码仓库可理解为 “项目文件夹”，用于存放所有项目文件：</p><ol><li>登录后点击右上角 “+”→“New repository”。</li><li>填写仓库信息： <ul><li><strong>Repository name</strong>：仓库名称（支持字母、数字、英文句号、下划线、短横杠，如<code>ai-chat-app</code>）。</li><li><strong>Description</strong>：项目描述（可选，支持中文，如 “基于 Streamlit 的 AI 对话工具”）。</li><li><strong>Visibility</strong>：选择<code>Public</code>（公开，便于分享）或<code>Private</code>（私有）。</li><li><strong>Add a README file</strong>：勾选则自动创建<code>README.md</code>（项目说明文档，可选）。</li><li><strong>.gitignore</strong>：忽略文件。初期可忽略，后续按需添加。</li><li><strong>License</strong>：初期可忽略，后续按需添加。如果想要了解 不同许可证的具体含义，就可以去到<a href="https://chooselicense.com/" target="_blank" rel="noreferrer">chooselicense.com</a> 这个网站。</li></ul></li><li>点击 “Create repository” 完成创建。</li></ol><h4 id="_2-3-上传项目文件" tabindex="-1">2.3. 上传项目文件 <a class="header-anchor" href="#_2-3-上传项目文件" aria-label="Permalink to “2.3. 上传项目文件”">​</a></h4><ol><li>进入新建仓库，点击 “Add file”→“Upload files”。</li><li>拖拽项目文件（如<code>.py</code>代码、<code>requirements.txt</code>、数据文件等）到上传区域，<strong>注意排除虚拟环境文件夹（如<code>venv</code>）</strong>（体积大且非必要）。</li><li>填写提交信息： <ul><li><strong>Commit changes</strong>：简短描述本次上传（如 “初始版本提交”）。</li><li>可选：填写详细描述。</li></ul></li><li>点击 “Commit changes” 完成上传。</li></ol><h4 id="_2-4-后续操作" tabindex="-1">2.4. 后续操作 <a class="header-anchor" href="#_2-4-后续操作" aria-label="Permalink to “2.4. 后续操作”">​</a></h4><ul><li><strong>删除文件</strong>：进入文件→点击右上角 “...”→“Delete file”→提交确认。</li><li><strong>更新文件</strong>：重新上传同名文件，自动覆盖旧版本。</li><li><strong>版本控制</strong>：GitHub 基于 Git 工具，可记录每次改动历史、追踪修改人，支持回退到旧版本（团队协作必备，建议深入学习 Git）。</li></ul><h2 id="二、让你的ai应用能用链接访问" tabindex="-1">二、让你的AI应用能用链接访问 <a class="header-anchor" href="#二、让你的ai应用能用链接访问" aria-label="Permalink to “二、让你的AI应用能用链接访问”">​</a></h2><p>将项目上传到 GitHub 后，通过 Streamlit 社区云（<code>share.streamlit.io</code>）可免费部署应用，生成公网可访问的链接。以下是详细部署步骤：</p><h3 id="_1、登录-streamlit-社区云" tabindex="-1">1、登录 Streamlit 社区云 <a class="header-anchor" href="#_1、登录-streamlit-社区云" aria-label="Permalink to “1、登录 Streamlit 社区云”">​</a></h3><ol><li>访问部署平台：打开浏览器，输入网址 <a href="https://share.streamlit.io/" target="_blank" rel="noreferrer">share.streamlit.io</a>。</li><li>登录账号： <ul><li>推荐点击 “Continue with GitHub”，使用 GitHub 账号登录（无需单独注册）。</li><li>首次登录需授权 Streamlit 访问 GitHub 信息，点击绿色授权按钮即可。</li></ul></li><li>完善信息（首次登录）：按提示填写姓名、邮箱、所在国家等基本信息。</li></ol><h3 id="_2、创建并部署应用" tabindex="-1">2、创建并部署应用 <a class="header-anchor" href="#_2、创建并部署应用" aria-label="Permalink to “2、创建并部署应用”">​</a></h3><ol><li>进入主页面后，点击 “New App” 按钮，开始部署流程。 <ul><li>若出现 GitHub 仓库访问授权提示，再次点击绿色按钮授权（仅首次需要）。</li></ul></li><li>填写项目信息： <ul><li><strong>Repository</strong>：从下拉框中选择已上传到 GitHub 的项目仓库（如<code>your-username/ai-app</code>）。</li><li><strong>Branch</strong>：默认选择<code>main</code>或<code>master</code>分支（无需修改，除非使用了自定义分支）。</li><li><strong>Main file path</strong>：填写项目主文件（即本地运行时执行<code>streamlit run</code>后面的文件名，如<code>main.py</code>）。</li><li><strong>URL</strong>：自定义部署后的网址后缀（自动生成默认值，可修改为更简短的名称，绿色提示表示未被占用）。</li></ul></li><li>启动部署：点击 “Deploy” 按钮，开始部署流程。</li></ol><h3 id="_3、部署过程与完成" tabindex="-1">3、部署过程与完成 <a class="header-anchor" href="#_3、部署过程与完成" aria-label="Permalink to “3、部署过程与完成”">​</a></h3><ul><li><strong>部署中</strong>：页面会显示加载动画，可点击 “Manage App” 查看实时部署日志（如依赖安装过程，<code>requirements.txt</code>中的库会被逐一安装）。</li><li><strong>完成部署</strong>：等待几分钟后，部署成功，页面会显示应用链接（如<code>https://your-app-name.streamlit.app</code>）。</li></ul><h3 id="_4、使用与分享" tabindex="-1">4、使用与分享 <a class="header-anchor" href="#_4、使用与分享" aria-label="Permalink to “4、使用与分享”">​</a></h3><p>部署成功后，任何人都可通过生成的链接访问你的应用。你可以将链接分享给他人，无需配置服务器即可实现公网访问。</p><p>通过 Streamlit 社区云，无需复杂的服务器配置，几分钟内即可完成应用部署，是快速分享 Streamlit 项目的理想选择。</p>',30)])])}const g=i(r,[["render",o]]);export{u as __pageData,g as default};
