import{_ as e,c as i,o as s,ah as r,c8 as n,c9 as t,ca as p,cb as l,cc as m,cd as o,ce as g,cf as h,cg as c,ch as d,ci as k,cj as _,ck as b,cl as f,cm as y,cn as v,co as j,cp as u,cq as S}from"./chunks/framework.D5cOWG0Y.js";const B=JSON.parse('{"title":"Jenkins实战之自动化配置","description":"","frontmatter":{"title":"Jenkins实战之自动化配置","tags":["Jenkins"],"categories":["Jenkins"]},"headers":[],"relativePath":"Java/容器/Jenkins/Jenkins实战之自动化配置.md","filePath":"Java/容器/Jenkins/Jenkins实战之自动化配置.md","lastUpdated":1755802517000}'),F={name:"Java/容器/Jenkins/Jenkins实战之自动化配置.md"};function z(J,a,x,C,P,T){return s(),i("div",null,[...a[0]||(a[0]=[r('<p>需求：项目使用SpringBoot进行开发，我们需要实现当代码提交到git仓库，我们点击Jenkins开始构建按钮，能自动拉取代码并使用maven执行打包操作，上传到指定服务器并运行。</p><blockquote><p>版本为：Jenkins 2.414.3</p></blockquote><h2 id="安装maven插件" tabindex="-1">安装maven插件 <a class="header-anchor" href="#安装maven插件" aria-label="Permalink to “安装maven插件”">​</a></h2><p><img src="'+n+'" alt="image-20231112181659157" loading="lazy"></p><p>搜索maven找到插件并安装</p><p><img src="'+t+'" alt="image-20231112181618246" loading="lazy"></p><h2 id="配置maven" tabindex="-1">配置Maven <a class="header-anchor" href="#配置maven" aria-label="Permalink to “配置Maven”">​</a></h2><p><img src="'+p+'" alt="image-20231112182116162" loading="lazy"></p><p>进入全局工具配置后滑动到最底部，找到新增Maven，取消勾选自动安装，手动输入安装maven的地址，然后点击保存即可。</p><p><img src="'+l+'" alt="image-20231112194557424" loading="lazy"></p><h2 id="新建maven项目" tabindex="-1">新建maven项目 <a class="header-anchor" href="#新建maven项目" aria-label="Permalink to “新建maven项目”">​</a></h2><p><img src="'+m+'" alt="image-20231112194648498" loading="lazy"></p><p>选择构建一个maven项目</p><p><img src="'+o+'" alt="image-20231112194803024" loading="lazy"></p><h3 id="配置git地址" tabindex="-1">配置git地址 <a class="header-anchor" href="#配置git地址" aria-label="Permalink to “配置git地址”">​</a></h3><p><img src="'+g+'" alt="image-20231112195342965" loading="lazy"></p><p>配置Credentials</p><p>用户名填写gitlab/gitee账号，这里随便填写的名字，勾选上名字保护（Treat username as secret）,在确定之后名会展示成加密。</p><p><img src="'+h+'" alt="image-20231112230459858" loading="lazy"></p><h3 id="设置pom文件地址" tabindex="-1">设置pom文件地址 <a class="header-anchor" href="#设置pom文件地址" aria-label="Permalink to “设置pom文件地址”">​</a></h3><p>如果pom文件不在项目根目录下，比如在project目录下，输入project/pom.xml</p><p><img src="'+c+'" alt="image-20231112195430263" loading="lazy"></p><h2 id="开始构建" tabindex="-1">开始构建 <a class="header-anchor" href="#开始构建" aria-label="Permalink to “开始构建”">​</a></h2><p>此时返回主面板点击运行按钮</p><p><img src="'+d+'" alt="image-20231112201243236" loading="lazy"></p><p>如果构建失败可以查看控制台输出，构建失败的原因可能是jdk版本、maven依赖拉取失败等等。</p><p><img src="'+k+'" alt="image-20231112201416559" loading="lazy"></p><h2 id="安装用于上传jar包的插件" tabindex="-1">安装用于上传jar包的插件 <a class="header-anchor" href="#安装用于上传jar包的插件" aria-label="Permalink to “安装用于上传jar包的插件”">​</a></h2><p>在插件市场搜索 Publish Over 进行安装</p><p><img src="'+_+'" alt="image-20231112201509675" loading="lazy"></p><h2 id="配置项目构建完成后上传jar包到指定服务器" tabindex="-1">配置项目构建完成后上传jar包到指定服务器 <a class="header-anchor" href="#配置项目构建完成后上传jar包到指定服务器" aria-label="Permalink to “配置项目构建完成后上传jar包到指定服务器”">​</a></h2><p><img src="'+b+'" alt="image-20231112201946676" loading="lazy"></p><p>在系统配置中新增SSH连接信息</p><p><img src="'+f+'" alt="image-20231112202740850" loading="lazy"></p><p>配置ssh服务器，Name：服务器名称、Hostname：服务器地址、Username：登录账户</p><p><img src="'+y+'" alt="image-20231112202818848" loading="lazy"></p><p>点击高级按钮，然后输入密码</p><p><img src="'+v+'" alt="image-20231112204728306" loading="lazy"></p><p>回到项目的插件配置，配置在项目构建后上传jar包到指定服务器</p><p><img src="'+j+'" alt="image-20231112203500570" loading="lazy"></p><p><img src="'+u+'" alt="image-20231112204728306" loading="lazy"></p><p>SSH Server——Name：选择创建的SSH连接。</p><p>Transfers Set——Source files：利用通配符找到maven打包后生成的jar包，聚合工程可以写<code>**/system/*.jar</code>。</p><p>Transfers Set——Remove prefix：上传文件后省略的路径，例如路径有/jenkins/target会自动忽略。</p><p>Transfers Set——Remove directory：上传文件到指定目录。</p><p>Transfers Set——Exec command：运行jar包的路径，如果不确定上传后jar包的位置，可以先省略，运行一次后查看控制台日志中的路径。jar包的名称可以使用匹配符，毕竟版本是变化的。</p><p>启动jar包指定日志输出文件</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nohup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/lib/jenkins/workspace/springbootTestFirst/jenkins/target/jenkins-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.jar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mylog.log</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;&amp;1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="jenkins配置ssh超时连接时间" tabindex="-1">Jenkins配置SSH超时连接时间 <a class="header-anchor" href="#jenkins配置ssh超时连接时间" aria-label="Permalink to “Jenkins配置SSH超时连接时间”">​</a></h2><p>点击高级选项，如果超过了这个时间，jenkins会认为上传失败。</p><p><img src="'+S+'" alt="image-20231112224804918" loading="lazy"></p><p>参考资料</p><p>[1]. <a href="https://blog.gitee.com/2020/12/15/gitee-jenkins/" target="_blank" rel="noreferrer">https://blog.gitee.com/2020/12/15/gitee-jenkins/</a></p><p>[2]. <a href="https://blog.csdn.net/qq_20957669/article/details/128662560" target="_blank" rel="noreferrer">https://blog.csdn.net/qq_20957669/article/details/128662560</a></p><p>[3]. <a href="https://segmentfault.com/a/1190000020374673" target="_blank" rel="noreferrer">https://segmentfault.com/a/1190000020374673</a></p>',55)])])}const q=e(F,[["render",z]]);export{B as __pageData,q as default};
