import{_ as i,c as a,o as n,ah as e}from"./chunks/framework.D5cOWG0Y.js";const d=JSON.parse('{"title":"配置访问路径","description":"","frontmatter":{"title":"配置访问路径","tags":["SpringBoot","源码"],"categories":["SpringBoot"]},"headers":[],"relativePath":"常用框架/SpringBoot/SpringBoot程序开发/4_配置访问路径.md","filePath":"常用框架/SpringBoot/SpringBoot程序开发/4_配置访问路径.md","lastUpdated":1756054686000}'),l={name:"常用框架/SpringBoot/SpringBoot程序开发/4_配置访问路径.md"};function t(p,s,h,r,k,o){return n(),a("div",null,[...s[0]||(s[0]=[e(`<h2 id="一、控制器模式" tabindex="-1">一、控制器模式 <a class="header-anchor" href="#一、控制器模式" aria-label="Permalink to “一、控制器模式”">​</a></h2><p>在实际的项目开发中，控制器的路径可能会有许多个。在进行控制器编写的时候，也会有以下两种运行模式。</p><ol><li>控制器跳转模式：可以使用@Controller注解定义，如果要实现Restful显示，也可以联合@ResponseBody注解一起使用。</li><li>Restful显示：可以使用@RestController注解，里面所有路径访问的信息都以Restful形式展示。</li></ol><h2 id="二、使用restful风格" tabindex="-1">二、使用Restful风格 <a class="header-anchor" href="#二、使用restful风格" aria-label="Permalink to “二、使用Restful风格”">​</a></h2><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RestController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MessageController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">home</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;www.xxl.cn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>此时的控制器程序类上使用了@RestController注解，这样就可以避免在方法上使用@ResponseBody注解。此时，MessageController类中的所有映射路径都会以Restful形式展示。</p><blockquote><p><strong>提示：Restful是SpringCloud技术的实现核心。</strong></p><p>在控制器里面一旦使用了@RestController注解，则意味着所有方法都将以Restful风格展示。这种做法未必适合于SpringBoot项目，因为在很多时候需要通过控制器跳转到显示层页面，而Restful是SpringCloud技术的实现关键。</p></blockquote><h2 id="三、地址传递参数" tabindex="-1">三、地址传递参数 <a class="header-anchor" href="#三、地址传递参数" aria-label="Permalink to “三、地址传递参数”">​</a></h2><p>也可以进行参数的接收处理。传递参数到控制器中最简单的做法是使用地址重写传递“<code>访问路径?参数名称=内容</code>”（<code>只支持GET请求</code>），在MessageController控制器程序类之中扩充一个新的echo()方法。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/echo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String msg) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;【echo】&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>此时如果要进行该路径的访问，则可以直接通过地址栏传递参数（<a href="http://localhost:8080/echo?msg=www.xxlcn%EF%BC%89%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%8F%82%E6%95%B0%E7%9A%84%E5%90%8D%E7%A7%B0%E5%BA%94%E8%AF%A5%E9%BB%98%E8%AE%A4%E4%BD%BF%E7%94%A8msg%E3%80%82" target="_blank" rel="noreferrer">http://localhost:8080/echo?msg=www.xxlcn），并且参数的名称应该默认使用msg。</a></p><h2 id="四、-pathvariable" tabindex="-1">四、@PathVariable <a class="header-anchor" href="#四、-pathvariable" aria-label="Permalink to “四、@PathVariable”">​</a></h2><p>由于SpringBoot支持Restful风格处理，所以参数的接收可以采用路径参数的形式完成，但是需要在控制器方法的参数声明上使用@PathVariable注解与访问路径的参数进行关联。（<code>只支持GET请求</code>）</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/echo/{message}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">echo2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PathVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) String msg) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;【echo】&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>通过地址传递参数，地址设置为<a href="http://localhost:8080/echo/www.xxl.cn" target="_blank" rel="noreferrer">http://localhost:8080/echo/www.xxl.cn</a></p>`,15)])])}const g=i(l,[["render",t]]);export{d as __pageData,g as default};
