import{_ as n,c as i,o as e,ah as p,lt as l,lu as s,lv as r}from"./chunks/framework.D5cOWG0Y.js";const d=JSON.parse('{"title":"Prometheus监控","description":"","frontmatter":{"title":"Prometheus监控","tags":["分布式监控","Prometheus"],"categories":["分布式监控","Prometheus"]},"headers":[],"relativePath":"Java/架构设计/分布式/分布式监控/Prometheus.md","filePath":"Java/架构设计/分布式/分布式监控/Prometheus.md","lastUpdated":1755802517000}'),t={name:"Java/架构设计/分布式/分布式监控/Prometheus.md"};function h(c,a,o,m,b,k){return e(),i("div",null,[...a[0]||(a[0]=[p('<h1 id="prometheus" tabindex="-1">Prometheus <a class="header-anchor" href="#prometheus" aria-label="Permalink to “Prometheus”">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to “概述”">​</a></h2><p>Prometheus 是一个开源的服务监控系统和时间序列数据库。</p><blockquote><p>官网：<a href="https://prometheus.io/" target="_blank" rel="noreferrer">Prometheus - Monitoring system &amp; time series database</a></p><p>源码：<a href="https://github.com/prometheus/prometheus" target="_blank" rel="noreferrer">https://github.com/prometheus/prometheus</a></p></blockquote><p><img src="'+l+`" alt="img" loading="lazy"></p><p>特性：</p><ul><li>高维度数据模型</li><li>自定义查询语言</li><li>可视化数据展示</li><li>高效的存储策略</li><li>易于运维</li><li>提供各种客户端开发库</li><li>警告和报警</li><li>数据导出</li></ul><h2 id="springboot集成使用" tabindex="-1">SpringBoot集成使用 <a class="header-anchor" href="#springboot集成使用" aria-label="Permalink to “SpringBoot集成使用”">​</a></h2><h3 id="_1-spring-boot-工程集成-micrometer" tabindex="-1">1.Spring Boot 工程集成 Micrometer <a class="header-anchor" href="#_1-spring-boot-工程集成-micrometer" aria-label="Permalink to “1.Spring Boot 工程集成 Micrometer”">​</a></h3><h5 id="_1-1引入依赖" tabindex="-1">1.1引入依赖 <a class="header-anchor" href="#_1-1引入依赖" aria-label="Permalink to “1.1引入依赖”">​</a></h5><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;spring-boot-starter-actuator&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;io.micrometer&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;micrometer-registry-prometheus&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h5 id="_1-2配置" tabindex="-1">1.2配置 <a class="header-anchor" href="#_1-2配置" aria-label="Permalink to “1.2配置”">​</a></h5><div class="language-properties line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">management.server.port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=9003</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">management.endpoints.web.exposure.include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">management.endpoint.metrics.enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">management.endpoint.health.show-details</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=always</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">management.endpoint.health.probes.enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">management.endpoint.prometheus.enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">management.metrics.export.prometheus.enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">management.metrics.tags.application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=voice-qc-backend</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这里 <code>management.endpoints.web.exposure.include=*</code> 配置为开启 Actuator 服务，因为Spring Boot Actuator 会自动配置一个 URL 为 <code>/actuator/Prometheus</code> 的 HTTP 服务来供 Prometheus 抓取数据，不过默认该服务是关闭的，该配置将打开所有的 Actuator 服务。</p><p><code>management.metrics.tags.application</code> 配置会将该工程应用名称添加到计量器注册表的 tag 中去，方便后边 Prometheus 根据应用名称来区分不同的服务。</p><h5 id="_1-3监控jvm信息" tabindex="-1">1.3监控jvm信息 <a class="header-anchor" href="#_1-3监控jvm信息" aria-label="Permalink to “1.3监控jvm信息”">​</a></h5><p>然后在工程启动主类中添加 Bean 如下来监控 JVM 性能指标信息：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GatewayDatumApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        SpringApplication.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GatewayDatumApplication.class, args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MeterRegistryCustomizer&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MeterRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configurer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${spring.application.name}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">applicationName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (registry) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> registry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">commonTags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;application&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, applicationName);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h5 id="_1-4创建自定义监控" tabindex="-1">1.4创建自定义监控 <a class="header-anchor" href="#_1-4创建自定义监控" aria-label="Permalink to “1.4创建自定义监控”">​</a></h5><p>监控请求次数与响应时间</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>package com.lianxin.gobot.api.monitor;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import io.micrometer.core.instrument.Counter;</span></span>
<span class="line"><span>import io.micrometer.core.instrument.MeterRegistry;</span></span>
<span class="line"><span>import io.micrometer.core.instrument.Timer;</span></span>
<span class="line"><span>import lombok.Getter;</span></span>
<span class="line"><span>import org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span>import org.springframework.beans.factory.annotation.Value;</span></span>
<span class="line"><span>import org.springframework.stereotype.Component;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import javax.annotation.PostConstruct;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * @Author: GZ</span></span>
<span class="line"><span> * @CreateTime: 2022-08-30  10:50</span></span>
<span class="line"><span> * @Description: 自定义监控服务</span></span>
<span class="line"><span> * @Version: 1.0</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@Component</span></span>
<span class="line"><span>public class PrometheusCustomMonitor {</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 上报拨打请求次数</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Getter</span></span>
<span class="line"><span>    private Counter reportDialRequestCount;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 上报拨打URL</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Value(&quot;\${lx.call-result-report.url}&quot;)</span></span>
<span class="line"><span>    private String callReportUrl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 上报拨打响应时间</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Getter</span></span>
<span class="line"><span>    private Timer reportDialResponseTime;</span></span>
<span class="line"><span>    @Getter</span></span>
<span class="line"><span>    private final MeterRegistry registry;</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Autowired</span></span>
<span class="line"><span>    public PrometheusCustomMonitor(MeterRegistry registry) {</span></span>
<span class="line"><span>        this.registry = registry;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @PostConstruct</span></span>
<span class="line"><span>    private void init() {</span></span>
<span class="line"><span>        reportDialRequestCount = registry.counter(&quot;go_api_report_dial_request_count&quot;, &quot;url&quot;,callReportUrl);</span></span>
<span class="line"><span>        reportDialResponseTime=  registry.timer(&quot;go_api_report_dial_response_time&quot;, &quot;url&quot;,callReportUrl);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><h5 id="_1-5添加具体业务代码监控" tabindex="-1">1.5添加具体业务代码监控 <a class="header-anchor" href="#_1-5添加具体业务代码监控" aria-label="Permalink to “1.5添加具体业务代码监控”">​</a></h5><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>//统计请求次数</span></span>
<span class="line"><span>prometheusCustomMonitor.getReportDialRequestCount().increment();</span></span>
<span class="line"><span>long startTime = System.currentTimeMillis();</span></span>
<span class="line"><span>String company = HttpUtils.post(companyUrl,&quot;&quot;);</span></span>
<span class="line"><span>//统计响应时间</span></span>
<span class="line"><span>long endTime = System.currentTimeMillis();</span></span>
<span class="line"><span>prometheusCustomMonitor.getReportDialResponseTime().record(endTime-startTime, TimeUnit.MILLISECONDS);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在浏览器访问 <code>http://127.0.0.1:9001/actuator/prometheus</code> ，就可以看到服务的一系列不同类型 metrics 信息，例如<code>jvm_memory_used_bytes gauge</code>、<code>jvm_gc_memory_promoted_bytes_total counter</code> ，<code>go_api_report_dial_request_count</code>等</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/JfTPiahTHJhrkf2DzYicJ84YjNTO9WGE9TB4sQicDO0fhqPIyJDBFMeZfnzsc9YCGW9ricRgZMfS47A51v4jCosOTw/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></p><p>到此，Spring Boot 工程集成 Micrometer 就已经完成，接下里就要与 Prometheus 进行集成了。</p><h3 id="_2-集成-prometheus" tabindex="-1">2.集成 Prometheus <a class="header-anchor" href="#_2-集成-prometheus" aria-label="Permalink to “2.集成 Prometheus”">​</a></h3><h5 id="_2-1安装" tabindex="-1">2.1安装 <a class="header-anchor" href="#_2-1安装" aria-label="Permalink to “2.1安装”">​</a></h5><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>docker pull prom/prometheus</span></span>
<span class="line"><span>mdkir /usr/local/prometheus</span></span>
<span class="line"><span>vi prometheus.yml</span></span>
<span class="line"><span># my global config</span></span>
<span class="line"><span>global:</span></span>
<span class="line"><span>  scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></span>
<span class="line"><span>  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.</span></span>
<span class="line"><span>  # scrape_timeout is set to the global default (10s).</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Alertmanager configuration</span></span>
<span class="line"><span>alerting:</span></span>
<span class="line"><span>  alertmanagers:</span></span>
<span class="line"><span>  - static_configs:</span></span>
<span class="line"><span>    - targets:</span></span>
<span class="line"><span>      # - alertmanager:9093</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Load rules once and periodically evaluate them according to the global &#39;evaluation_interval&#39;.</span></span>
<span class="line"><span>rule_files:</span></span>
<span class="line"><span>  # - &quot;first_rules.yml&quot;</span></span>
<span class="line"><span>  # - &quot;second_rules.yml&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># A scrape configuration containing exactly one endpoint to scrape:</span></span>
<span class="line"><span># Here it&#39;s Prometheus itself.</span></span>
<span class="line"><span>scrape_configs:</span></span>
<span class="line"><span>  # The job name is added as a label \`job=&lt;job_name&gt;\` to any timeseries scraped from this config.</span></span>
<span class="line"><span>  - job_name: &#39;prometheus&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # metrics_path defaults to &#39;/metrics&#39;</span></span>
<span class="line"><span>    # scheme defaults to &#39;http&#39;.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    static_configs:</span></span>
<span class="line"><span>    - targets: [&#39;192.168.136.129:9090&#39;]</span></span>
<span class="line"><span>docker run -d --name prometheus -p 9090:9090 -v/usr/local/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p><img src="`+s+`" alt="图片" loading="lazy"></p><h5 id="_2-2集成配置" tabindex="-1">2.2集成配置 <a class="header-anchor" href="#_2-2集成配置" aria-label="Permalink to “2.2集成配置”">​</a></h5><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>global:</span></span>
<span class="line"><span>  scrape_interval: 15s</span></span>
<span class="line"><span></span></span>
<span class="line"><span>scrape_configs:</span></span>
<span class="line"><span>  - job_name: &quot;prometheus&quot;</span></span>
<span class="line"><span>    static_configs:</span></span>
<span class="line"><span>    - targets: [&quot;localhost:9090&quot;]</span></span>
<span class="line"><span>  - job_name: &quot;metricsLocalTest&quot;</span></span>
<span class="line"><span>    metrics_path: &quot;/actuator/prometheus&quot;</span></span>
<span class="line"><span>    static_configs:</span></span>
<span class="line"><span>    - targets: [&quot;localhost:9003&quot;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>这里 <code>localhost:9001</code> 就是上边本地启动的服务地址，也就是 Prometheus 要监控的服务地址。同时可以添加一些与应用相关的标签，方便后期执行 PromSQL 查询语句区分。最后重启 Prometheus 服务</p><p><img src="`+s+'" alt="图片" loading="lazy"></p><p><img src="'+s+`" alt="图片" loading="lazy"></p><h3 id="_3-使用-grafana-dashboard-展示监控项" tabindex="-1">3.使用 Grafana Dashboard 展示监控项 <a class="header-anchor" href="#_3-使用-grafana-dashboard-展示监控项" aria-label="Permalink to “3.使用 Grafana Dashboard 展示监控项”">​</a></h3><h5 id="_3-1安装grafana" tabindex="-1">3.1安装grafana <a class="header-anchor" href="#_3-1安装grafana" aria-label="Permalink to “3.1安装grafana”">​</a></h5><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>docker pull grafana/grafana</span></span>
<span class="line"><span>docker run -d --name grafana -p 3000:3000 -v /usr/local/grafana:/var/lib/grafana grafana/grafana</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>默认用户名/密码 admin/admin</p><p><img src="`+r+'" alt="图片" loading="lazy"></p><h5 id="_3-2配置prometheus数据源" tabindex="-1">3.2配置prometheus数据源 <a class="header-anchor" href="#_3-2配置prometheus数据源" aria-label="Permalink to “3.2配置prometheus数据源”">​</a></h5><p><img src="https://mmbiz.qpic.cn/mmbiz_png/JfTPiahTHJhrkf2DzYicJ84YjNTO9WGE9TrsYHAibSroeibGz7fcJtbdn9o4GzK1vQ8hSbQiacXm98k6juojWp8KJsg/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></p><h5 id="_3-3增加jvm面板" tabindex="-1">3.3增加jvm面板 <a class="header-anchor" href="#_3-3增加jvm面板" aria-label="Permalink to “3.3增加jvm面板”">​</a></h5><p>模板编号为4701</p><p><img src="'+s+'" alt="图片" loading="lazy"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/JfTPiahTHJhrkf2DzYicJ84YjNTO9WGE9T1NNuiaed5icDqURydelENgYzVicp6UjRibhlDSiaVoMscosdmiaG5CqYiaGNw/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></p><h5 id="_3-4配置业务接口监控面板" tabindex="-1">3.4配置业务接口监控面板 <a class="header-anchor" href="#_3-4配置业务接口监控面板" aria-label="Permalink to “3.4配置业务接口监控面板”">​</a></h5><p><img src="'+s+'" alt="图片" loading="lazy"></p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to “参考资料”">​</a></h2><p>[1]. <a href="https://blog.csdn.net/GZ946/article/details/126619218" target="_blank" rel="noreferrer">springboot+Prometheus+grafana 实现自定义监控（请求数、响应时间、JVM性能）</a></p><p>[2]. <a href="https://blog.51cto.com/u_16099246/7607251" target="_blank" rel="noreferrer">https://blog.51cto.com/u_16099246/7607251</a></p>',51)])])}const g=n(t,[["render",h]]);export{d as __pageData,g as default};
