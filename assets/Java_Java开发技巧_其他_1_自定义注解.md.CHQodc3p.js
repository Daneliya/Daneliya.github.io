import{_ as i,c as a,o as n,ah as t}from"./chunks/framework.D5cOWG0Y.js";const E=JSON.parse('{"title":"自定义注解","description":"","frontmatter":{"title":"自定义注解"},"headers":[],"relativePath":"Java/Java开发技巧/其他/1_自定义注解.md","filePath":"Java/Java开发技巧/其他/1_自定义注解.md","lastUpdated":1755802517000}'),l={name:"Java/Java开发技巧/其他/1_自定义注解.md"};function e(p,s,h,r,k,d){return n(),a("div",null,[...s[0]||(s[0]=[t(`<h1 id="自定义注解" tabindex="-1">自定义注解 <a class="header-anchor" href="#自定义注解" aria-label="Permalink to “自定义注解”">​</a></h1><p>自定义注解类编写的一些规则:</p><ol><li>Annotation 类型定义为 <strong>@interface</strong>, 所有的Annotation 会自动继承java.lang.Annotation这一接口,并且不能再去继承别的类或是接口。</li><li>参数成员只能用public 或默认(default) 这两个访问权修饰。<strong>语法：类型 属性名() [default 默认值]; default表示默认值 ，也可以不编写默认值的.</strong></li><li>参数成员只能用基本类型byte、short、char、int、long、float、double、boolean八种基本数据类型和String、Enum、Class、annotations等数据类型，以及这一些类型的数组.</li><li>要获取类方法和字段的注解信息，必须通过Java的反射技术来获取 Annotation 对象，因为你除此之外没有别的获取注解对象的方法。</li><li>注解也可以没有定义成员,，不过这样注解就没啥用了。</li></ol><p><strong>注意:</strong> 自定义注解需要使用到元注解。</p><ul><li>注解方法不能有参数。</li><li>注解方法的返回类型局限于原始类型，字符串，枚举，注解，或以上类型构成的数组。</li><li>注解方法可以包含默认值。</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ElementType.METHOD, ElementType.TYPE})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Retention</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> MyAnnotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;blue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 为属性指定缺省值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">product</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;001&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>参考</p><p>[1]. <a href="https://blog.csdn.net/weixin_40482816/article/details/112961560" target="_blank" rel="noreferrer">https://blog.csdn.net/weixin_40482816/article/details/112961560</a></p>`,8)])])}const g=i(l,[["render",e]]);export{E as __pageData,g as default};
