import{_ as i,c as a,o as n,ah as l,an as e,ao as p,ap as t}from"./chunks/framework.D5cOWG0Y.js";const b=JSON.parse('{"title":"找出某个Java进程中最耗费CPU的Java线程","description":"","frontmatter":{"title":"找出某个Java进程中最耗费CPU的Java线程","tags":["JVM"],"categories":["JVM"]},"headers":[],"relativePath":"Java/JVM性能调优/JVM性能监控与调优/找出某个Java进程中最耗费CPU的Java线程.md","filePath":"Java/JVM性能调优/JVM性能监控与调优/找出某个Java进程中最耗费CPU的Java线程.md","lastUpdated":1755802517000}'),h={name:"Java/JVM性能调优/JVM性能监控与调优/找出某个Java进程中最耗费CPU的Java线程.md"};function r(k,s,d,o,c,g){return n(),a("div",null,[...s[0]||(s[0]=[l(`<h2 id="一、问题原因" tabindex="-1">一、问题原因 <a class="header-anchor" href="#一、问题原因" aria-label="Permalink to “一、问题原因”">​</a></h2><p>现实企业级Java应用开发、维护中，有时候我们会碰到下面这些问题：</p><ul><li>OutOfMemoryError，内存不足</li><li>内存泄露</li><li>线程死锁</li><li>锁争用（Lock Contention）</li><li>Java进程消耗CPU过高 ......</li></ul><p>这些问题在日常开发、维护中可能被很多人忽视（比如有的人遇到上面的问题只是重启服务器或者调大内存，而不会深究问题根源），但能够理解并解决这些问题是Java程序员进阶的必备要求。</p><h2 id="二、常用命令" tabindex="-1">二、常用命令 <a class="header-anchor" href="#二、常用命令" aria-label="Permalink to “二、常用命令”">​</a></h2><p>找出某个Java进程中最耗费CPU的Java线程并定位堆栈信息，用到的命令有：ps、top、printf、jstack、grep。</p><h3 id="jps" tabindex="-1">jps <a class="header-anchor" href="#jps" aria-label="Permalink to “jps”">​</a></h3><p>jps主要用来输出JVM中运行的进程状态信息。语法格式如下：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [options] [hostid]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果不指定hostid就默认为当前主机或服务器。</p><p>命令行参数选项说明如下：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-q</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 不输出类名,Jar名和传入main方法的参数</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 输出传入main方法的参数</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 输出main类或Jar的全限名</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 输出传入JVM的参数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>比如下面：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">root@ubuntu:/#</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2458</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.artifactory.standalone.main.Main</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/artifactory-2.2.5/etc/jetty.xml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">29920</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> com.sun.tools.hat.Main</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -port</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9998</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/dump.dat</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">3149</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.apache.catalina.startup.Bootstrap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">30972</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sun.tools.jps.Jps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">8247</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.apache.catalina.startup.Bootstrap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">25687</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> com.sun.tools.hat.Main</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -port</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9999</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dump.dat</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">21711</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mrf-center.jar</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="jstack" tabindex="-1">jstack <a class="header-anchor" href="#jstack" aria-label="Permalink to “jstack”">​</a></h3><p>jstack主要用来查看某个Java进程内的线程堆栈信息。语法格式如下：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jstack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [option] pid</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jstack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [option] executable core</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jstack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [option] [server-id@]remote-hostname-or-ip</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>命令行参数选项说明如下：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 会打印出额外的锁信息</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在发生死锁时可以用 jstack -l pid 来观察锁持有情况</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -m mixed mode，不仅会输出Java堆栈信息，还会输出C/C++堆栈信息（比如Native方法）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> long</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> listings</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>jstack可以定位到线程堆栈，根据堆栈信息我们可以定位到具体代码，所以它在JVM性能调优中使用得非常多。</p><h2 id="三、排查步骤" tabindex="-1">三、排查步骤 <a class="header-anchor" href="#三、排查步骤" aria-label="Permalink to “三、排查步骤”">​</a></h2><p>Java开发中遇到线上服务器cpu占用过高问题如何解决？</p><ol><li>top拿到cpu占用高的进程ID</li><li>根据进程ID查看cpu占用高的线程ID</li><li>将线程ID转换成16进制</li><li>jstack分析线程栈信息</li></ol><p>下面我们来一个实例找出某个Java进程中最耗费CPU的Java线程并定位堆栈信息，用到的命令有ps、top、printf、jstack、grep。</p><hr><p><strong>第一步：</strong> 先找出Java进程ID，服务器上的Java应用名称为 wordcount.jar：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@storm-master home] ps -ef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wordcount</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    2860</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2547</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 13</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 02:09</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pts/0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  00:02:03</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wordcount.jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/input</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>得到进程ID为 2860 。</p><hr><p><strong>第二步：</strong> 找出该进程内最耗费CPU的线程，可以使用如下3个命令，这里我们使用第3个命令得出如下结果：</p><ol><li>ps -Lfp pid ： 即 ps -Lfp 2860</li><li>ps -mp pid -o THREAD, tid, time ：即 ps -mp 2860 -o THREAD,tid,time</li><li>top -Hp pid： 即 <strong>top -Hp 2860</strong></li></ol><p>这里用第三个命令：<code>top -Hp 2860</code></p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">top</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Hp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2860</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>输出如下：</p><p><img src="`+e+`" alt="img" loading="lazy"></p><p>TIME列就是各个Java线程耗费的CPU时间，显然CPU时间最长的是ID为2968的线程，用</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">printf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;%x\\n&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2968</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>得到2968的十六进制值为b98，下面会用到。</p><hr><p><strong>第三步：</strong> 终于轮到jstack上场了，它用来输出进程2860的堆栈信息，然后根据线程ID的十六进制值grep，如下：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@storm-master home] jstack 2860 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b98</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;SessionTracker&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prio=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tid=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x00007f55a44e4800</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nid=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xb53</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Object.wait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() [0x00007f558e06c000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>可以看到CPU消耗在SessionTracker这个类的Object.wait()，于是就能很容易的定位到相关的代码了。</p><p>当然，可以 <code>jstack -l pid &gt; /tmp/thread.txt</code> 在导出的文件中搜索，就可以定位到具体的线程类。</p><p>参数：-l long listings，打印出额外的锁信息，在发生死锁时可用jstack -l pid来观察锁持有情况</p><p>示例</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>jstack -l 7052 &gt;&gt; thread.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><p><strong>第四步：</strong>分析堆栈信息</p><p>将thread.txt下载到本地，使用IBM Thread and Monitor Dump Analyzer for Java打开分析</p><p><img src="`+p+'" alt="img" loading="lazy"></p><p><img src="'+t+'" alt="img" loading="lazy"></p><hr><h2 id="四、其他问题排查思路" tabindex="-1">四、其他问题排查思路 <a class="header-anchor" href="#四、其他问题排查思路" aria-label="Permalink to “四、其他问题排查思路”">​</a></h2><p><strong>查看某进程及某线程占用 CPU 的例子</strong></p><ul><li><code>jps</code>: 列出 java 进程,找到 pid.</li><li><code>pidstat -p pid -u 1 3 -u -t</code>: 查看 pid 的进程所有线程的 cpu 使用情况。</li><li><code>jstack -l pid &gt; /tmp/thread.txt</code>: 导出指定 Java 应用的所有线程。</li></ul><p>然后查看 <code>nid=xxx</code>(即第二步里线程号的线程),即可定位到某段代码。</p><p><strong>查看某进程及某线程占用 IO 的例子</strong></p><ul><li><code>jps</code>: 列出 java 进程,找到 pid.</li><li><code>pidstat -p pid -u 1 3 -d -t</code>: 查看 pid 的进程所有线程的 IO 使用情况。</li><li><code>jstack -l pid &gt; /tmp/thread.txt</code>: 导出指定 Java 应用的所有线程。</li></ul><p>然后查看 <code>nid=xxx</code>(即第二步里线程号的线程),即可定位到某段代码。</p><p><a href="https://www.cnblogs.com/dennyzhangdd/p/11585971.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/dennyzhangdd/p/11585971.html</a></p>',60)])])}const u=i(h,[["render",r]]);export{b as __pageData,u as default};
