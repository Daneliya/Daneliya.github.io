import{_ as r,c as t,o as s,ah as i}from"./chunks/framework.D5cOWG0Y.js";const g=JSON.parse('{"title":"Docker常用命令合集","description":"","frontmatter":{"title":"Docker常用命令合集","autoGroup-1":"容器化部署Docker","autoSort":9,"tags":["Linux","Docker"],"categories":["Linux","Docker"]},"headers":[],"relativePath":"Java/容器/Docker/1_Docker常用命令合集.md","filePath":"Java/容器/Docker/1_Docker常用命令合集.md","lastUpdated":1755802517000}'),o={name:"Java/容器/Docker/1_Docker常用命令合集.md"};function a(n,e,l,p,d,c){return s(),t("div",null,[...e[0]||(e[0]=[i('<ul><li><p>搜索镜像：docker search name</p><p>镜像官网：<a href="https://hub.docker.com" target="_blank" rel="noreferrer">https://hub.docker.com</a></p></li><li><p>构建容器：docker run -itd --name=mycentos centos:7</p><ul><li><strong>-i</strong> ：表示以交互模式运行容器（让容器的标准输入保持打开）</li><li><strong>-d</strong>：表示后台运行容器，并返回容器ID</li><li><strong>-t</strong>：为容器重新分配一个伪输入终端 { &quot;registry-mirrors&quot;: [&quot;<a href="https://5xok66d4.mirror.aliyuncs.com" target="_blank" rel="noreferrer">https://5xok66d4.mirror.aliyuncs.com</a>&quot;] }</li><li><strong>--name</strong>：为容器指定名称 查看本地所有的容器：docker ps -a</li></ul></li><li><p>查看本地所有的容器：<strong>docker ps -a</strong></p></li><li><p>查看本地正在运行的容器：<strong>docker ps</strong></p></li><li><p>停止容器：<strong>docker stop id或name</strong></p></li><li><p>一次性停止所有容器：<strong>docker stop $(docker ps -a -q)</strong></p></li><li><p>启动容器：**docker start id或name****</p></li><li><p>重启容器：<strong>docker restart id或name</strong></p></li><li><p>删除容器：<strong>docker rm id或name</strong></p></li><li><p>强制删除容器：<strong>docker rmi -f id或name</strong></p></li><li><p>查看容器详细信息：<strong>docker inspect id或name</strong></p></li><li><p>进入容器：<strong>docker exec -it id /bin/bash</strong></p></li><li><p>获取所有容器的id：<strong>docker ps -a -q</strong> 或 <strong>docker ps -aq</strong></p></li><li><p>查看容器日志：<strong>docker ps logs id/name</strong></p></li><li><p>动态查看日志：<strong>docker ps logs -f id/name</strong></p></li><li><p>查看容器创建的网络：<strong>docker network ls</strong></p></li><li><p>删除网络：<strong>docker network rm container_name_net</strong></p></li></ul><p>容器启动之attached和detached模式</p><p>两种模式最简单的对比理解就是：attached模式在前台运行，detached模式在后台运行。</p><p>detached模式的开启方法，就是加一个参数<code>-d</code>或者<code>--detach</code>，一般我们采用的都是这种方式，命令如下：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 80:80</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>attached模式可能调试起来更为方便，因此Docker也提供了detached模式转换attached模式：<code>docker attach id/name</code></p><p>镜像的导入与导出</p><ul><li>镜像的导出：<strong>docker image save 镜像名称:版本 -o 导出的文件名</strong></li><li>镜像的导入：<strong>docker image load -i 镜像地址+名称</strong></li></ul>',8)])])}const h=r(o,[["render",a]]);export{g as __pageData,h as default};
