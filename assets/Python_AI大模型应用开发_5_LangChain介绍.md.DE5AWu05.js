import{_ as a,c as i,o as n,ah as t}from"./chunks/framework.D5cOWG0Y.js";const c=JSON.parse('{"title":"LangChain介绍","description":"","frontmatter":{"title":"LangChain介绍","tags":["Python"],"categories":["Python"]},"headers":[],"relativePath":"Python/AI大模型应用开发/5_LangChain介绍.md","filePath":"Python/AI大模型应用开发/5_LangChain介绍.md","lastUpdated":1755802517000}'),s={name:"Python/AI大模型应用开发/5_LangChain介绍.md"};function e(r,l,o,h,g,d){return n(),i("div",null,[...l[0]||(l[0]=[t('<h2 id="一、为什么我们需要langchain" tabindex="-1">一、为什么我们需要LangChain？ <a class="header-anchor" href="#一、为什么我们需要langchain" aria-label="Permalink to “一、为什么我们需要LangChain？”">​</a></h2><h3 id="_1、从api调用到完整ai应用的跨越" tabindex="-1">1、从API调用到完整AI应用的跨越 <a class="header-anchor" href="#_1、从api调用到完整ai应用的跨越" aria-label="Permalink to “1、从API调用到完整AI应用的跨越”">​</a></h3><p>原始API调用的局限性</p><ul><li>缺乏记忆能力 <ul><li>每次API请求独立，无法记住历史对话。</li><li>示例：先问“爱因斯坦是谁？”，再问“他是哪国人？”时，AI因缺乏上下文而无法理解“他”指代谁。</li></ul></li><li>上下文窗口限制 <ul><li>大模型的上下文长度有限，无法一次性处理超长文档（如500页PDF）。</li><li>超出部分会被截断，导致信息丢失。</li></ul></li><li>不擅长精确计算 <ul><li>AI并非真正的计算器，而是基于概率预测下一个Token。</li><li>在数学问题上容易出错，如错误计算订单总额，存在业务风险。</li></ul></li></ul><h3 id="_2、传统解决方案及其痛点" tabindex="-1">2、传统解决方案及其痛点 <a class="header-anchor" href="#_2、传统解决方案及其痛点" aria-label="Permalink to “2、传统解决方案及其痛点”">​</a></h3><p>传统手动编码解决思路</p><ul><li>实现记忆功能 <ul><li>使用列表手动存储历史消息，并在每次请求时将完整对话历史传给AI。</li></ul></li><li>处理长文档知识 <ul><li>将文档转换为向量，存入向量数据库。</li><li>用户提问时，通过相似性搜索提取相关段落，仅将相关内容作为上下文传给AI。</li></ul></li><li>解决计算问题 <ul><li>让AI生成执行计算的代码（如Python代码），再由程序执行代码得出准确结果。</li></ul></li><li>开发痛点 <ul><li>需重复编写相似的提示词和处理逻辑。</li><li>开发效率低，维护成本高。</li></ul></li></ul><hr><h3 id="_3、langchain-专为ai应用开发而生的框架" tabindex="-1">3、LangChain：专为AI应用开发而生的框架 <a class="header-anchor" href="#_3、langchain-专为ai应用开发而生的框架" aria-label="Permalink to “3、LangChain：专为AI应用开发而生的框架”">​</a></h3><p>LangChain的核心理念</p><ul><li>超越简单的API调用 <ul><li>主张AI应用应具备： <ul><li><strong>上下文感知</strong>：理解对话历史。</li><li><strong>外部数据连接</strong>：访问知识库、数据库等。</li><li><strong>工具调用能力</strong>：借助计算器、搜索引擎等外部工具完成任务。</li></ul></li></ul></li><li>目标 <ul><li>简化复杂AI应用的开发流程，让开发者专注于应用逻辑而非底层细节。</li></ul></li></ul><hr><h3 id="_4、langchain的核心组件" tabindex="-1">4、LangChain的核心组件 <a class="header-anchor" href="#_4、langchain的核心组件" aria-label="Permalink to “4、LangChain的核心组件”">​</a></h3><ul><li>常用组件 <ul><li><strong>Models</strong>：支持多种大模型。</li><li><strong>Prompts &amp; Templates</strong>：提示词管理与模板化。</li><li><strong>Memory</strong>：对话状态管理。</li><li><strong>Document Loaders</strong>：加载各类文档（PDF、Word等）。</li><li><strong>Retrievers</strong>：从数据库中检索相关信息。</li><li><strong>Chains</strong>：将多个步骤或组件串联成工作流。</li><li><strong>Agents</strong>：能自主决策并调用工具的智能体。</li></ul></li></ul><h3 id="_5、langchain的优势" tabindex="-1">5、LangChain的优势 <a class="header-anchor" href="#_5、langchain的优势" aria-label="Permalink to “5、LangChain的优势”">​</a></h3><ul><li>简化开发 <ul><li>示例：实现记忆 <ul><li>无需手动维护消息列表。</li><li>创建 <code>ConversationBufferMemory</code> 实例，与模型一起传入对话链。</li><li>框架自动处理历史消息的传递与更新，为AI“外接记忆”。</li></ul></li></ul></li><li>统一接口（抽象层） <ul><li>模型抽象： <ul><li>无论后端是 OpenAI、百度文心、阿里通义千问还是其他模型，都可视为 <code>ChatModel</code>。</li><li>切换模型时，只需修改初始化代码，业务逻辑无需大改。</li></ul></li><li>数据库抽象： <ul><li>支持多种向量数据库（如Pinecone、Chroma、Faiss等）。</li><li>切换数据库时，除初始化语句外，其余代码基本无需改动。</li></ul></li></ul></li><li>提升灵活性与可维护性 <ul><li>极大降低开发复杂度。</li><li>应用更易于维护、升级和扩展。</li></ul></li></ul><h2 id="二、与assistant-api的对比" tabindex="-1">二、与Assistant API的对比 <a class="header-anchor" href="#二、与assistant-api的对比" aria-label="Permalink to “二、与Assistant API的对比”">​</a></h2><h3 id="_1、openai-assistants-api-开箱即用的智能助手" tabindex="-1">1、OpenAI Assistants API：开箱即用的智能助手 <a class="header-anchor" href="#_1、openai-assistants-api-开箱即用的智能助手" aria-label="Permalink to “1、OpenAI Assistants API：开箱即用的智能助手”">​</a></h3><p>Assistants API 简介</p><ul><li>定义与定位 <ul><li>Assistants API 是 OpenAI 推出的高级 API，旨在简化智能助手的开发。</li><li>它不仅调用模型，还集成了<strong>对话历史管理、文件访问和工具调用</strong>等能力。</li></ul></li><li>核心优势 <ol><li>自动维护对话历史 <ul><li>无需开发者手动管理消息列表，API 自动保留上下文，解决“记忆”问题。</li></ul></li><li>内置工具支持 <ul><li>支持多种外部工具，如： <ul><li><strong>文件检索器</strong>：从上传的文档中检索信息。</li><li><strong>代码解释器</strong>：执行代码进行精确计算或数据处理。</li><li><strong>自定义函数</strong>：调用开发者定义的外部函数，扩展AI能力。</li></ul></li></ul></li></ol></li></ul><hr><h3 id="_2、langchain-通用、灵活的ai应用开发框架" tabindex="-1">2、LangChain：通用、灵活的AI应用开发框架 <a class="header-anchor" href="#_2、langchain-通用、灵活的ai应用开发框架" aria-label="Permalink to “2、LangChain：通用、灵活的AI应用开发框架”">​</a></h3><p>LangChain 核心理念</p><ul><li>框架定位 <ul><li>LangChain 是一个<strong>开源的应用开发框架</strong>，旨在构建强大的AI应用。</li><li>强调AI应用应能<strong>感知上下文、连接外部数据、调用工具</strong>进行交互。</li></ul></li><li>核心组件 <ul><li>提供丰富的组件（Models, Prompts, Memory, Retrievers, Chains, Agents 等）来构建复杂应用。</li></ul></li></ul><hr><h3 id="_3、assistants-api-与-langchain-的关键区别" tabindex="-1">3、Assistants API 与 LangChain 的关键区别 <a class="header-anchor" href="#_3、assistants-api-与-langchain-的关键区别" aria-label="Permalink to “3、Assistants API 与 LangChain 的关键区别”">​</a></h3><h4 id="_3-1、本质区别" tabindex="-1">3.1、本质区别 <a class="header-anchor" href="#_3-1、本质区别" aria-label="Permalink to “3.1、本质区别”">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">比较维度</th><th style="text-align:left;"><strong>Assistants API</strong></th><th style="text-align:left;"><strong>LangChain</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>本质</strong></td><td style="text-align:left;"><strong>API</strong>（OpenAI 提供的服务）</td><td style="text-align:left;"><strong>应用框架</strong>（开源开发工具）</td></tr><tr><td style="text-align:left;"><strong>使用方式</strong></td><td style="text-align:left;">发送提示，接收响应，许多细节由 OpenAI 后台处理。</td><td style="text-align:left;">利用组件和工具<strong>构建</strong>应用，控制力更强。</td></tr></tbody></table><h4 id="_3-2、支持模型范围" tabindex="-1">3.2、支持模型范围 <a class="header-anchor" href="#_3-2、支持模型范围" aria-label="Permalink to “3.2、支持模型范围”">​</a></h4><ul><li>Assistants API <ul><li>仅支持 <strong>OpenAI 自家的模型</strong>（如 GPT-4）。</li><li>无法直接集成其他厂商的模型（如百度文心、阿里通义千问）。</li></ul></li><li>LangChain <ul><li><strong>通用框架</strong>，不隶属于任何AI服务提供商。</li><li>可集成<strong>多种来源的AI模型</strong>，提供极大的模型选择灵活性。</li></ul></li></ul><h4 id="_3-3、简易性-vs-灵活性" tabindex="-1">3.3、简易性 vs. 灵活性 <a class="header-anchor" href="#_3-3、简易性-vs-灵活性" aria-label="Permalink to “3.3、简易性 vs. 灵活性”">​</a></h4><ul><li>Assistants API <ul><li><strong>优点</strong>：使用简单，上手快。OpenAI 隐藏了大量技术细节，适合快速开发。</li><li><strong>缺点</strong>：定制化能力有限，开发者难以进行深度调整。</li></ul></li><li>LangChain <ul><li><strong>优点</strong>：功能极其灵活，作为<strong>开源框架</strong>，可查看、修改源码，满足复杂和高度定制化的需求。</li><li><strong>缺点</strong>：学习曲线相对陡峭，需要更多配置。</li></ul></li></ul><h4 id="_3-4、应用范围" tabindex="-1">3.4、应用范围 <a class="header-anchor" href="#_3-4、应用范围" aria-label="Permalink to “3.4、应用范围”">​</a></h4><ul><li>Assistants API <ul><li>主要用于构建<strong>对话型应用</strong>，如聊天机器人、虚拟助手。</li></ul></li><li>LangChain <ul><li>应用范围更广，可构建从<strong>简单聊天机器人到复杂AI系统</strong>的各类应用，因为它能轻松整合各种外部资源和接口。</li></ul></li></ul><hr><h3 id="_4、选择建议" tabindex="-1">4、选择建议 <a class="header-anchor" href="#_4、选择建议" aria-label="Permalink to “4、选择建议”">​</a></h3><ul><li><strong>选择 Assistants API 如果：</strong><ul><li>你希望<strong>快速上手</strong>，开发基于 <strong>OpenAI 模型</strong>的应用。</li><li>项目需求相对标准，不需要深度定制。</li><li>优先考虑开发效率和简单性。</li></ul></li><li><strong>选择 LangChain 如果：</strong><ul><li>你需要构建<strong>更广泛、更复杂或高度定制化</strong>的应用。</li><li>希望应用能<strong>支持多种AI模型</strong>（包括国产大模型），并具备灵活切换的能力。</li><li>需要对应用的每个环节有<strong>完全的控制权</strong>。</li></ul></li></ul><h2 id="三、安装langchain及了解核心模块" tabindex="-1">三、安装LangChain及了解核心模块 <a class="header-anchor" href="#三、安装langchain及了解核心模块" aria-label="Permalink to “三、安装LangChain及了解核心模块”">​</a></h2><h3 id="_1、langchain的安装方法" tabindex="-1">1、LangChain的安装方法 <a class="header-anchor" href="#_1、langchain的安装方法" aria-label="Permalink to “1、LangChain的安装方法”">​</a></h3><p>LangChain的安装非常简单，与安装其他Python包的方式完全相同。</p><h3 id="安装步骤" tabindex="-1">安装步骤： <a class="header-anchor" href="#安装步骤" aria-label="Permalink to “安装步骤：”">​</a></h3><ol><li><p><strong>在 Jupyter Notebook 中安装：</strong> 在代码单元格中输入以下命令并运行：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>!pip install langchain</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>在终端或命令提示符 (CMD) 中安装：</strong> 打开终端，输入以下命令：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>pip install langchain</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>（对于Python 3环境，可能需要使用 <code>pip3 install langchain</code>）</p></li></ol><blockquote><p><strong>提示</strong>：LangChain的官方文档是学习的重要资源，建议收藏以备随时查阅。</p></blockquote><hr><h3 id="_2、langchain的核心组件" tabindex="-1">2、LangChain的核心组件 <a class="header-anchor" href="#_2、langchain的核心组件" aria-label="Permalink to “2、LangChain的核心组件”">​</a></h3><p>LangChain提供了许多模块化组件，这些组件是构建复杂AI应用的基石。了解这些核心组件是学习LangChain的关键。</p><h4 id="_2-1、model-模型" tabindex="-1">2.1、Model (模型) <a class="header-anchor" href="#_2-1、model-模型" aria-label="Permalink to “2.1、Model (模型)”">​</a></h4><ul><li><strong>功能</strong>：提供语言理解和生成的核心能力，是AI应用的“大脑”。</li><li><strong>说明</strong>：可以集成来自不同AI服务提供商的模型，如OpenAI、百度文心、阿里通义等。</li></ul><h4 id="_2-2、memory-记忆" tabindex="-1">2.2、Memory (记忆) <a class="header-anchor" href="#_2-2、memory-记忆" aria-label="Permalink to “2.2、Memory (记忆)”">​</a></h4><ul><li><strong>功能</strong>：用于存储和管理对话历史或相关的上下文信息。</li><li><strong>重要性</strong>：是构建<strong>对话型AI应用</strong>的关键，确保应用能保持对话的连贯性和上下文感知能力。</li></ul><h4 id="_2-3、chain-链" tabindex="-1">2.3、Chain (链) <a class="header-anchor" href="#_2-3、chain-链" aria-label="Permalink to “2.3、Chain (链)”">​</a></h4><ul><li><strong>功能</strong>：将不同的组件（如模型、提示词、工具等）<strong>串联</strong>起来，形成一个有序的执行流程。</li><li><strong>优势</strong>：允许创建复杂的、多步骤的应用流程，每个组件负责处理特定的任务。</li></ul><h4 id="_2-4、retriever-检索器" tabindex="-1">2.4、Retriever (检索器) <a class="header-anchor" href="#_2-4、retriever-检索器" aria-label="Permalink to “2.4、Retriever (检索器)”">​</a></h4><ul><li><strong>功能</strong>：负责从外部信息源（如文档、数据库、网页）中检索相关信息。</li><li><strong>重要性</strong>：极大地扩展了模型的知识面，通过提供相关上下文，显著提高回答的准确性和相关性。</li></ul><h4 id="_2-5、agent-智能体" tabindex="-1">2.5、Agent (智能体) <a class="header-anchor" href="#_2-5、agent-智能体" aria-label="Permalink to “2.5、Agent (智能体)”">​</a></h4><ul><li><strong>定义</strong>：一个基于大模型的、能够执行一系列动作的智能体。</li><li>核心理念： <ul><li>利用大模型的<strong>推理能力</strong>。</li><li>能够根据当前任务和环境，<strong>动态评估</strong>并<strong>自主决定</strong>下一步的行动路径（例如，是直接回答、查询数据库还是执行计算）。</li><li>可以调用预定义的工具（如搜索、计算）来完成复杂任务。</li></ul></li></ul>',56)])])}const p=a(s,[["render",e]]);export{c as __pageData,p as default};
