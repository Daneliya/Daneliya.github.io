import{_ as p,c as n,o as l,j as s,ah as t,a}from"./chunks/framework.D5cOWG0Y.js";const b=JSON.parse('{"title":"MongoTemplate基本用法","description":"","frontmatter":{"title":"MongoTemplate基本用法","date":"2023-12-22","tags":["MongoDB"],"categories":["MongoDB"]},"headers":[],"relativePath":"数据库/MongoDB/2_MongoTemplate基本用法.md","filePath":"数据库/MongoDB/2_MongoTemplate基本用法.md","lastUpdated":1756054686000}'),e={name:"数据库/MongoDB/2_MongoTemplate基本用法.md"},h={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},k={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"6.76ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2988 1000","aria-hidden":"true"},r={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},E={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"8.717ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 3853 1000","aria-hidden":"true"};function d(g,i,y,o,u,c){return l(),n("div",null,[i[13]||(i[13]=s("p",null,"SpringBoot集成MongoDB使用MongoTemplate",-1)),i[14]||(i[14]=s("blockquote",null,[s("p",null,[a("官方文档："),s("a",{href:"https://www.mongodb.com/docs/v4.4/reference/operator/query/",target:"_blank",rel:"noreferrer"},"Query and Projection Operators — MongoDB Manual")])],-1)),i[15]||(i[15]=s("h2",{id:"mongotemplate相关概念",tabindex:"-1"},[a("MongoTemplate相关概念 "),s("a",{class:"header-anchor",href:"#mongotemplate相关概念","aria-label":"Permalink to “MongoTemplate相关概念”"},"​")],-1)),s("ul",null,[i[10]||(i[10]=s("li",null,"MongoTemplate：官方提供的操作MongoDB的对象。位于：org.springframework.data.mongodb.core。 使用的时候，需要注入。",-1)),i[11]||(i[11]=s("li",null,[a("基本查询 "),s("ul",null,[s("li",null,'Query：用于创建查询条件的对象。 位于：package org.springframework.data.mongodb.core.query。 使用时一般需要传入如"Criteria"构建的查询条件。'),s("li",null,"Criteria: 构建具体查询条件的对象，和Query位于同个包下。")])],-1)),s("li",null,[i[9]||(i[9]=a("管道操作 ",-1)),s("ul",null,[s("li",null,[i[4]||(i[4]=a("AggregationOperation：聚合管道的操作对象，这是适用于Aggregate Pipeline Stages的操作，比如",-1)),s("mjx-container",h,[(l(),n("svg",k,[...i[0]||(i[0]=[t("",1)])])),i[1]||(i[1]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"g"),s("mi",null,"r"),s("mi",null,"o"),s("mi",null,"u"),s("mi",null,"p"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mo",null,"/")])])],-1))]),i[5]||(i[5]=a("lookup/",-1)),s("mjx-container",r,[(l(),n("svg",E,[...i[2]||(i[2]=[t("",1)])])),i[3]||(i[3]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"u"),s("mi",null,"n"),s("mi",null,"w"),s("mi",null,"i"),s("mi",null,"n"),s("mi",null,"d"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mo",null,"/")])])],-1))]),i[6]||(i[6]=a("sort.......使用的时候，需要先构建对应的聚合操作，比如$group（需要构建具体操作）， 可以创建多个，最后一并传入到Aggregation对象中，再交给template去执行管道聚合。",-1))]),i[7]||(i[7]=s("li",null,"Aggregation：Pipeline stage的集合，也就是上面AggregationOperation的集合，把上面的所有聚合操作存在一起，template调用aggregate方法的时候，传入该对象。",-1)),i[8]||(i[8]=s("li",null,"以上类位于 package org.springframework.data.mongodb.core.aggregation。",-1))])]),i[12]||(i[12]=s("li",null,[a("高级操作 "),s("ul",null,[s("li",null,"Aggregates: Pipeline stage操作对象。 和Aggregation有几乎一样的功能，但是会更加灵活，一般除了预先提供的操作符，还可以自己传入Bson操作对象去灵活实现。 整体的使用难度，比Aggregation可能高一些。"),s("li",null,'Bson、BsonDocument、BsonField: Bson就是灵活的表达式，查询条件、聚合操作符之类的构建定义，都可以由它接收，并最后传给template的aggregate方法去执行聚合操作。BsonDocument则是Bson的具体实现，用于灵活构建表达式的对象。BsonField也是构建灵活的聚合表达式的一个类，比如快速地定义{"count": { $sum: 1 } ，作为聚合操作的一部分传入到具体的聚合阶段中。'),s("li",null,"以上类位于 package com.mongodb.client.model; Bson/BsonDocument则是另外的包org.bson中。感兴趣自行去源码中查找。")])],-1))]),i[16]||(i[16]=t("",50))])}const m=p(e,[["render",d]]);export{b as __pageData,m as default};
