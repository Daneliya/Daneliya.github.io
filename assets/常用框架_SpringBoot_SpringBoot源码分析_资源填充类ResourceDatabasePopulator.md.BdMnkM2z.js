import{_ as a,c as e,o as i,ah as t}from"./chunks/framework.D5cOWG0Y.js";const k=JSON.parse('{"title":"资源填充类ResourceDatabasePopulator","description":"","frontmatter":{"title":"资源填充类ResourceDatabasePopulator","tags":["SpringBoot"],"categories":["SpringBoot"]},"headers":[],"relativePath":"常用框架/SpringBoot/SpringBoot源码分析/资源填充类ResourceDatabasePopulator.md","filePath":"常用框架/SpringBoot/SpringBoot源码分析/资源填充类ResourceDatabasePopulator.md","lastUpdated":1756054686000}'),r={name:"常用框架/SpringBoot/SpringBoot源码分析/资源填充类ResourceDatabasePopulator.md"};function n(l,s,o,p,d,c){return i(),e("div",null,[...s[0]||(s[0]=[t(`<h2 id="_1、类resourcedatabasepopulator介绍" tabindex="-1">1、类ResourceDatabasePopulator介绍 <a class="header-anchor" href="#_1、类resourcedatabasepopulator介绍" aria-label="Permalink to “1、类ResourceDatabasePopulator介绍”">​</a></h2><p>使用外部资源中定义的 SQL 脚本填充、初始化或清理数据库。</p><ul><li>调用<a href="https://docs.spring.io/spring-framework/docs/5.3.13/javadoc-api/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.html#addScript-org.springframework.core.io.Resource-" target="_blank" rel="noreferrer">addScript(org.springframework.core.io.Resource)</a>以添加单个 SQL 脚本位置。</li><li>调用<a href="https://docs.spring.io/spring-framework/docs/5.3.13/javadoc-api/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.html#addScripts-org.springframework.core.io.Resource...-" target="_blank" rel="noreferrer">addScripts(org.springframework.core.io.Resource...)</a>以添加多个 SQL 脚本位置。</li><li>请参阅此类中的 setter 方法以获取更多配置选项。</li><li>调用<a href="https://docs.spring.io/spring-framework/docs/5.3.13/javadoc-api/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.html#populate-java.sql.Connection-" target="_blank" rel="noreferrer">populate(java.sql.Connection)</a>或<a href="https://docs.spring.io/spring-framework/docs/5.3.13/javadoc-api/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.html#execute-javax.sql.DataSource-" target="_blank" rel="noreferrer">execute(javax.sql.DataSource)</a>使用配置的脚本初始化或清理数据库。</li></ul><h2 id="_2、方法总结" tabindex="-1">2、方法总结 <a class="header-anchor" href="#_2、方法总结" aria-label="Permalink to “2、方法总结”">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">修饰符和类型</th><th style="text-align:left;">方法及说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>void</code></td><td style="text-align:left;"><code>**</code>*<em><a href="https://docs.spring.io/spring-framework/docs/5.3.13/javadoc-api/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.html#addScript-org.springframework.core.io.Resource-" target="_blank" rel="noreferrer">addScript</a>*</em><code>**(Resource script)</code>添加要执行的脚本以初始化或清理数据库。</td></tr><tr><td style="text-align:left;"><code>void</code></td><td style="text-align:left;"><code>**</code>*<em><a href="https://docs.spring.io/spring-framework/docs/5.3.13/javadoc-api/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.html#addScripts-org.springframework.core.io.Resource...-" target="_blank" rel="noreferrer">addScripts</a>*</em><code>**(Resource... scripts)</code>添加多个脚本来执行以初始化或清理数据库。</td></tr><tr><td style="text-align:left;"><code>void</code></td><td style="text-align:left;"><code>**</code>*<em><a href="https://docs.spring.io/spring-framework/docs/5.3.13/javadoc-api/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.html#execute-javax.sql.DataSource-" target="_blank" rel="noreferrer">execute</a>*</em><code>**(DataSource dataSource)</code>针对<code>ResourceDatabasePopulator</code>给定的 <a href="https://docs.oracle.com/javase/8/docs/api/javax/sql/DataSource.html?is-external=true" target="_blank" rel="noreferrer">DataSource</a>.</td></tr><tr><td style="text-align:left;"><code>void</code></td><td style="text-align:left;"><code>**</code>*<em><a href="https://docs.spring.io/spring-framework/docs/5.3.13/javadoc-api/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.html#populate-java.sql.Connection-" target="_blank" rel="noreferrer">populate</a>*</em><code>**(Connection connection)</code>使用提供的 JDBC 连接填充、初始化或清理数据库。</td></tr><tr><td style="text-align:left;"><code>void</code></td><td style="text-align:left;"><code>**</code>*<em><a href="https://docs.spring.io/spring-framework/docs/5.3.13/javadoc-api/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.html#setBlockCommentEndDelimiter-java.lang.String-" target="_blank" rel="noreferrer">setBlockCommentEndDelimiter</a>*</em><code>**(String blockCommentEndDelimiter)</code>设置标识 SQL 脚本中的块注释的结束分隔符。</td></tr><tr><td style="text-align:left;"><code>void</code></td><td style="text-align:left;"><code>**</code>*<em><a href="https://docs.spring.io/spring-framework/docs/5.3.13/javadoc-api/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.html#setBlockCommentStartDelimiter-java.lang.String-" target="_blank" rel="noreferrer">setBlockCommentStartDelimiter</a>*</em><code>**(String blockCommentStartDelimiter)</code>设置标识 SQL 脚本中的块注释的起始分隔符。</td></tr><tr><td style="text-align:left;"><code>void</code></td><td style="text-align:left;"><code>**</code>*<em><a href="https://docs.spring.io/spring-framework/docs/5.3.13/javadoc-api/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.html#setCommentPrefix-java.lang.String-" target="_blank" rel="noreferrer">setCommentPrefix</a>*</em><code>**(String commentPrefix)</code>设置标识 SQL 脚本中单行注释的前缀。</td></tr><tr><td style="text-align:left;"><code>void</code></td><td style="text-align:left;"><code>**</code>*<em><a href="https://docs.spring.io/spring-framework/docs/5.3.13/javadoc-api/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.html#setCommentPrefixes-java.lang.String...-" target="_blank" rel="noreferrer">setCommentPrefixes</a>*</em><code>**(String... commentPrefixes)</code>设置标识 SQL 脚本中单行注释的前缀。</td></tr><tr><td style="text-align:left;"><code>void</code></td><td style="text-align:left;"><code>**</code>*<em><a href="https://docs.spring.io/spring-framework/docs/5.3.13/javadoc-api/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.html#setContinueOnError-boolean-" target="_blank" rel="noreferrer">setContinueOnError</a>*</em><code>**(boolean continueOnError)</code>指示应记录 SQL 中的所有失败但不会导致失败的标志。</td></tr><tr><td style="text-align:left;"><code>void</code></td><td style="text-align:left;"><code>**</code>*<em><a href="https://docs.spring.io/spring-framework/docs/5.3.13/javadoc-api/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.html#setIgnoreFailedDrops-boolean-" target="_blank" rel="noreferrer">setIgnoreFailedDrops</a>*</em><code>**(boolean ignoreFailedDrops)</code>指示<code>DROP</code>可以忽略失败的 SQL 语句的标志。</td></tr><tr><td style="text-align:left;"><code>void</code></td><td style="text-align:left;"><code>**</code>*<em><a href="https://docs.spring.io/spring-framework/docs/5.3.13/javadoc-api/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.html#setScripts-org.springframework.core.io.Resource...-" target="_blank" rel="noreferrer">setScripts</a>*</em><code>**(Resource... scripts)</code>设置要执行的脚本以初始化或清理数据库，替换之前添加的任何脚本。</td></tr><tr><td style="text-align:left;"><code>void</code></td><td style="text-align:left;"><code>**</code>*<em><a href="https://docs.spring.io/spring-framework/docs/5.3.13/javadoc-api/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.html#setSeparator-java.lang.String-" target="_blank" rel="noreferrer">setSeparator</a>*</em><code>**(String separator)</code>指定语句分隔符（如果是自定义分隔符）。</td></tr><tr><td style="text-align:left;"><code>void</code></td><td style="text-align:left;"><code>**</code>*<em><a href="https://docs.spring.io/spring-framework/docs/5.3.13/javadoc-api/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.html#setSqlScriptEncoding-java.lang.String-" target="_blank" rel="noreferrer">setSqlScriptEncoding</a>*</em><code>**(String sqlScriptEncoding)</code>如果与平台编码不同，请为配置的 SQL 脚本指定编码。</td></tr></tbody></table><h2 id="_3、通过注解-postconstruct实现springboot项目启动初始化数据-执行sql文件" tabindex="-1">3、通过注解@PostConstruct实现SpringBoot项目启动初始化数据（执行sql文件） <a class="header-anchor" href="#_3、通过注解-postconstruct实现springboot项目启动初始化数据-执行sql文件" aria-label="Permalink to “3、通过注解@PostConstruct实现SpringBoot项目启动初始化数据（执行sql文件）”">​</a></h2><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cn.hutool.core.date.DateUtil;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lombok.extern.slf4j.Slf4j;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.context.annotation.Configuration;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.core.io.ClassPathResource;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javax.annotation.PostConstruct;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javax.sql.DataSource;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Date;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 项目启动初始化数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @Author: xxl</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @Date: 2024/5/3 下午6:02</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Slf4j</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DataInitializationConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DataSource dataSource;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PostConstruct</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 项目启动初始化基本数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;数据初始化开始: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DateUtil.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 通过直接读取sql文件执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ClassPathResource resources </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassPathResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sql/client_api_init.sql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ResourceDatabasePopulator resourceDatabasePopulator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ResourceDatabasePopulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        resourceDatabasePopulator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addScripts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resources);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        resourceDatabasePopulator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dataSource);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;数据初始化结束: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DateUtil.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>参考资料</p><p><a href="https://www.cnblogs.com/tanqingfu1/p/16551756.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/tanqingfu1/p/16551756.html</a></p>`,9)])])}const g=a(r,[["render",n]]);export{k as __pageData,g as default};
