import{_ as i,c as t,o as a,ah as n}from"./chunks/framework.D5cOWG0Y.js";const g=JSON.parse('{"title":"使用Jetty容器","description":"","frontmatter":{"title":"使用Jetty容器","tags":["SpringBoot","源码"],"categories":["SpringBoot"]},"headers":[],"relativePath":"常用框架/SpringBoot/SpringBoot程序开发/7_使用Jetty容器.md","filePath":"常用框架/SpringBoot/SpringBoot程序开发/7_使用Jetty容器.md","lastUpdated":1756054686000}'),e={name:"常用框架/SpringBoot/SpringBoot程序开发/7_使用Jetty容器.md"};function l(r,s,h,p,k,d){return a(),t("div",null,[...s[0]||(s[0]=[n(`<h2 id="一、前言" tabindex="-1">一、前言 <a class="header-anchor" href="#一、前言" aria-label="Permalink to “一、前言”">​</a></h2><p>在我们使用 SpringBoot 开发Web应用时，会引入spring-boot-starter-web这个starter组件，其内嵌 Jetty , Tomcat , Undertow三种servlet 容器供大家选择，默认是Tomcat容器，所以我们平时新建项目启动起来，会看见Tomcat相关的一些信息。</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Tomcat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> initialized</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> with</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (http)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>可以看出 Spring Boot 默认使用的是 Tomcat 容器启动的。</p><h2 id="二、tomcat-和jetty对比" tabindex="-1">二、Tomcat 和Jetty对比 <a class="header-anchor" href="#二、tomcat-和jetty对比" aria-label="Permalink to “二、Tomcat 和Jetty对比”">​</a></h2><p>​ 在日常工作中，Spring Boot 默认推荐的配置并一定适用于所有情况，根据项目配置以及环境，选择合适的容器，才能更好的搭建项目。</p><p>​ Tomcat 和Jetty都是一种Servlet引擎，可以将它们比作为中国与美国的关系，虽然 Jetty 正常成长为一个优秀的 Servlet 引擎，但是目前的 Tomcat 的地位仍然难以撼动。相比较来看，它们都有各自的优点与缺点。Tomcat 经过长时间的发展，它已经广泛的被市场接受和认可，相对 Jetty 来说 Tomcat 还是比较稳定和成熟，尤其在企业级应用方面，Tomcat 仍然是第一选择。但是随着 Jetty 的发展，Jetty 的市场份额也在不断提高。</p><p>Jetty的架构比Tomcat的更为简单，Jetty的架构是基于Handler来实现的，主要的扩展功能都可以用Handler来实现，扩展简单。而Tomcat的架构是基于容器设计的，进行扩展是需要了解Tomcat的整体设计结构，不易扩展。</p><p>Jetty和Tomcat性能方面差异不大。 Jetty可以同时处理大量连接而且可以长时间保持连接，适合于web聊天应用等等。Jetty的架构简单，因此作为服务器，Jetty可以按需加载组件，减少不需要的组件，减少了服务器内存开销，从而提高服务器性能。Jetty默认采用NIO（非阻塞IO）结束在处理I/O请求上更占优势，在处理静态资源时，性能较高。Tomcat适合处理少数非常繁忙的链接，也就是说链接生命周期短的话，Tomcat的总体性能更高。 另外，Tomcat默认采用BIO（阻塞IO）处理I/O请求，在处理静态资源时，性能较差。</p><p>作为一个标准的 Servlet 引擎，它们都支持标准的 Servlet 和Java EE 规范。Jetty的应用更加快速，修改简单，对新的Servlet规范的支持较好。 Tomcat目前应用比较广泛，对JavaEE和Servlet的支持更加全面，很多特性会直接集成进来。</p><h2 id="三、修改依赖-使用jetty容器" tabindex="-1">三、修改依赖，使用Jetty容器 <a class="header-anchor" href="#三、修改依赖-使用jetty容器" aria-label="Permalink to “三、修改依赖，使用Jetty容器”">​</a></h2><p>默认情况下，因为 spring-boot-starter-web 自带了 Tomcat，所以我们要使用其它的容器的话，需要将其依赖包排除掉并重新引入新容器。在pom.xml文件，添加spring-boot-starter-jetty 依赖，同时我们需要排除 spring-boot-starter-web 默认的 spring-boot-starter-tomcat 依赖。</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;spring-boot-starter-web&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">exclusions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">exclusion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;spring-boot-starter-tomcat&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">exclusion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">exclusions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;spring-boot-starter-jetty&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="四、jetty-属性配置" tabindex="-1">四、Jetty 属性配置 <a class="header-anchor" href="#四、jetty-属性配置" aria-label="Permalink to “四、Jetty 属性配置”">​</a></h2><table tabindex="0"><thead><tr><th><strong>属性</strong></th><th><strong>默认值</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>server.jetty.accesslog.enabled</strong></td><td>false</td><td>是否打开Jetty日志</td></tr><tr><td><strong>server.jetty.accesslog.dir</strong></td><td></td><td>访问日志所在目录</td></tr><tr><td><strong>server.jetty.threads.max</strong></td><td></td><td>最大线程数</td></tr><tr><td><strong>server.jetty.threads.min</strong></td><td></td><td>最小线程数</td></tr><tr><td><strong>server.jetty.threads.max-queue-capacity</strong></td><td></td><td>最大队列容量</td></tr><tr><td><strong>server.jetty.threads.idle-timeout</strong></td><td></td><td>线程最大空闲时间</td></tr></tbody></table><h2 id="五、测试" tabindex="-1">五、测试 <a class="header-anchor" href="#五、测试" aria-label="Permalink to “五、测试”">​</a></h2><p>修改完pom.xml文件后，需要重新启动SpringBoot项目，此时就可以在日志中看到如下信息。</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Jetty</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> started</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (http/1.1) with context path </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>程序可以使用小巧的Jetty容器来运行SpringBoot项目，但是这种做法也仅仅是在开发过程中使用，在实际的生产环境下依然推荐使用Tomcat作为Web容器。</p>`,19)])])}const o=i(e,[["render",l]]);export{g as __pageData,o as default};
