import{_ as s,c as n,o as i,ah as l,mV as e,mW as p,mX as t,mY as r,mZ as h,m_ as o,m$ as c,n0 as d}from"./chunks/framework.D5cOWG0Y.js";const f=JSON.parse('{"title":"数据同步","description":"","frontmatter":{"title":"数据同步","tags":["数据同步"],"categories":["数据同步"]},"headers":[],"relativePath":"Java/解决方案/数据同步/0_数据同步.md","filePath":"Java/解决方案/数据同步/0_数据同步.md","lastUpdated":1755802517000}'),b={name:"Java/解决方案/数据同步/0_数据同步.md"};function k(u,a,m,g,E,y){return i(),n("div",null,[...a[0]||(a[0]=[l('<h2 id="_1-前言" tabindex="-1">1. 前言 <a class="header-anchor" href="#_1-前言" aria-label="Permalink to “1. 前言”">​</a></h2><p>在实际项目开发中，我们经常将 MySQL 作为业务数据库，用于事务性处理和数据持久化。而ES 作为查询数据库，用来实现读写分离，缓解 MySQL 数据库的查询压力，应对海量数据的复杂查询。</p><p>这其中有一个很重要的问题，就是如何实现 MySQL 数据库和 ES 的数据同步。本文将探讨几种常见的实现方案和技术选型。</p><h2 id="_2-数据同步方案" tabindex="-1">2.数据同步方案 <a class="header-anchor" href="#_2-数据同步方案" aria-label="Permalink to “2.数据同步方案”">​</a></h2><h3 id="_2-1-同步双写" tabindex="-1">2.1 同步双写 <a class="header-anchor" href="#_2-1-同步双写" aria-label="Permalink to “2.1 同步双写”">​</a></h3><p>这是一种最为简单的方式，在将数据写到 MySQL 时，同时将数据写到 ES。</p><p><img src="'+e+`" alt="5a87604b-ed89-4dfc-80a3-69f897b0cee6" loading="lazy"></p><p>伪代码如下</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 新增商品</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Transactional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rollbackFor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addGoods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GoodsDto goodsDto) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //1、保存Mysql</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Goods goods </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Goods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    BeanUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copyProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(goodsDto,goods);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    GoodsMapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     //2、保存ES</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     IndexRequest indexRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IndexRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;goods_index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_doc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     indexRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JSON.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toJSONString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(goods), XContentType.JSON);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     indexRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setRefreshPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WriteRequest.RefreshPolicy.IMMEDIATE);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     highLevelClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(indexRequest);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>优点：</p><ul><li>业务逻辑简单；</li><li>实时性高。</li></ul><p>缺点：</p><ul><li>硬编码，有需要写入 MySQL 的地方都需要添加写入 ES 的代码；</li><li>业务强耦合；</li><li>存在双写失败丢数据风险；</li><li>性能较差，本来 MySQL 的性能不是很高，再加一个 ES，系统的性能必然会下降。</li></ul><h3 id="_2-2-异步双写" tabindex="-1">2.2 异步双写 <a class="header-anchor" href="#_2-2-异步双写" aria-label="Permalink to “2.2 异步双写”">​</a></h3><p>针对多数据源写入的场景，可以借助 MQ 实现异步的多源写入。</p><p><img src="`+p+'" alt="c098f954-4f05-4e27-9342-d16ee474edac" loading="lazy"></p><p>优点：</p><ul><li>性能高；</li><li>不易出现数据丢失问题，主要基于 MQ 消息的消费保障机制，比如 ES 宕机或者写入失败，还能重新消费 MQ 消息；</li><li>多源写入之间相互隔离，便于扩展更多的数据源写入。</li></ul><p>缺点：</p><ul><li>硬编码问题，接入新的数据源需要实现新的消费者代码；</li><li>系统复杂度增加，引入了消息中间件；</li><li>MQ是异步消费模型，用户写入的数据不一定可以马上看到，造成延时。</li></ul><h3 id="_2-3-基于-sql-抽取" tabindex="-1">2.3 基于 SQL 抽取 <a class="header-anchor" href="#_2-3-基于-sql-抽取" aria-label="Permalink to “2.3 基于 SQL 抽取”">​</a></h3><p>上面两种方案中都存在硬编码问题，代码的侵入性太强，如果对实时性要求不高的情况下，可以考虑用定时器来处理：</p><ol><li>数据库的相关表中增加一个字段为 timestamp 的字段，任何 CURD 操作都会导致该字段的时间发生变化；</li><li>原来程序中的 CURD 操作不做任何变化；</li><li>增加一个定时器程序，让该程序按一定的时间周期扫描指定的表，把该时间段内发生变化的数据提取出来；</li><li>逐条写入到 ES 中。</li></ol><p><img src="'+t+'" alt="c0043f97-4770-4c85-92d7-62387e545e62" loading="lazy"></p><p>优点：</p><ul><li>不改变原来代码，没有侵入性、没有硬编码；</li><li>没有业务强耦合，不改变原来程序的性能；</li><li>Worker 代码编写简单不需要考虑增删改查。</li></ul><p>缺点：</p><ul><li>时效性较差，由于是采用定时器根据固定频率查询表来同步数据，尽管将同步周期设置到秒级，也还是会存在一定时间的延迟；</li><li>对数据库有一定的轮询压力，一种改进方法是将轮询放到压力不大的从库上。</li></ul><blockquote><p>经典方案：借助 Logstash 实现数据同步，其底层实现原理就是根据配置定期使用 SQL 查询新增的数据写入 ES 中，实现数据的增量同步。</p></blockquote><h3 id="_2-4-基于-binlog-实时同步" tabindex="-1">2.4 基于 Binlog 实时同步 <a class="header-anchor" href="#_2-4-基于-binlog-实时同步" aria-label="Permalink to “2.4 基于 Binlog 实时同步”">​</a></h3><p>上面三种方案要么有代码侵入，要么有硬编码，要么有延迟，那么有没有一种方案既能保证数据同步的实时性又没有代入侵入呢？</p><p>当然有，可以利用 MySQL 的 Binlog 来进行同步。</p><p><img src="'+r+'" alt="0333083a-6fec-4321-829f-5fb9b247bbbd" loading="lazy"></p><p>具体步骤如下：</p><ul><li>读取 MySQL 的 Binlog 日志，获取指定表的日志信息；</li><li>将读取的信息转为 MQ；</li><li>编写一个 MQ 消费程序；</li><li>不断消费 MQ，每消费完一条消息，将消息写入到 ES 中。</li></ul><p>优点：</p><ul><li>没有代码侵入、没有硬编码；</li><li>原有系统不需要任何变化，没有感知；</li><li>性能高；</li><li>业务解耦，不需要关注原来系统的业务逻辑。</li></ul><p>缺点：</p><ul><li>构建 Binlog 系统复杂；</li><li>如果采用 MQ 消费解析的 Binlog 信息，也会像方案二一样存在 MQ 延时的风险。</li></ul><h2 id="_3-数据迁移工具选型" tabindex="-1">3. 数据迁移工具选型 <a class="header-anchor" href="#_3-数据迁移工具选型" aria-label="Permalink to “3. 数据迁移工具选型”">​</a></h2><p>对于上面 4 种数据同步方案，“基于 Binlog 实时同步”方案是目前最常用的，也诞生了很多优秀的数据迁移工具，这里主要对这些迁移工具进行介绍。</p><p>这些数据迁移工具，很多都是基于 Binlog 订阅的方式实现，<strong>模拟一个 MySQL Slave 订阅 Binlog 日志，从而实现 CDC</strong>（Change Data Capture），将已提交的更改发送到下游，包括 INSERT、DELETE、UPDATE。</p><p>至于如何伪装？大家需要先了解 MySQL 的主从复制原理，需要学习这块知识的同学，可以看我之前写的高并发教程，里面有详细讲解。</p><h3 id="_3-1-cannel" tabindex="-1">3.1 Cannel <a class="header-anchor" href="#_3-1-cannel" aria-label="Permalink to “3.1 Cannel”">​</a></h3><p>基于数据库增量日志解析，提供增量数据订阅&amp;消费，目前主要支持 MySQL。</p><p>Canal 原理就是伪装成 MySQL 的从节点，从而订阅 master 节点的 Binlog 日志，主要流程为：</p><ol><li>Canal 服务端向 MySQL 的 master 节点传输 dump 协议；</li><li>MySQL 的 master 节点接收到 dump 请求后推送 Binlog 日志给 Canal 服务端，解析 Binlog 对象（原始为 byte 流）转成 Json 格式；</li><li>Canal 客户端通过 TCP 协议或 MQ 形式监听 Canal 服务端，同步数据到 ES。</li></ol><p><img src="'+h+'" alt="0e91763e-50e8-4870-8583-d4abba1a6959" loading="lazy"></p><p>下面是 Cannel 执行的核心流程，其中 Binlog Parser 主要负责 Binlog 的提取、解析和推送，EventSink 负责数据的过滤 、路由和加工，仅作了解即可。</p><p><img src="'+o+'" alt="5fb504e9-256d-41a0-8663-4b97790c29d9" loading="lazy"></p><h3 id="_3-2-阿里云-dts" tabindex="-1">3.2 阿里云 DTS <a class="header-anchor" href="#_3-2-阿里云-dts" aria-label="Permalink to “3.2 阿里云 DTS”">​</a></h3><p>数据传输服务 DTS（Data Transmission Service）支持 RDBMS、NoSQL、OLAP 等多种数据源之间的数据传输。</p><p>它提供了数据迁移、实时数据订阅及数据实时同步等多种数据传输方式。相对于第三方数据流工具，DTS 提供丰富多样、高性能、高安全可靠的传输链路，同时它提供了诸多便利功能，极大方便了传输链路的创建及管理。</p><p>特点：</p><ul><li>多数据源：支持 RDBMS、NoSQL、OLAP 等多种数据源间的数据传输；</li><li>多传输方式：支持多种传输方式，包括数据迁移、实时数据订阅及数据实时同步；</li><li>高性能：底层采用了多种性能优化措施，全量数据迁移高峰期时性能可以达到70MB/s，20万的TPS，使用高规格服务器来保证每条迁移或同步链路都能拥有良好的传输性能；</li><li>高可用：底层为服务集群，如果集群内任何一个节点宕机或发生故障，控制中心都能够将这个节点上的所有任务快速切换到其他节点上，链路稳定性高；</li><li>简单易用：提供可视化管理界面，提供向导式的链路创建流程，用户可以在其控制台简单轻松地创建传输链路；</li><li>需要付费。</li></ul><p>再看看 DTS 的系统架构。</p><p><img src="'+c+'" alt="56f3faeb-e1bb-49f5-9076-3f5b696be66e" loading="lazy"></p><ul><li>高可用：数据传输服务内部每个模块都有主备架构，保证系统高可用。容灾系统实时检测每个节点的健康状况，一旦发现某个节点异常，会将链路快速切换到其他节点。</li><li>数据源地址动态适配：对于数据订阅及同步链路，容灾系统还会监测数据源的连接地址切换等变更操作，一旦发现数据源发生连接地址变更，它会动态适配数据源新的连接方式，在数据源变更的情况下，保证链路的稳定性。</li></ul><p>更多内容，请查看阿里官方文档：<a href="https://help.aliyun.com/product/26590.html" target="_blank" rel="noreferrer">https://help.aliyun.com/product/26590.html</a></p><h3 id="_3-3-databus" tabindex="-1">3.3 Databus <a class="header-anchor" href="#_3-3-databus" aria-label="Permalink to “3.3 Databus”">​</a></h3><p>Databus 是一个低延迟、可靠的、支持事务的、保持一致性的数据变更抓取系统。由 LinkedIn 于 2013 年开源。</p><p>Databus 通过挖掘数据库日志的方式，将数据库变更实时、可靠的从数据库拉取出来，业务可以通过定制化 client 实时获取变更并进行其他业务逻辑。</p><p>特点：</p><ul><li>多数据源：Databus 支持多种数据来源的变更抓取，包括 Oracle 和 MySQL。</li><li>可扩展、高度可用：Databus 能扩展到支持数千消费者和事务数据来源，同时保持高度可用性。</li><li>事务按序提交：Databus 能保持来源数据库中的事务完整性，并按照事务分组和来源的提交顺寻交付变更事件。</li><li>低延迟、支持多种订阅机制：数据源变更完成后，Databus 能在毫秒级内将事务提交给消费者。同时，消费者使用D atabus 中的服务器端过滤功能，可以只获取自己需要的特定数据。</li><li>无限回溯：对消费者支持无限回溯能力，例如当消费者需要产生数据的完整拷贝时，它不会对数据库产生任何额外负担。当消费者的数据大大落后于来源数据库时，也可以使用该功能。</li></ul><p>再看看 Databus 的系统架构。</p><p>Databus 由 Relays、bootstrap 服务和 Client lib 等组成，Bootstrap 服务中包括 Bootstrap Producer 和 Bootstrap Server。</p><p><img src="'+d+`" alt="0ff175b6-de60-476c-9de0-5cac6f88dee2" loading="lazy"></p><ul><li>快速变化的消费者直接从 Relay 中取事件；</li><li>如果一个消费者的数据更新大幅落后，它要的数据就不在 Relay 的日志中，而是需要<strong>请求 Bootstrap 服务，返回的将会是自消费者上次处理变更之后的所有数据变更快照。</strong></li></ul><p>开源地址：<a href="https://github.com/linkedin/databus" target="_blank" rel="noreferrer">https://github.com/linkedin/databus</a></p><h3 id="_3-4-其它" tabindex="-1">3.4 其它 <a class="header-anchor" href="#_3-4-其它" aria-label="Permalink to “3.4 其它”">​</a></h3><p><strong>Flink</strong></p><ul><li>有界数据流和无界数据流上进行有状态计算分布式处理引擎和框架。</li><li>官网地址：<a href="https://flink.apache.org" target="_blank" rel="noreferrer">https://flink.apache.org</a></li></ul><p><strong>CloudCanal</strong></p><ul><li>数据同步迁移系统，商业产品。</li><li>官网地址：<a href="https://www.clougence.com/?utm_source=wwek" target="_blank" rel="noreferrer">https://www.clougence.com/?utm_source=wwek</a></li></ul><p><strong>Maxwell</strong></p><ul><li>使用简单，直接将数据变更输出为json字符串，不需要再编写客户端。</li><li>官网地址：<a href="http://maxwells-daemon.io" target="_blank" rel="noreferrer">http://maxwells-daemon.io</a></li></ul><p><strong>DRD</strong></p><ul><li>阿里巴巴集团自主研发的分布式数据库中间件产品，专注于解决单机关系型数据库扩展性问题，具备轻量(无状态)、灵活、稳定、高效等特性。</li><li>官方地址：<a href="https://www.aliyun.com/product/drds" target="_blank" rel="noreferrer">https://www.aliyun.com/product/drds</a></li></ul><p><strong>yugong</strong></p><ul><li>帮助用户完成从 Oracle 数据迁移到 MySQL。</li><li>访问地址：<a href="https://github.com/alibaba/yugong" target="_blank" rel="noreferrer">https://github.com/alibaba/yugong</a></li></ul><h3 id="kettle" tabindex="-1">Kettle <a class="header-anchor" href="#kettle" aria-label="Permalink to “Kettle”">​</a></h3><p>Kettle是一款国外开源的ETL工具，用java编写，可以在视窗、Linux和Unix上运行，数据抽取高效稳定，中文称水壶。这个项目的主要程序员MATT想把各种数据放进一个水壶，然后以指定的格式流出。它是一个ETL工具集，允许你管理来自不同数据库的数据，并通过提供一个图形用户环境来描述你想做什么，而不是你想怎么做。Kettle中有两个脚本文件，转换和作业。转换完成了数据的基本转换，而作业完成了对整个工作流的控制。</p><p>优点：功能强大，支持几乎所有数据库；</p><p>缺点: 需要用户自己一步步配置，学习成本高；通过查询语句select同步的；</p><p>项目地址：<a href="https://github.com/pentaho/pentaho-kettle" target="_blank" rel="noreferrer">https://github.com/pentaho/pentaho-kettle</a></p><p><a href="https://www.jb51.net/article/267074.htm" target="_blank" rel="noreferrer">https://www.jb51.net/article/267074.htm</a></p><p><a href="https://www.cnblogs.com/easyjie/p/15740627.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/easyjie/p/15740627.html</a></p><h3 id="dbmotion" tabindex="-1">DBMotion <a class="header-anchor" href="#dbmotion" aria-label="Permalink to “DBMotion”">​</a></h3><p><a href="https://www.cnblogs.com/libruce/p/18011741" target="_blank" rel="noreferrer">https://www.cnblogs.com/libruce/p/18011741</a></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>version: &#39;3.0&#39;</span></span>
<span class="line"><span>services:</span></span>
<span class="line"><span>  #dts-mysql:</span></span>
<span class="line"><span>  #  image: mysql:latest</span></span>
<span class="line"><span>  #  container_name: dts-mysql</span></span>
<span class="line"><span>  #  environment:</span></span>
<span class="line"><span>  #    MYSQL_ROOT_PASSWORD: admin</span></span>
<span class="line"><span>  #  command: [&#39;mysqld&#39;, &#39;--character-set-server=utf8mb4&#39;, &#39;--collation-server=utf8mb4_unicode_ci&#39;, --default-time-zone=UTC]</span></span>
<span class="line"><span>  #  ports:</span></span>
<span class="line"><span>  #    - &quot;3307:3306&quot;</span></span>
<span class="line"><span>  dts-api-server:</span></span>
<span class="line"><span>    image: squids/dbmotion-community:latest</span></span>
<span class="line"><span>    container_name: dts-api-server</span></span>
<span class="line"><span>    environment:</span></span>
<span class="line"><span>      - SERVER_MODE=DOCKER</span></span>
<span class="line"><span>      # - MYSQL_URI=root:admin@(dts-mysql)/dbmotion</span></span>
<span class="line"><span>      - MYSQL_URI=root:ek4601@192.168.100.106:3306/dbmotion</span></span>
<span class="line"><span>    #depends_on:</span></span>
<span class="line"><span>    #  - dts-mysql</span></span>
<span class="line"><span>    volumes:</span></span>
<span class="line"><span>      - /var/run/docker.sock:/var/run/docker.sock</span></span>
<span class="line"><span>      - /var/dbmotion:/dbmotion/log</span></span>
<span class="line"><span>    privileged: true</span></span>
<span class="line"><span>  dts-ui:</span></span>
<span class="line"><span>    image: squids/dbmotion-ui-community:latest</span></span>
<span class="line"><span>    container_name: dts-ui</span></span>
<span class="line"><span>    ports:</span></span>
<span class="line"><span>      - &quot;30000:80&quot;</span></span>
<span class="line"><span>    depends_on:</span></span>
<span class="line"><span>      # - dts-mysql</span></span>
<span class="line"><span>      - dts-api-server</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h3 id="apache-seatunnel" tabindex="-1">Apache Seatunnel <a class="header-anchor" href="#apache-seatunnel" aria-label="Permalink to “Apache Seatunnel”">​</a></h3><p><a href="https://blog.csdn.net/qq_36434219/article/details/134857560" target="_blank" rel="noreferrer">Apache Seatunnel部署（apache-seatunnel-2.3.3-bin.tar.gz + apache-seatunnel-web-1.0.0-bin.tar.gz）_com.hazelcast.internal.diagnostics.healthmonitor-CSDN博客</a></p><h3 id="streamsets-etl" tabindex="-1">StreamSets ETL <a class="header-anchor" href="#streamsets-etl" aria-label="Permalink to “StreamSets ETL”">​</a></h3><p>双写：<a href="https://blog.csdn.net/pbrlovejava/article/details/125926775" target="_blank" rel="noreferrer">https://blog.csdn.net/pbrlovejava/article/details/125926775</a></p>`,94)])])}const S=s(b,[["render",k]]);export{f as __pageData,S as default};
