import{_ as s,c as l,o as i,ah as p}from"./chunks/framework.D5cOWG0Y.js";const b=JSON.parse('{"title":"性能调优概述","description":"","frontmatter":{"title":"性能调优概述","tags":["JVM"],"categories":["JVM"]},"headers":[],"relativePath":"Java/JVM性能调优/JVM性能监控与调优/0_性能调优概述.md","filePath":"Java/JVM性能调优/JVM性能监控与调优/0_性能调优概述.md","lastUpdated":1755802517000}'),n={name:"Java/JVM性能调优/JVM性能监控与调优/0_性能调优概述.md"};function e(t,a,r,d,c,o){return i(),l("div",null,[...a[0]||(a[0]=[p(`<h2 id="调优概述" tabindex="-1">调优概述 <a class="header-anchor" href="#调优概述" aria-label="Permalink to “调优概述”">​</a></h2><p>为什么要调优</p><ul><li>防止出现OOM</li><li>解决OOM</li><li>减少Full GC出现的频率</li></ul><p>生产环境中的问题</p><ul><li>生产环境发生了内存溢出该如何处理？</li><li>生产环境应该给服务器分配多少内存合适？</li><li>如何对垃圾回收器的性能进行调优？</li><li>生产环境CPU负载飙高该如何处理？</li><li>生产环境应该给应用分配多少线程合适？</li><li>不加log，如何确定请求是否执行了某一行代码？</li><li>不加log，如何实时查看某个方法的入参与返回值？</li></ul><p>监控的依据</p><ul><li>运行日志</li><li>异常堆栈</li><li>GC日志</li><li>线程快照</li><li>堆转储快照</li></ul><p>调优的大方向</p><ul><li>合理地编写代码</li><li>充分并合理的使用硬件资源</li><li>合理地进行JVM调优</li></ul><h2 id="性能优化的步骤" tabindex="-1">性能优化的步骤 <a class="header-anchor" href="#性能优化的步骤" aria-label="Permalink to “性能优化的步骤”">​</a></h2><p>第1步：性能监控</p><ul><li>GC频繁</li><li>cpu load过高</li><li>OOM</li><li>内存泄露</li><li>死锁</li><li>程序响应时间较长</li></ul><p>第2步：性能分析</p><ul><li>打印GC日志，通过GCviewer或者 <a href="http://gceasy.io/" target="_blank" rel="noreferrer">http://gceasy.io</a> 来分析异常信息</li><li>灵活运用命令行工具、jstack、jmap、jinfo等</li><li>dump出堆文件，使用内存分析工具分析文件</li><li>使用阿里Arthas、jconsole、JVisualVM来实时查看JVM状态</li><li>jstack查看堆栈信息</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>Sun JDK监控和故障常用处理命令：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>jps：JVM Process Status Tool，显示指定系统内所有的HotSpot虚拟机进程。</span></span>
<span class="line"><span>jstat：JVM statistics Monitoring是用于监视虚拟机运行时状态信息的命令，它可以显示出虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据。</span></span>
<span class="line"><span>jmap：JVM Memory Map命令用于生成heap dump文件。</span></span>
<span class="line"><span>jhat：JVM Heap Analysis Tool命令是与jmap搭配使用，用来分析jmap生成的dump，jhat内置了一个微型的HTTP/HTML服务器，生成dump的分析结果后，可以在浏览器中查看。</span></span>
<span class="line"><span>jstack：用于生成java虚拟机当前时刻的线程快照。</span></span>
<span class="line"><span>jinfo：JVM Configuration info 这个命令作用是实时查看和调整虚拟机运行参数。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>第3步：性能调优</p><ul><li><p>适当增加内存，根据业务背景选择垃圾回收器</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>设定堆内存大小</span></span>
<span class="line"><span>-Xmx：堆内存最大限制</span></span>
<span class="line"><span></span></span>
<span class="line"><span>设定新生代大小， 新生代不宜太小，否则会有大量对象涌入老年代。 -XX:NewSize：新生代大小 -XX:NewRatio 新生代和老生代占比 -XX:SurvivorRatio：伊甸园空间和幸存者空间的占比</span></span>
<span class="line"><span></span></span>
<span class="line"><span>设定垃圾回收器</span></span>
<span class="line"><span>年轻代用 -XX:+UseParNewGC</span></span>
<span class="line"><span>年老代用-XX:+UseConcMarkSweepGC</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>优化代码，控制内存使用</p></li><li><p>增加机器，分散节点压力</p></li><li><p>合理设置线程池线程数量</p></li><li><p>使用中间件提高程序效率，比如缓存、消息队列等</p></li><li><p>其他……</p></li></ul><h2 id="性能评价-测试指标" tabindex="-1">性能评价/测试指标 <a class="header-anchor" href="#性能评价-测试指标" aria-label="Permalink to “性能评价/测试指标”">​</a></h2><p>停顿时间（或响应时间）</p><p>提交请求和返回该请求的响应之间使用的时间，一般比较关注平均响应时间。常用操作的响应时间列表：</p><table tabindex="0"><thead><tr><th>操作</th><th>响应时间</th></tr></thead><tbody><tr><td>打开一个站点</td><td>几秒</td></tr><tr><td>数据库查询一条记录（有索引）</td><td>十几毫秒</td></tr><tr><td>机械磁盘一次寻址定位</td><td>4毫秒</td></tr><tr><td>从机械磁盘顺序读取1M数据</td><td>2毫秒</td></tr><tr><td>从SSD磁盘顺序读取1M数据</td><td>0.3毫秒</td></tr><tr><td>从远程分布式换成Redis 读取一个数据</td><td>0.5毫秒</td></tr><tr><td>从内存读取 1M数据</td><td>十几微妙</td></tr><tr><td>Java程序本地方法调用</td><td>几微妙</td></tr><tr><td>网络传输2Kb数据</td><td>1 微妙</td></tr></tbody></table><p>在垃圾回收环节中：</p><ul><li>暂停时间：执行垃圾收集时，程序的工作线程被暂停的时间。</li><li>-XX:MaxGCPauseMillis</li></ul><p>吞吐量</p><ul><li>对单位时间内完成的工作量（请求）的量度</li><li>在GC中：运行用户代码的事件占总运行时间的比例（总运行时间：程序的运行时间+内存回收的时间）</li><li>吞吐量为1-1/(1+n)，其中-XX::GCTimeRatio=n</li></ul><p>并发数</p><ul><li>同一时刻，对服务器有实际交互的请求数</li></ul><p>内存占用</p><ul><li>Java堆区所占的内存大小</li></ul><p>相互间的关系</p><p>以高速公路通行状况为例</p><ul><li>吞吐量：每天通过高速公路收费站的车辆的数据</li><li>并发数：高速公路上正在行驶的车辆的数目</li><li>响应时间：车速</li></ul><h2 id="大厂面试题" tabindex="-1">大厂面试题 <a class="header-anchor" href="#大厂面试题" aria-label="Permalink to “大厂面试题”">​</a></h2><p>支付宝：</p><p>支付宝三面：JVM性能调优都做了什么？</p><p>小米：</p><p>有做过JVM内存优化吗？</p><p>从SQL、JVM、架构、数据库四个方面讲讲优化思路</p><p>蚂蚁金服：</p><p>JVM的编译优化</p><p>jvm性能调优都做了什么</p><p>JVM诊断调优工具用过哪些？</p><p>二面：jvm怎样调优，堆内存、栈空间设置多少合适</p><p>三面：JVM相关的分析工具使用过的有哪些？具体的性能调优步骤如何</p><p>阿里：</p><p>如何进行JVM调优？有哪些方法？</p><p>如何理解内存泄漏问题？有哪些情况会导致内存泄漏？如何解决？</p><p>字节跳动：</p><p>三面：JVM如何调优、参数怎么调？</p><p>拼多多：</p><p>从SQL、JVM、架构、数据库四个方面讲讲优化思路</p><p>京东：</p><p>JVM诊断调优工具用过哪些？</p><p>每秒几十万并发的秒杀系统为什么会频繁发生GC？</p><p>日均百万级交易系统如何优化JVM？</p><p>线上生产系统OOM如何监控及定位与解决？</p><p>高并发系统如何基于G1垃圾回收器优化性能？</p>`,57)])])}const h=s(n,[["render",e]]);export{b as __pageData,h as default};
